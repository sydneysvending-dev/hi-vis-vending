{"file_contents":{"AWS_SETUP_GUIDE.md":{"content":"# AWS Integration Setup Guide for Hi-Vis Vending\n\nThis guide explains how to set up AWS services to automatically transfer transaction data from your Moma vending machines to the Hi-Vis loyalty app.\n\n## Overview\n\nThe AWS integration provides two methods for data transfer:\n1. **S3 Bucket**: For batch file uploads from Moma app\n2. **SQS Queue**: For real-time transaction notifications (optional)\n\n## Prerequisites\n\n- AWS Account with appropriate permissions\n- Moma app with AWS export capability\n- Hi-Vis Vending admin access\n\n## Step 1: AWS Credentials Setup\n\n### 1.1 Create IAM User\n1. Log into AWS Console\n2. Navigate to IAM → Users\n3. Create new user: `hi-vis-moma-sync`\n4. Attach policies:\n   - `AmazonS3FullAccess` (or custom policy for your bucket)\n   - `AmazonSQSFullAccess` (if using SQS)\n\n### 1.2 Environment Variables\nAdd these credentials to your Hi-Vis app environment:\n\n```bash\nAWS_ACCESS_KEY_ID=AKIA...\nAWS_SECRET_ACCESS_KEY=...\nAWS_REGION=us-east-1\nMOMA_S3_BUCKET=hi-vis-moma-data\nMOMA_SQS_QUEUE=https://sqs.us-east-1.amazonaws.com/.../hi-vis-transaction-notifications\n```\n\n## Step 2: S3 Bucket Configuration\n\n### 2.1 Create S3 Bucket\n```bash\naws s3 mb s3://hi-vis-moma-data --region us-east-1\n```\n\n### 2.2 Folder Structure\n```\nhi-vis-moma-data/\n├── transactions/\n│   ├── 2025-01-01/\n│   │   ├── batch-001.json\n│   │   └── batch-002.json\n│   └── 2025-01-02/\n│       └── batch-003.json\n└── processed/\n    └── archive/\n```\n\n### 2.3 Expected JSON Format\n```json\n[\n  {\n    \"transactionId\": \"TXN-20250101-001\",\n    \"date\": \"2025-01-01T14:30:00Z\",\n    \"amount\": 350,\n    \"cardNumber\": \"1234\",\n    \"product\": \"Large Coffee\",\n    \"machineId\": \"VEND-001\"\n  }\n]\n```\n\n## Step 3: SQS Queue Setup (Optional)\n\n### 3.1 Create SQS Queue\n```bash\naws sqs create-queue \\\n  --queue-name hi-vis-transaction-notifications \\\n  --region us-east-1\n```\n\n### 3.2 Message Format\n```json\n{\n  \"transactionId\": \"TXN-20250101-001\",\n  \"date\": \"2025-01-01T14:30:00Z\",\n  \"amount\": 350,\n  \"cardNumber\": \"1234\",\n  \"product\": \"Large Coffee\",\n  \"machineId\": \"VEND-001\"\n}\n```\n\n## Step 4: Moma App Configuration\n\n### 4.1 S3 Upload Settings\nConfigure your Moma app to:\n- Export transaction data every 15 minutes\n- Upload to: `s3://hi-vis-moma-data/transactions/`\n- File format: JSON\n- Include: date, amount, card_number, product, machine_id\n\n### 4.2 SQS Notifications (Optional)\nFor real-time sync, configure Moma to send SQS messages:\n- Queue URL: `https://sqs.us-east-1.amazonaws.com/.../hi-vis-transaction-notifications`\n- Message format: JSON transaction data\n\n## Step 5: Testing the Integration\n\n### 5.1 Test S3 Upload\n1. Upload a test transaction file to S3\n2. Check Hi-Vis admin dashboard → AWS Integration tab\n3. Click \"Test Connection\" - should show success\n4. Click \"Start AWS Sync\" to begin monitoring\n\n### 5.2 Verify Data Processing\n1. Check external transactions in admin dashboard\n2. Verify points are awarded to users automatically\n3. Monitor logs for any processing errors\n\n## Data Mapping\n\nThe AWS integration automatically maps transaction data:\n\n| Moma Field | Hi-Vis Field | Notes |\n|------------|--------------|-------|\n| date | date | ISO 8601 format |\n| amount | amount | Cents (350 = $3.50) |\n| card_number | cardNumber | Links to user accounts |\n| product | product | Description |\n| machine_id | machineId | Vending machine identifier |\n| transaction_id | externalId | Unique transaction ID |\n\n## Points Calculation\n\n- **10 points per dollar spent**\n- Example: $3.50 purchase = 35 points\n- Automatic tier progression based on total points\n- Punch card progress (1 punch per purchase)\n\n## Troubleshooting\n\n### Common Issues\n\n1. **AWS Connection Failed**\n   - Verify credentials in environment variables\n   - Check IAM permissions\n   - Ensure S3 bucket exists\n\n2. **Transactions Not Processing**\n   - Check S3 folder structure matches expected format\n   - Verify JSON format is correct\n   - Check Hi-Vis logs for parsing errors\n\n3. **Users Not Getting Points**\n   - Ensure card numbers match user profiles\n   - Check that card numbers are linked in user accounts\n   - Verify transaction amounts are in correct format\n\n### Support\n\nFor technical support with AWS integration:\n1. Check Hi-Vis admin dashboard logs\n2. Verify AWS CloudWatch logs\n3. Contact Hi-Vis technical support with error details\n\n## Security Considerations\n\n- Use IAM roles with minimal required permissions\n- Enable S3 bucket encryption\n- Consider VPC endpoints for private network access\n- Regularly rotate AWS access keys\n- Monitor AWS CloudTrail for access logs\n\n## Cost Optimization\n\n- Configure S3 lifecycle policies to archive old files\n- Use SQS only for real-time requirements\n- Monitor AWS costs through Cost Explorer\n- Consider S3 Intelligent Tiering for cost savings","size_bytes":4811},"MOMA_AWS_INTEGRATION_COMPLETE.md":{"content":"# Complete Moma AWS Integration Guide\n\n## Overview\n\nYour Hi-Vis Vending loyalty app now supports **complete AWS integration** with the Moma vending machine app. This provides automated, scalable data transfer without manual intervention.\n\n## AWS Integration Methods\n\n### Method 1: S3 Bucket Integration (Recommended)\n- **What it does**: Monitors AWS S3 bucket for transaction files uploaded by Moma app\n- **How it works**: Checks every 5 minutes for new JSON files, processes automatically\n- **Best for**: Batch processing, reliable data transfer\n\n### Method 2: SQS Queue Integration (Real-time)\n- **What it does**: Receives instant notifications when transactions occur\n- **How it works**: Processes messages in real-time as they arrive\n- **Best for**: Immediate point awards, instant customer notifications\n\n## Quick Setup Steps\n\n### 1. AWS Account Setup\n```bash\n# Required environment variables\nAWS_ACCESS_KEY_ID=your_access_key_here\nAWS_SECRET_ACCESS_KEY=your_secret_key_here\nAWS_REGION=us-east-1\nMOMA_S3_BUCKET=hi-vis-moma-data\nMOMA_SQS_QUEUE=https://sqs.us-east-1.amazonaws.com/your-account/hi-vis-notifications\n```\n\n### 2. Configure Moma App Export\nSet your Moma app to export transaction data to:\n- **S3 Bucket**: `hi-vis-moma-data`\n- **Folder**: `transactions/`\n- **Format**: JSON files\n- **Schedule**: Every 15 minutes (or real-time via SQS)\n\n### 3. Expected Data Format\n```json\n{\n  \"transactionId\": \"TXN-20250101-001\",\n  \"date\": \"2025-01-01T14:30:00Z\",\n  \"amount\": 350,\n  \"cardNumber\": \"1234\",\n  \"product\": \"Large Coffee\",\n  \"machineId\": \"VEND-001\"\n}\n```\n\n## Admin Dashboard Controls\n\n### AWS Integration Tab\n1. **Start AWS Sync**: Begins monitoring S3 and SQS\n2. **Stop AWS Sync**: Pauses all AWS monitoring\n3. **Test Connection**: Verifies AWS credentials and access\n4. **Status Display**: Shows current sync state and last update\n\n### How to Use\n1. Navigate to Admin Dashboard → AWS Integration tab\n2. Click \"Test Connection\" to verify AWS setup\n3. Click \"Start AWS Sync\" to begin automatic processing\n4. Monitor status and check for new transactions\n\n## Automatic Processing\n\n### What Happens Automatically\n1. **File Detection**: System finds new transaction files in S3\n2. **Data Processing**: Converts Moma format to Hi-Vis transactions\n3. **User Matching**: Links transactions to users via card numbers\n4. **Point Awards**: Automatically gives 10 points per dollar spent\n5. **Notifications**: Sends push notifications for achievements\n\n### Customer Benefits\n- **Seamless Experience**: Points awarded without customer action\n- **Real-time Updates**: Instant notifications and tier progression\n- **Automatic Rewards**: Punch card completion and bonus points\n- **No QR Scanning**: Points credited just by using linked payment card\n\n## Integration Monitoring\n\n### Success Indicators\n- AWS sync status shows \"Running\"\n- Transaction count increases in admin dashboard\n- Users receive automatic point credits\n- External transactions appear in admin panel\n\n### Troubleshooting\n- **Connection Failed**: Check AWS credentials in environment\n- **No Transactions**: Verify Moma app is uploading to correct S3 path\n- **Users Not Getting Points**: Ensure card numbers match user profiles\n\n## Security & Best Practices\n\n### AWS Security\n- Use IAM roles with minimal required permissions\n- Enable S3 bucket encryption\n- Regularly rotate access keys\n- Monitor CloudTrail for access logs\n\n### Data Privacy\n- Transaction data encrypted in transit and at rest\n- Card numbers hashed for security\n- Only authorized admin access to transaction details\n- GDPR-compliant data handling\n\n## Business Benefits\n\n### For Operations\n- **Reduced Manual Work**: No CSV uploads or manual processing\n- **Real-time Analytics**: Instant visibility into sales and customer behavior\n- **Scalable Processing**: Handles thousands of transactions automatically\n- **Error Reduction**: Eliminates manual data entry mistakes\n\n### For Customers\n- **Frictionless Experience**: Points awarded automatically\n- **Instant Gratification**: Real-time notifications and tier progression\n- **No App Interaction Required**: Works with existing payment methods\n- **Reliable Point Tracking**: Never miss points from purchases\n\n## Technical Architecture\n\n### Data Flow\n1. **Moma Transaction** → AWS S3/SQS\n2. **Hi-Vis Monitors** → AWS services every 5 minutes\n3. **Automatic Processing** → Points awarded to users\n4. **Real-time Updates** → Customer notifications sent\n\n### Failsafe Features\n- **Duplicate Prevention**: External transaction IDs prevent double-processing\n- **Error Handling**: Failed transactions logged for manual review\n- **Backup Methods**: CSV import still available as fallback\n- **Data Integrity**: Checksums and validation on all imported data\n\n## Next Steps\n\n1. **Set up AWS credentials** in your Hi-Vis environment\n2. **Configure Moma app** to export to AWS S3\n3. **Test the integration** with a few sample transactions\n4. **Monitor and optimize** based on transaction volume\n5. **Train staff** on admin dashboard features\n\nYour Hi-Vis Vending loyalty app is now ready for enterprise-scale automatic data integration with Moma vending machines!","size_bytes":5138},"MOMA_INTEGRATION_GUIDE.md":{"content":"# Moma App Integration Guide for Hi-Vis Vending\n\nThis guide explains how to automatically scrape and sync transaction data from your Moma vending machine app to the Hi-Vis loyalty system.\n\n## 🎯 Overview\n\nThe Hi-Vis loyalty app can automatically process transactions from your Moma vending machines in three ways:\n\n1. **Real-time Webhooks** (Recommended) - Instant transaction processing\n2. **API Polling** - Automatic periodic data fetching  \n3. **Manual Import** - CSV upload and manual matching\n\n## 🔄 Method 1: Real-time Webhooks (Recommended)\n\n### Setup Steps:\n\n1. **Configure Webhook in Moma App:**\n   - Login to your Moma admin dashboard\n   - Navigate to Settings > Webhooks/Integrations\n   - Add webhook URL: `https://your-replit-domain/api/moma/webhook`\n   - Set trigger: \"Transaction Completed\"\n\n2. **Webhook Payload Format:**\n```json\n{\n  \"transaction\": {\n    \"id\": \"MOMA_TX_12345\",\n    \"machine_id\": \"HIVIS_MACHINE_001\",\n    \"card_number\": \"4532123456789012\",\n    \"amount_cents\": 350,\n    \"product_name\": \"Coca Cola 600ml\",\n    \"timestamp\": \"2025-01-30T06:15:30Z\",\n    \"location\": \"Construction Site A\",\n    \"payment_method\": \"credit_card\"\n  }\n}\n```\n\n3. **Benefits:**\n   - Instant point awards (no delay)\n   - Real-time notifications to customers\n   - Automatic tier upgrades\n   - No manual intervention needed\n\n## 🔁 Method 2: API Polling (Auto-sync)\n\n### Setup Steps:\n\n1. **Get Moma API Credentials:**\n   - Contact your Moma account manager for API access\n   - Obtain API key and endpoint URL\n\n2. **Configure Environment Variables:**\n   ```bash\n   MOMA_API_KEY=your_moma_api_key_here\n   MOMA_API_URL=https://api.moma.app\n   ```\n\n3. **Start Auto-sync:**\n   - Login to Hi-Vis admin dashboard\n   - Go to \"Moma Sync\" tab\n   - Click \"Test Connection\" to verify\n   - Click \"Start Auto-Sync\"\n\n4. **How it Works:**\n   - Checks Moma API every 30 seconds\n   - Fetches new transactions since last sync\n   - Automatically matches to Hi-Vis users\n   - Awards points and sends notifications\n\n## 📋 Method 3: Manual Import\n\n### Setup Steps:\n\n1. **Export from Moma:**\n   - Generate transaction report (CSV format)\n   - Include: transaction_id, machine_id, card_number, amount, product, timestamp\n\n2. **Process in Hi-Vis:**\n   - Use the external transaction demo script\n   - Manually match unprocessed transactions in admin dashboard\n\n## 🎯 Automatic Matching System\n\n### Matching Priority:\n1. **Card Number** (Primary) - Most reliable method\n2. **Phone Number** (Backup) - Alternative matching\n3. **Manual Matching** (Fallback) - Admin intervention required\n\n### Point Award Logic:\n- **10 points per dollar spent** (e.g., $3.50 purchase = 35 points)\n- **Punch card progress** (+1 punch per purchase)\n- **Tier upgrades** (Apprentice → Tradie → Foreman)\n- **Bonus rewards** (10 punches = 100 bonus points + free drink)\n\n## 🚀 Testing Your Integration\n\n### Using the Demo Script:\n```bash\nnode demo-external-transaction.js\n```\n\nThis script simulates Moma transactions and shows how the integration works.\n\n### Verify Integration:\n1. Send test transaction from Moma\n2. Check Hi-Vis admin dashboard for new transactions\n3. Verify points were awarded correctly\n4. Confirm user received notification\n\n## 🔧 Troubleshooting\n\n### Common Issues:\n\n**Webhook Not Receiving Data:**\n- Check webhook URL is correct\n- Verify Moma webhook is enabled\n- Check server logs for errors\n\n**API Polling Not Working:**\n- Verify MOMA_API_KEY is correct\n- Test connection in admin dashboard\n- Check API rate limits\n\n**Transactions Not Matching:**\n- Ensure customers have linked card numbers\n- Check card number format consistency\n- Use manual matching for unprocessed transactions\n\n**Points Not Awarded:**\n- Check transaction amount is in cents\n- Verify user exists in system\n- Check server logs for processing errors\n\n## 📊 Monitoring & Analytics\n\n### Admin Dashboard Features:\n- **Real-time Stats** - Users, transactions, points\n- **Transaction History** - All processed transactions\n- **Unprocessed Queue** - Transactions waiting for matching\n- **Sync Status** - Connection and polling status\n\n### Notification System:\n- **Points Earned** - \"You earned 35 points from your Coca Cola purchase!\"\n- **Tier Upgrades** - \"Congratulations! You've been promoted to Tradie tier!\"\n- **Punch Card** - \"Punch card completed - Free large drink!\"\n\n## 🔐 Security Considerations\n\n### API Security:\n- Use HTTPS for all webhook endpoints\n- Validate webhook signatures (if Moma provides)\n- Store API keys securely in environment variables\n- Rate limit webhook endpoints\n\n### Data Privacy:\n- Only store necessary transaction data\n- Hash/encrypt sensitive card information\n- Comply with PCI DSS requirements\n- Regular security audits\n\n## 🆘 Support\n\n### Getting Help:\n1. Check server logs for error messages\n2. Use admin dashboard diagnostics\n3. Test with demo script first\n4. Contact Moma support for API issues\n\n### Integration Success Metrics:\n- **Automatic Match Rate** - Target: >90% of transactions\n- **Processing Speed** - Target: <5 seconds from purchase to points\n- **Customer Satisfaction** - Instant gratification with point awards\n- **Admin Efficiency** - Minimal manual intervention required\n\n---\n\n**Pro Tip:** Start with Method 3 (manual import) to test the system, then implement Method 1 (webhooks) for full automation once everything is working correctly.","size_bytes":5349},"NAYAX_QR_INTEGRATION_GUIDE.md":{"content":"# Nayax DOT QR Code Integration Guide\n\n## Overview\n\nYour Hi-Vis Vending loyalty app now includes a complete QR code module that integrates with Nayax DOT vending machines. This enables customers to receive instant promotions, discounts, and bonus points by scanning personalized QR codes at vending machines.\n\n## How It Works\n\n### 1. Customer QR Code Generation\n- Each customer gets a unique, time-stamped QR code tied to their account\n- QR codes contain user ID, tier, current points, and security token\n- Codes automatically update with user's current tier and points\n- QR codes expire after 24 hours for security\n\n### 2. Vending Machine Integration\n- Customers select \"Scan QR Code\" on the Nayax DOT screen\n- Machine scans the customer's phone displaying their Hi-Vis QR code\n- System validates the code and returns applicable promotions\n- Discounts and free items are applied automatically to the transaction\n\n### 3. Real-time Promotion Delivery\n- System determines promotions based on customer's loyalty tier\n- Promotions are pushed to the Nayax DOT machine in real-time\n- Bonus points are awarded immediately to customer's account\n- Transaction is recorded for analytics and reporting\n\n## Customer Benefits by Tier\n\n### Apprentice (0-499 points)\n- **Welcome Discount**: 10% off any purchase\n- **Healthy Choice Bonus**: 25 extra points for healthy snacks\n- **Basic QR benefits**: Standard promotions\n\n### Tradie (500-999 points)\n- **All Apprentice benefits PLUS:**\n- **Power Hour**: Double points on energy drinks\n- **Beverage Special**: 15% off all beverages\n- **Enhanced QR benefits**: Better promotions and discounts\n\n### Foreman (1000+ points)\n- **All Tradie benefits PLUS:**\n- **Premium Special**: Free large coffee with any purchase\n- **Foreman Combo**: 20% off + 50 bonus points\n- **Elite QR benefits**: Maximum promotions and exclusive offers\n\n## Technical Implementation\n\n### QR Code Data Format\n```json\n{\n  \"userId\": \"user-123\",\n  \"timestamp\": 1704067200000,\n  \"tier\": \"Tradie\",\n  \"points\": 750,\n  \"type\": \"hi-vis-customer\",\n  \"token\": \"abc123def456\"\n}\n```\n\n### API Endpoints\n\n#### QR Code Validation (for Nayax machines)\n```http\nPOST /api/qr/validate\nContent-Type: application/json\n\n{\n  \"qrData\": \"JSON_STRING_FROM_QR_CODE\",\n  \"machineId\": \"VEND-001\"\n}\n```\n\n**Response:**\n```json\n{\n  \"isValid\": true,\n  \"user\": { \"id\": \"user-123\", \"firstName\": \"John\", \"currentTier\": \"Tradie\" },\n  \"promotions\": [\n    {\n      \"id\": \"promo-1\",\n      \"name\": \"Tradie Power Hour\",\n      \"description\": \"Double points on energy drinks\",\n      \"bonusPoints\": 20,\n      \"type\": \"bonus_points\"\n    }\n  ],\n  \"pointsBonus\": 20,\n  \"discountPercentage\": 15,\n  \"message\": \"Welcome John! 2 promotions available.\"\n}\n```\n\n### Nayax DOT Integration\n\n#### Step 1: Configure Nayax Machine\n1. Enable QR code scanning in Nayax DOT settings\n2. Set webhook URL: `https://your-domain/api/qr/validate`\n3. Configure promotion delivery endpoints\n4. Test connection with Hi-Vis backend\n\n#### Step 2: Promotion Delivery\nWhen a valid QR code is scanned:\n1. Hi-Vis validates the customer and determines promotions\n2. Promotion data is pushed to Nayax machine via API\n3. Nayax applies discount/free items to transaction\n4. Customer completes purchase with benefits applied\n5. Bonus points are awarded to Hi-Vis account\n\n#### Step 3: Transaction Recording\n- QR scan is logged in Hi-Vis database\n- Points are awarded based on promotion rules\n- User's tier progression is updated automatically\n- Analytics data is collected for reporting\n\n## Security Features\n\n### QR Code Security\n- **Time Expiration**: Codes expire after 24 hours\n- **Unique Tokens**: Random tokens prevent replay attacks\n- **User Validation**: Each scan validates against active user account\n- **Machine Verification**: Scans are tied to specific machine IDs\n\n### API Security\n- **Rate Limiting**: Prevents abuse of validation endpoint\n- **Request Validation**: All QR data is validated before processing\n- **Error Handling**: Failed scans are logged but don't expose user data\n- **Audit Trail**: Complete history of all QR scans and promotions\n\n## Customer Experience Flow\n\n### 1. Generate QR Code\n- Customer opens Hi-Vis app\n- Navigates to \"QR Scanner\" page\n- Personal QR code is displayed with current tier/points\n- Code refreshes automatically or on demand\n\n### 2. At the Vending Machine\n- Customer approaches Nayax DOT vending machine\n- Selects \"Scan QR Code\" option on screen\n- Holds phone with QR code up to scanner\n- Machine validates and applies promotions instantly\n\n### 3. Complete Purchase\n- Customer sees applied discounts/free items on screen\n- Completes purchase using preferred payment method\n- Receives instant notification of bonus points earned\n- QR code promotions are automatically applied\n\n### 4. Immediate Benefits\n- Bonus points appear in Hi-Vis app within seconds\n- Tier progression updates if thresholds are met\n- Transaction history shows QR code benefits\n- Push notifications confirm successful promotion redemption\n\n## Analytics and Reporting\n\n### QR Scan Metrics\n- **Total QR scans** per day/week/month\n- **Promotion redemption rates** by tier\n- **Most popular promotions** and discounts\n- **Peak usage times** at different machines\n\n### Customer Insights\n- **QR adoption rate** among loyalty members\n- **Average promotion value** per customer tier\n- **Frequency of QR usage** by individual customers\n- **Impact on purchase behavior** and basket size\n\n### Business Intelligence\n- **Revenue impact** of QR promotions\n- **Customer engagement** metrics\n- **Operational efficiency** gains\n- **ROI of promotional campaigns**\n\n## Setup Requirements\n\n### Hi-Vis App Configuration\n- QR scanner page added to navigation\n- Personal QR code generator implemented\n- Promotion display and management\n- Real-time point updates and notifications\n\n### Nayax DOT Configuration\n- QR code scanning capability enabled\n- Webhook integration with Hi-Vis backend\n- Promotion application system configured\n- Error handling and fallback procedures\n\n### Backend Integration\n- QR validation API endpoint\n- Nayax communication module\n- Promotion rule engine\n- Analytics and logging system\n\n## Troubleshooting\n\n### Common Issues\n\n#### QR Code Not Scanning\n- **Check QR code expiration**: Generate new code if older than 24 hours\n- **Verify screen brightness**: Ensure phone screen is bright enough\n- **Clean scanner lens**: Remove dust or debris from machine scanner\n- **Try different angle**: Hold phone parallel to scanner surface\n\n#### Promotions Not Applied\n- **Confirm tier eligibility**: Check if promotion matches customer tier\n- **Verify machine connectivity**: Ensure Nayax machine is online\n- **Check promotion validity**: Confirm promotion is active and not expired\n- **Review usage limits**: Check if customer has reached promotion usage limit\n\n#### Points Not Awarded\n- **Check internet connection**: Ensure Hi-Vis app has network access\n- **Verify account status**: Confirm customer account is active\n- **Review transaction logs**: Check admin dashboard for processing errors\n- **Wait for sync**: Points may take up to 30 seconds to appear\n\n### Support Process\n\n1. **Customer Issues**: Direct to Hi-Vis app support within the app\n2. **Machine Issues**: Contact Nayax technical support\n3. **Integration Issues**: Check admin dashboard logs and error reports\n4. **Promotion Issues**: Review promotion configuration in admin panel\n\n## Future Enhancements\n\n### Planned Features\n- **Location-based promotions**: Different offers for different sites\n- **Time-based promotions**: Happy hour discounts and special events\n- **Group promotions**: Team-based rewards and competitions\n- **Gamification**: Achievement badges and milestone rewards\n\n### Advanced Integration\n- **Biometric verification**: Enhanced security with fingerprint/face recognition\n- **Multi-machine promotions**: Promotions that span multiple vending machines\n- **Dynamic pricing**: Real-time price adjustments based on demand\n- **Inventory integration**: Promotions based on stock levels\n\nYour Hi-Vis Vending QR code system is now ready to deliver instant, personalized promotions to construction workers at vending machines across all your sites!","size_bytes":8159},"SETUP_MOMA_INTEGRATION.md":{"content":"# Moma Integration Setup Instructions\n\n## Current Status\nYour Hi-Vis loyalty app is ready for Moma integration, but the Moma API credentials need to be configured.\n\n## Step 1: Get Your Moma API Credentials\n\nContact your Moma account representative to obtain:\n- **API Key**: Your authentication token for accessing Moma's API\n- **API URL**: The base URL for your Moma API endpoints\n- **Webhook Access**: Permission to receive real-time transaction data\n\n## Step 2: Configure Environment Variables\n\nAdd these to your Replit environment secrets:\n\n```\nMOMA_API_KEY=your_actual_moma_api_key_here\nMOMA_API_URL=https://your-actual-moma-api-url.com\n```\n\n## Step 3: Integration Methods Available\n\n### Method 1: Real-time Webhooks (Recommended)\n- **Endpoint**: `https://your-replit-domain/api/moma/webhook`\n- **Trigger**: Transaction completed events\n- **Processing**: Instant point awards and notifications\n\n### Method 2: Automatic Polling\n- **Frequency**: Every 30 seconds\n- **Endpoint**: Uses your MOMA_API_URL to fetch new transactions\n- **Control**: Start/stop via admin dashboard\n\n### Method 3: Manual Processing\n- **Use Case**: Backup method or testing\n- **Process**: Export CSV from Moma, use demo script or admin matching\n\n## Step 4: Test Your Integration\n\n1. Configure environment variables\n2. Go to Admin Dashboard → Moma Sync tab\n3. Click \"Test Connection\" to verify API access\n4. Start automatic sync if connection works\n5. Test with a vending machine purchase\n\n## Current Demo Functionality\n\nThe system includes a demo script that simulates Moma transactions:\n```bash\nnode demo-external-transaction.js\n```\n\nThis shows how real transactions would be processed:\n- Creates external transactions in database\n- Awards points automatically when matched to users\n- Sends notifications to customers\n- Updates loyalty tiers and punch cards\n\n## What Happens After Setup\n\nOnce configured, customers can:\n1. Link their payment card in the Hi-Vis app\n2. Make purchases from vending machines\n3. Automatically receive loyalty points (10 points per dollar)\n4. Get instant notifications about points earned\n5. Enjoy automatic tier upgrades and rewards\n\n## Need Help?\n\nContact your Moma representative for:\n- API documentation specific to your setup\n- Authentication credentials\n- Webhook configuration assistance\n- Testing support\n\nThe Hi-Vis system is fully ready - it just needs the connection details from Moma to start automatic transaction processing.","size_bytes":2445},"demo-external-transaction.js":{"content":"// Demo script to simulate external vending machine transactions from Moma app\n// This demonstrates how your vending machine data can be automatically processed\n\nconst DEMO_TRANSACTIONS = [\n  {\n    externalId: \"MOMA_TX_001\",\n    machineId: \"HIVIS_MACHINE_001\", \n    cardNumber: \"4532123456789012\", // You'd set this in user profile\n    amount: 350, // $3.50 in cents\n    productName: \"Coca Cola 600ml\",\n    timestamp: new Date().toISOString()\n  },\n  {\n    externalId: \"MOMA_TX_002\", \n    machineId: \"HIVIS_MACHINE_002\",\n    cardNumber: \"4532123456789012\",\n    amount: 250, // $2.50 \n    productName: \"Mars Bar\",\n    timestamp: new Date().toISOString()\n  },\n  {\n    externalId: \"MOMA_TX_003\",\n    machineId: \"HIVIS_MACHINE_001\", \n    cardNumber: \"4532987654321098\", // Different user\n    amount: 450, // $4.50\n    productName: \"Monster Energy 500ml\", \n    timestamp: new Date().toISOString()\n  }\n];\n\nasync function sendTransactionToLoyaltyApp(transaction) {\n  try {\n    const response = await fetch('http://localhost:5000/api/external/transaction', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(transaction)\n    });\n\n    if (response.ok) {\n      console.log(`✅ Transaction ${transaction.externalId} processed successfully`);\n      console.log(`   - Product: ${transaction.productName}`);\n      console.log(`   - Amount: $${(transaction.amount / 100).toFixed(2)}`);\n      console.log(`   - Points earned: ${Math.floor(transaction.amount / 100) * 10}`); \n      console.log('');\n    } else {\n      console.log(`❌ Failed to process transaction ${transaction.externalId}`);\n    }\n  } catch (error) {\n    console.log(`❌ Error processing transaction ${transaction.externalId}:`, error.message);\n  }\n}\n\nasync function runDemo() {\n  console.log('🏗️  Hi-Vis Vending External Transaction Demo');\n  console.log('===========================================');\n  console.log('');\n  console.log('This simulates how transactions from your Moma app would');\n  console.log('automatically update user loyalty points in the Hi-Vis app.');\n  console.log('');\n  console.log('📡 Sending demo transactions...');\n  console.log('');\n\n  for (const transaction of DEMO_TRANSACTIONS) {\n    await sendTransactionToLoyaltyApp(transaction);\n    // Small delay between transactions\n    await new Promise(resolve => setTimeout(resolve, 500));\n  }\n\n  console.log('✅ Demo completed!');\n  console.log('');\n  console.log('💡 To set up automatic integration:');\n  console.log('   1. Users link their payment card in the Hi-Vis app');\n  console.log('   2. Your Moma app sends transaction data to our API');\n  console.log('   3. Points are automatically awarded based on purchase amount');\n  console.log('   4. Users get instant notifications about points earned');\n  console.log('');\n  console.log('🔗 Integration endpoint: POST /api/external/transaction');\n}\n\n// Run the demo\nrunDemo().catch(console.error);","size_bytes":2961},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Hi-Vis Vending - Loyalty App\n\n## Overview\n\nHi-Vis Vending is a mobile-first loyalty application designed for construction site vending machines. The app allows workers to earn points through purchases, track their loyalty progress, and redeem rewards. The system features a tiered loyalty system (Apprentice → Tradie → Foreman) and includes administrative capabilities for machine management and user analytics.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\nThis is a full-stack TypeScript application with a clear separation between client and server components:\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query for server state management\n- **UI Framework**: Radix UI primitives with shadcn/ui components\n- **Styling**: Tailwind CSS with custom Hi-Vis color scheme (orange/yellow theme)\n- **Build Tool**: Vite for development and production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: Replit OAuth integration with session management\n- **Session Storage**: PostgreSQL-backed sessions using connect-pg-simple\n\n## Key Components\n\n### Authentication System\n- **Provider**: Replit OAuth with OpenID Connect\n- **Session Management**: Server-side sessions stored in PostgreSQL\n- **Authorization**: Role-based access control (regular users vs admins)\n- **Security**: HTTP-only cookies with secure flags for production\n\n### Database Schema\nThe application uses four main database tables:\n\n1. **Users Table**: Stores user profiles, loyalty tier, points, and punch card progress\n2. **Transactions Table**: Records all point-earning and spending activities\n3. **Rewards Table**: Catalog of available rewards with point costs\n4. **Machines Table**: Vending machine inventory and status tracking\n5. **Sessions Table**: Server-side session storage for authentication\n\n### Loyalty System\n- **Tiers**: Three-tier system (Apprentice: 0-499 pts, Tradie: 500-999 pts, Foreman: 1000+ pts)\n- **Point Earning**: 10 points per purchase from vending machines\n- **Punch Card**: Digital punch card system (10 punches = free large drink)\n- **Rewards**: Point-based redemption system for drinks and snacks\n\n### QR Code Integration\n- **Scanner**: Mobile-optimized QR code scanner for machine interaction\n- **Machine Identification**: QR codes encode machine IDs for purchase tracking\n- **Purchase Flow**: Scan → Purchase → Points Awarded → Transaction Recorded\n\n## Data Flow\n\n1. **User Authentication**: Replit OAuth → Session Creation → User Profile Lookup/Creation\n2. **Purchase Flow**: QR Scan → Machine Validation → Points Award → Database Update\n3. **Reward Redemption**: Point Check → Deduction → Transaction Recording\n4. **Admin Operations**: Machine Status Updates → User Analytics → System Monitoring\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: PostgreSQL database connection (serverless-optimized)\n- **drizzle-orm**: Type-safe SQL query builder and ORM\n- **@tanstack/react-query**: Server state management and caching\n- **openid-client**: OAuth/OpenID Connect implementation\n- **express-session**: Session management middleware\n\n### UI Dependencies\n- **@radix-ui/***: Accessible UI primitive components\n- **tailwindcss**: Utility-first CSS framework\n- **lucide-react**: Feather icon set for React\n- **class-variance-authority**: Component variant management\n\n### Development Dependencies\n- **vite**: Frontend build tool and dev server\n- **typescript**: Type safety across the entire stack\n- **tsx**: TypeScript execution for Node.js\n\n## Deployment Strategy\n\n### Development Environment\n- **Frontend**: Vite dev server with HMR\n- **Backend**: Node.js with tsx for TypeScript execution\n- **Database**: Neon PostgreSQL (serverless)\n- **Authentication**: Replit OAuth (development mode)\n\n### Production Build\n- **Frontend**: Static build output to `dist/public`\n- **Backend**: ESBuild bundle to `dist/index.js`\n- **Serving**: Express serves both API routes and static frontend\n- **Database**: Neon PostgreSQL with connection pooling\n\n### Environment Configuration\n- **DATABASE_URL**: PostgreSQL connection string (required)\n- **SESSION_SECRET**: Session encryption key (required)\n- **REPL_ID**: Replit application identifier (required for OAuth)\n- **ISSUER_URL**: OAuth provider URL (defaults to Replit)\n\nThe application is optimized for deployment on Replit but can be adapted for other platforms by modifying the authentication strategy and environment configuration.\n\n## Recent Updates (January 2025)\n\n### Push Notifications & Admin Dashboard\n- **Enhanced Admin Dashboard**: Added comprehensive admin control panel with stats overview, user management, and notification sending capabilities\n- **Push Notification System**: Implemented construction industry-themed notification templates (\"Knock-off Deal's On\", \"Smoko Sorted\", etc.) with scheduled delivery\n- **User Analytics**: Added real-time statistics including active users today, total points earned/redeemed, and transaction tracking\n\n### Automatic Point Updates (Moma Integration)\n- **External Transaction Processing**: Built API endpoint `/api/external/transaction` to receive vending machine transaction data from Moma app\n- **Automatic User Matching**: System matches transactions to users via card numbers (no QR scanning required)\n- **Real-time Point Awards**: Points automatically credited based on purchase amount (10 points per dollar spent)\n- **Admin Transaction Management**: Unprocessed transactions can be manually matched to users through admin dashboard\n\n### Enhanced Database Schema\n- **Notifications Table**: Stores push notifications with scheduling and read status\n- **External Transactions Table**: Tracks vending machine purchases from external systems\n- **User Enhancements**: Added card number linking, push token storage, and notification preferences\n- **Transaction Enhancements**: Added external transaction ID linking and auto-generation flags\n\n### Integration Capabilities\n- **Webhook Endpoint**: `/api/external/transaction` accepts JSON transaction data from vending machine systems\n- **Automatic Processing**: Transactions automatically trigger point awards, tier promotions, and achievement notifications\n- **Manual Override**: Admin can manually match unprocessed transactions to users\n- **Real-time Updates**: Dashboard refreshes every 30 seconds to show new transactions\n\nThe system now supports fully automated point updates without user interaction, making it seamless for customers to earn loyalty points from vending machine purchases.\n\n### Alternative Integration Methods (No API Required)\n- **CSV Import System**: Admins can export transaction data from Moma app and upload CSV files for automatic processing\n- **QR Code Manual Entry**: Customers can scan QR codes at vending machines to manually add points for purchases\n- **Redemption Code System**: Customers receive unique codes (e.g., HIVIS-ABC123-DEF4) when redeeming rewards that can be validated at vending machines\n- **Admin Validation Tools**: Built-in redemption code validator for vending machine operators to verify and mark codes as used\n\n### Enhanced Reward Redemption System\n- **Unique Redemption Codes**: Each reward redemption generates a unique alphanumeric code\n- **Modal Display**: Customers see redemption codes in a prominent modal with copy-to-clipboard functionality\n- **Code Validation**: Admin dashboard includes tools to validate redemption codes and mark them as used\n- **Customer Notifications**: Automatic notifications sent when rewards are redeemed with redemption instructions\n\n### Developer Access Control (January 2025)\n- **Restricted Developer Page**: Added exclusive developer console accessible only to accounts with `isDeveloper` flag\n- **Email-Based Access**: Developer status automatically assigned to `byron@sydneyselectvending.com.au` during signup\n- **Advanced System Controls**: Developer console includes database operations, user analytics, and system diagnostics\n- **Security Separation**: Developer access is separate from admin access, providing higher-level system controls\n\n### AWS Integration for Moma Data Transfer (January 2025)\n- **S3 Bucket Monitoring**: Automatically processes transaction files uploaded by Moma app to AWS S3\n- **SQS Real-time Sync**: Optional SQS queue integration for instant transaction notifications\n- **Automated Processing**: Converts AWS data to Hi-Vis transactions and awards points automatically\n- **Admin Controls**: Full AWS sync management through admin dashboard (start/stop/test connections)\n- **Dual Data Sources**: Supports both batch file processing and real-time message queues\n- **Comprehensive Setup**: Complete AWS configuration guide with IAM, S3, and SQS setup instructions\n\nThe system now provides four complete integration methods:\n1. **AWS S3/SQS Integration**: Automatic sync with cloud services (recommended for scale)\n2. **CSV Import**: Manual upload of exported transaction data\n3. **QR Code Scanning**: Customer-initiated point collection\n4. **API Webhook**: Direct HTTP endpoint for real-time integration\n\n### Product-Specific Point System (February 2025)\n- **Smart Point Allocation**: AWS transactions automatically assign different point values based on product type\n- **Large Drinks**: 20 points per purchase (600ml, 750ml, or \"large\" in product name)\n- **Small Drinks**: 10 points per purchase (250ml, 330ml, cans, bottles, water, soft drinks)\n- **Snacks**: 15 points per purchase (chips, chocolate, bars, biscuits, nuts, crackers)\n- **Fallback System**: 10 points for unrecognized products\n- **Automated Processing**: Point calculation happens automatically during AWS sync without user intervention\n\n### Monthly Season Leaderboard System (February 2025)\n- **Monthly Competitions**: Leaderboard resets automatically each month with seasonal tracking\n- **Season Management**: System creates new seasons automatically (e.g., \"January 2025\", \"February 2025\")\n- **Suburb-Based Rankings**: Users compete within their suburb groups for monthly prizes\n- **Monthly Prize Structure**: \n  - 1st Place: 3 Free Large Drinks\n  - 2nd Place: 2 Free Large Drinks\n  - 3rd Place: 1 Free Large Drink\n- **Automatic Reset**: Points and rankings reset at month end, with historical season data preserved\n- **Visual Integration**: Leaderboard tab displays current month name and prize information prominently\n\n### UI/UX Enhancements (February 2025)\n- **Progress Bar Streak Tracker**: Replaced calendar icons with progress bar design for 7-day streak visualization\n- **7-Day Streak System**: Updated from 3-day to 7-day consecutive purchase requirement for free large drink\n- **Content Management System**: Added photo reel and app exclusive rewards sections with sample content\n- **Developer Console Content Tab**: Full content management interface for photo reel and app exclusive rewards\n- **Profile Picture Capitalization**: Auto-capitalize user initials on both home page and profile page\n- **Referrals Section Relocation**: Moved referrals from home page to bottom of rewards page for better UX\n- **Sample Content Integration**: Added 3 photo reel items and 3 app exclusive rewards with construction themes","size_bytes":11356},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        hivis: {\n          orange: \"var(--hivis-orange)\",\n          yellow: \"var(--hivis-yellow)\",\n          charcoal: \"var(--hivis-charcoal)\",\n          concrete: \"var(--hivis-concrete)\",\n          white: \"var(--hivis-white)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2866},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { sendEmail, createPasswordResetEmail } from \"./sendgrid\";\nimport { User as SelectUser } from \"@shared/schema\";\nimport connectPg from \"connect-pg-simple\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  if (!stored || !stored.includes('.')) {\n    // Handle legacy passwords or invalid format\n    return false;\n  }\n  \n  const [hashed, salt] = stored.split(\".\");\n  if (!hashed || !salt) {\n    return false;\n  }\n  \n  try {\n    const hashedBuf = Buffer.from(hashed, \"hex\");\n    const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n    return timingSafeEqual(hashedBuf, suppliedBuf);\n  } catch (error) {\n    console.error(\"Password comparison error:\", error);\n    return false;\n  }\n}\n\nexport function setupAuth(app: Express) {\n  // Session configuration\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: true,\n    tableName: 'session',\n  });\n\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"your-secret-key\",\n    resave: false,\n    saveUninitialized: false,\n    store: sessionStore,\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      httpOnly: true,\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Passport local strategy\n  passport.use(\n    new LocalStrategy(\n      { usernameField: \"email\" },\n      async (email, password, done) => {\n        try {\n          console.log(\"Login attempt for:\", email);\n          const user = await storage.getUserByEmail(email);\n          if (!user) {\n            console.log(\"User not found:\", email);\n            return done(null, false, { message: \"Invalid email or password\" });\n          }\n          \n          console.log(\"User found, checking password...\");\n          const isValidPassword = await comparePasswords(password, user.password);\n          if (!isValidPassword) {\n            console.log(\"Password invalid for user:\", email);\n            return done(null, false, { message: \"Invalid email or password\" });\n          }\n          \n          console.log(\"Login successful for:\", email);\n          return done(null, user);\n        } catch (error) {\n          console.error(\"Login error:\", error);\n          return done(error);\n        }\n      }\n    )\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Auth routes\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const { fullName, email, mobile, suburb, password } = req.body;\n\n      // Validation\n      if (!fullName || !email || !mobile || !suburb || !password) {\n        return res.status(400).json({ message: \"All fields are required\" });\n      }\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already registered\" });\n      }\n\n      // Parse full name\n      const nameParts = fullName.trim().split(' ');\n      const firstName = nameParts[0];\n      const lastName = nameParts.slice(1).join(' ') || '';\n\n      // Create user\n      const hashedPassword = await hashPassword(password);\n      const user = await storage.createUser({\n        email: email.toLowerCase(),\n        firstName,\n        lastName,\n        password: hashedPassword,\n        mobile,\n        suburb,\n        loyaltyTier: \"apprentice\",\n        totalPoints: 0,\n        punchCardProgress: 0,\n        isAdmin: false,\n        referralCount: 0,\n        notificationsEnabled: true,\n      });\n\n      // Log user in\n      req.login(user, (err) => {\n        if (err) return res.status(500).json({ message: \"Login failed after signup\" });\n        res.status(201).json(user);\n      });\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      res.status(500).json({ message: \"Failed to create account\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", (req, res, next) => {\n    console.log(\"Login request received:\", req.body);\n    passport.authenticate(\"local\", (err, user, info) => {\n      if (err) {\n        console.error(\"Login authentication error:\", err);\n        return res.status(500).json({ message: \"Authentication error\" });\n      }\n      if (!user) {\n        console.log(\"Login failed - no user:\", info);\n        return res.status(401).json({ message: info?.message || \"Invalid credentials\" });\n      }\n      \n      req.login(user, (loginErr) => {\n        if (loginErr) {\n          console.error(\"Login session error:\", loginErr);\n          return res.status(500).json({ message: \"Login session failed\" });\n        }\n        console.log(\"Login successful for user:\", user.email);\n        res.status(200).json(user);\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/auth/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.redirect(\"/login\");\n    });\n  });\n\n  // Password reset routes\n  app.post(\"/api/auth/forgot-password\", async (req, res) => {\n    try {\n      const { email } = req.body;\n\n      if (!email) {\n        return res.status(400).json({ message: \"Email is required\" });\n      }\n\n      const user = await storage.getUserByEmail(email.toLowerCase());\n      if (!user) {\n        // Return success even if user doesn't exist (security best practice)\n        return res.json({ message: \"If an account with that email exists, we've sent reset instructions\" });\n      }\n\n      // Generate reset token\n      const resetToken = randomBytes(32).toString('hex');\n      const resetTokenExpiry = new Date(Date.now() + 3600000); // 1 hour from now\n\n      await storage.setPasswordResetToken(user.id, resetToken, resetTokenExpiry);\n\n      // Send password reset email\n      const resetUrl = `${req.protocol}://${req.get('host')}/reset-password?token=${resetToken}`;\n      const emailContent = createPasswordResetEmail(resetUrl, email);\n      \n      const emailSent = await sendEmail({\n        to: email,\n        from: process.env.SENDGRID_FROM_EMAIL!,\n        subject: emailContent.subject,\n        text: emailContent.text,\n        html: emailContent.html,\n      });\n\n      if (emailSent) {\n        console.log(`Password reset email sent to ${email}`);\n      } else {\n        console.error(`Failed to send password reset email to ${email}`);\n        // Still show success message for security\n      }\n      \n      res.json({ message: \"If an account with that email exists, we've sent reset instructions\" });\n    } catch (error) {\n      console.error(\"Forgot password error:\", error);\n      res.status(500).json({ message: \"Failed to process password reset request\" });\n    }\n  });\n\n  app.post(\"/api/auth/reset-password\", async (req, res) => {\n    try {\n      const { token, password } = req.body;\n\n      if (!token || !password) {\n        return res.status(400).json({ message: \"Token and password are required\" });\n      }\n\n      const user = await storage.getUserByResetToken(token);\n      if (!user || !user.resetTokenExpiry || new Date() > user.resetTokenExpiry) {\n        return res.status(400).json({ message: \"Invalid or expired reset token\" });\n      }\n\n      // Hash new password\n      const hashedPassword = await hashPassword(password);\n      await storage.updateUserPassword(user.id, hashedPassword);\n\n      res.json({ message: \"Password reset successfully\" });\n    } catch (error) {\n      console.error(\"Reset password error:\", error);\n      res.status(500).json({ message: \"Failed to reset password\" });\n    }\n  });\n\n  app.get(\"/api/auth/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n\nexport const isAuthenticated = (req: any, res: any, next: any) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  next();\n};","size_bytes":8897},"server/awsIntegration.ts":{"content":"import { S3Client, GetObjectCommand, ListObjectsV2Command } from \"@aws-sdk/client-s3\";\nimport { SQSClient, ReceiveMessageCommand, DeleteMessageCommand } from \"@aws-sdk/client-sqs\";\nimport { storage } from \"./storage\";\n\n// AWS Configuration\nconst s3Client = new S3Client({\n  region: process.env.AWS_REGION || \"us-east-1\",\n  credentials: {\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,\n  },\n});\n\nconst sqsClient = new SQSClient({\n  region: process.env.AWS_REGION || \"us-east-1\",\n  credentials: {\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,\n  },\n});\n\ninterface MomaTransaction {\n  date: string;\n  amount: number;\n  cardNumber?: string;\n  qrCode?: string; // Add QR code support for new integration method\n  product: string;\n  machineId?: string;\n  transactionId: string;\n}\n\n// Product point values based on requirements\nconst PRODUCT_POINT_VALUES = {\n  LARGE_DRINK: 20,\n  SMALL_DRINK: 10,\n  SNACK: 15,\n  DEFAULT: 10 // Fallback for unrecognized products\n};\n\n// Function to determine point value based on product name\nfunction getProductPointValue(productName: string): number {\n  const product = productName.toLowerCase();\n  \n  // Large drinks\n  if (product.includes('large') || product.includes('600ml') || product.includes('750ml')) {\n    return PRODUCT_POINT_VALUES.LARGE_DRINK;\n  }\n  \n  // Small drinks  \n  if (product.includes('small') || product.includes('250ml') || product.includes('330ml') || \n      product.includes('can') || product.includes('bottle') || product.includes('water') ||\n      product.includes('coke') || product.includes('pepsi') || product.includes('sprite')) {\n    return PRODUCT_POINT_VALUES.SMALL_DRINK;\n  }\n  \n  // Snacks\n  if (product.includes('chip') || product.includes('chocolate') || product.includes('bar') ||\n      product.includes('snack') || product.includes('biscuit') || product.includes('cookie') ||\n      product.includes('nuts') || product.includes('crackers')) {\n    return PRODUCT_POINT_VALUES.SNACK;\n  }\n  \n  return PRODUCT_POINT_VALUES.DEFAULT;\n}\n\nexport class AWSMomaSync {\n  private bucketName: string;\n  private queueUrl: string;\n  private isRunning: boolean = false;\n  private syncInterval: NodeJS.Timeout | null = null;\n\n  constructor() {\n    this.bucketName = process.env.MOMA_S3_BUCKET || \"hi-vis-moma-data\";\n    this.queueUrl = process.env.MOMA_SQS_QUEUE || \"\";\n  }\n\n  // Start automatic sync service\n  async startSync(intervalMinutes: number = 5): Promise<void> {\n    if (this.isRunning) {\n      console.log(\"AWS sync already running\");\n      return;\n    }\n\n    this.isRunning = true;\n    console.log(`Starting AWS Moma sync with ${intervalMinutes} minute intervals`);\n\n    // Initial sync\n    await this.performSync();\n\n    // Set up recurring sync\n    this.syncInterval = setInterval(async () => {\n      try {\n        await this.performSync();\n      } catch (error) {\n        console.error(\"AWS sync error:\", error);\n      }\n    }, intervalMinutes * 60 * 1000);\n  }\n\n  // Stop sync service\n  stopSync(): void {\n    if (this.syncInterval) {\n      clearInterval(this.syncInterval);\n      this.syncInterval = null;\n    }\n    this.isRunning = false;\n    console.log(\"AWS Moma sync stopped\");\n  }\n\n  // Test AWS connection\n  async testConnection(): Promise<{ success: boolean; message: string }> {\n    try {\n      // Test S3 access\n      const s3Command = new ListObjectsV2Command({\n        Bucket: this.bucketName,\n        MaxKeys: 1,\n      });\n      await s3Client.send(s3Command);\n\n      // Test SQS access if queue URL is provided\n      if (this.queueUrl) {\n        const sqsCommand = new ReceiveMessageCommand({\n          QueueUrl: this.queueUrl,\n          MaxNumberOfMessages: 1,\n          WaitTimeSeconds: 1,\n        });\n        await sqsClient.send(sqsCommand);\n      }\n\n      return {\n        success: true,\n        message: \"AWS connection successful\"\n      };\n    } catch (error) {\n      console.error(\"AWS connection test failed:\", error);\n      return {\n        success: false,\n        message: `AWS connection failed: ${error instanceof Error ? error.message : \"Unknown error\"}`\n      };\n    }\n  }\n\n  // Perform sync operation\n  private async performSync(): Promise<void> {\n    console.log(\"Starting AWS sync operation...\");\n\n    try {\n      // Process SQS messages first (real-time notifications)\n      if (this.queueUrl) {\n        await this.processSQSMessages();\n      }\n\n      // Process S3 files (batch data)\n      await this.processS3Files();\n\n      console.log(\"AWS sync operation completed\");\n    } catch (error) {\n      console.error(\"AWS sync operation failed:\", error);\n      throw error;\n    }\n  }\n\n  // Process SQS messages for real-time transaction notifications\n  private async processSQSMessages(): Promise<void> {\n    try {\n      const command = new ReceiveMessageCommand({\n        QueueUrl: this.queueUrl,\n        MaxNumberOfMessages: 10,\n        WaitTimeSeconds: 5,\n        MessageAttributeNames: [\"All\"],\n      });\n\n      const response = await sqsClient.send(command);\n      const messages = response.Messages || [];\n\n      for (const message of messages) {\n        try {\n          const transactionData = JSON.parse(message.Body || \"{}\");\n          await this.processTransaction(transactionData);\n\n          // Delete processed message\n          await sqsClient.send(new DeleteMessageCommand({\n            QueueUrl: this.queueUrl,\n            ReceiptHandle: message.ReceiptHandle!,\n          }));\n\n          console.log(`Processed SQS transaction: ${transactionData.transactionId}`);\n        } catch (error) {\n          console.error(\"Error processing SQS message:\", error);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error processing SQS messages:\", error);\n    }\n  }\n\n  // Process S3 files for batch transaction data\n  private async processS3Files(): Promise<void> {\n    try {\n      // List new files in the bucket\n      const listCommand = new ListObjectsV2Command({\n        Bucket: this.bucketName,\n        Prefix: \"transactions/\",\n        MaxKeys: 100,\n      });\n\n      const response = await s3Client.send(listCommand);\n      const objects = response.Contents || [];\n\n      for (const object of objects) {\n        if (!object.Key || !object.Key.endsWith(\".json\")) continue;\n\n        try {\n          // Get file content\n          const getCommand = new GetObjectCommand({\n            Bucket: this.bucketName,\n            Key: object.Key,\n          });\n\n          const fileResponse = await s3Client.send(getCommand);\n          const fileContent = await fileResponse.Body?.transformToString();\n\n          if (fileContent) {\n            const transactions = JSON.parse(fileContent);\n            \n            // Process each transaction\n            if (Array.isArray(transactions)) {\n              for (const transaction of transactions) {\n                await this.processTransaction(transaction);\n              }\n            } else {\n              await this.processTransaction(transactions);\n            }\n\n            console.log(`Processed S3 file: ${object.Key}`);\n          }\n        } catch (error) {\n          console.error(`Error processing S3 file ${object.Key}:`, error);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error processing S3 files:\", error);\n    }\n  }\n\n  // Process individual transaction\n  private async processTransaction(transactionData: MomaTransaction): Promise<void> {\n    try {\n      // Calculate product-specific points\n      const pointsEarned = getProductPointValue(transactionData.product);\n      \n      // Convert to external transaction format with product-specific points\n      const externalTransaction = {\n        externalId: transactionData.transactionId,\n        machineId: transactionData.machineId || \"unknown\",\n        cardNumber: transactionData.cardNumber,\n        qrCode: transactionData.qrCode, // Add QR code data for matching\n        amount: transactionData.amount,\n        productName: transactionData.product,\n        timestamp: new Date(transactionData.date),\n        pointsEarned, // Add calculated points based on product type\n      };\n\n      // Process through existing external transaction system with QR code support\n      await storage.processExternalTransactionWithPoints(externalTransaction);\n      \n      console.log(`Processed transaction: ${transactionData.transactionId} - ${transactionData.product} (${pointsEarned} points)`);\n    } catch (error) {\n      console.error(`Error processing transaction ${transactionData.transactionId}:`, error);\n    }\n  }\n\n  // Get sync status\n  getStatus() {\n    return {\n      isRunning: this.isRunning,\n      lastSync: new Date().toISOString(),\n      bucketName: this.bucketName,\n      queueUrl: this.queueUrl ? \"Configured\" : \"Not configured\",\n    };\n  }\n\n  // Manual sync trigger\n  async triggerManualSync(): Promise<{ success: boolean; message: string }> {\n    try {\n      await this.performSync();\n      return {\n        success: true,\n        message: \"Manual sync completed successfully\"\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Manual sync failed: ${error instanceof Error ? error.message : \"Unknown error\"}`\n      };\n    }\n  }\n}\n\n// Singleton instance\nexport const awsMomaSync = new AWSMomaSync();","size_bytes":9299},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Serve static files from attached_assets\napp.use('/attached_assets', express.static('attached_assets'));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2174},"server/momaIntegration.ts":{"content":"// Moma App Integration Service\n// This service handles automatic data scraping and transaction matching\n\nimport { storage } from \"./storage\";\n\nexport interface MomaTransaction {\n  id: string;\n  machineId: string;\n  cardNumber?: string;\n  phoneNumber?: string;\n  amount: number;\n  productName: string;\n  timestamp: Date;\n  location?: string;\n  paymentMethod?: string;\n}\n\nexport class MomaIntegrationService {\n  private apiKey: string;\n  private baseUrl: string;\n  private pollInterval: number = 30000; // 30 seconds\n  private isPolling: boolean = false;\n\n  constructor(apiKey: string, baseUrl: string) {\n    this.apiKey = apiKey;\n    this.baseUrl = baseUrl;\n  }\n\n  // Method 1: API Polling - Continuously check Moma API for new transactions\n  async startPolling() {\n    if (this.isPolling) return;\n    \n    this.isPolling = true;\n    console.log(\"🔄 Starting Moma transaction polling...\");\n\n    while (this.isPolling) {\n      try {\n        await this.fetchAndProcessNewTransactions();\n        await this.sleep(this.pollInterval);\n      } catch (error) {\n        console.error(\"❌ Error during polling:\", error);\n        await this.sleep(5000); // Wait 5 seconds before retry\n      }\n    }\n  }\n\n  stopPolling() {\n    this.isPolling = false;\n    console.log(\"⏹️ Stopped Moma transaction polling\");\n  }\n\n  // Method 2: Webhook Handler - Process incoming webhook data from Moma\n  async processWebhookData(webhookData: any): Promise<void> {\n    try {\n      console.log(\"📥 Processing webhook data from Moma...\");\n      \n      const transactions = this.parseWebhookData(webhookData);\n      \n      for (const transaction of transactions) {\n        await this.processTransaction(transaction);\n      }\n      \n      console.log(`✅ Processed ${transactions.length} transactions from webhook`);\n    } catch (error) {\n      console.error(\"❌ Error processing webhook data:\", error);\n      throw error;\n    }\n  }\n\n  // Method 3: Direct API Fetch - Get transactions from Moma API\n  private async fetchAndProcessNewTransactions(): Promise<void> {\n    try {\n      // Check if API credentials are configured\n      if (!this.apiKey || !this.baseUrl || this.baseUrl === \"https://api.moma.app\") {\n        console.log(\"⏸️ Moma API not configured - skipping polling\");\n        return;\n      }\n\n      // Get the timestamp of the last processed transaction\n      const lastProcessedTime = await this.getLastProcessedTimestamp();\n      \n      // Fetch new transactions from Moma API\n      const response = await fetch(`${this.baseUrl}/api/transactions`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        // Add query parameters for pagination and filtering\n        // Note: You'll need to adjust these based on Moma's actual API\n      });\n\n      if (!response.ok) {\n        throw new Error(`Moma API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      const transactions = this.parseMomaApiResponse(data);\n      \n      // Filter for only new transactions\n      const newTransactions = transactions.filter(t => \n        new Date(t.timestamp) > lastProcessedTime\n      );\n\n      console.log(`📊 Found ${newTransactions.length} new transactions from Moma API`);\n\n      for (const transaction of newTransactions) {\n        await this.processTransaction(transaction);\n      }\n\n      if (newTransactions.length > 0) {\n        await this.updateLastProcessedTimestamp(new Date());\n      }\n\n    } catch (error) {\n      console.error(\"❌ Error fetching from Moma API:\", error);\n      // Don't throw error to prevent stopping the polling loop\n      console.log(\"⏸️ Stopping polling due to API error\");\n      this.stopPolling();\n    }\n  }\n\n  // Smart transaction processing with multiple matching strategies\n  private async processTransaction(transaction: MomaTransaction): Promise<void> {\n    try {\n      console.log(`🔍 Processing transaction: ${transaction.id} - $${(transaction.amount / 100).toFixed(2)}`);\n\n      // Strategy 1: Match by card number (most reliable)\n      let matchedUser = null;\n      if (transaction.cardNumber) {\n        matchedUser = await storage.getUserByCardNumber(transaction.cardNumber);\n        if (matchedUser) {\n          console.log(`✅ Matched by card number: ${matchedUser.firstName} ${matchedUser.lastName}`);\n        }\n      }\n\n      // Strategy 2: Match by phone number (backup method)\n      if (!matchedUser && transaction.phoneNumber) {\n        // You'll need to add this method to storage\n        // matchedUser = await storage.getUserByPhoneNumber(transaction.phoneNumber);\n      }\n\n      // Strategy 3: Store as unprocessed for manual matching\n      if (!matchedUser) {\n        console.log(`⏳ No automatic match found, storing for manual processing`);\n        await storage.processExternalTransaction({\n          externalId: transaction.id,\n          machineId: transaction.machineId,\n          cardNumber: transaction.cardNumber,\n          amount: transaction.amount,\n          productName: transaction.productName,\n          timestamp: transaction.timestamp,\n        });\n        return;\n      }\n\n      // Process the matched transaction\n      await this.awardPointsAndCreateTransaction(matchedUser.id, transaction);\n\n    } catch (error) {\n      console.error(`❌ Error processing transaction ${transaction.id}:`, error);\n      // Store as unprocessed for manual review\n      await storage.processExternalTransaction({\n        externalId: transaction.id,\n        machineId: transaction.machineId,\n        cardNumber: transaction.cardNumber,\n        amount: transaction.amount,\n        productName: transaction.productName,\n        timestamp: transaction.timestamp,\n      });\n    }\n  }\n\n  // Award points and create transaction record\n  private async awardPointsAndCreateTransaction(userId: string, momaTransaction: MomaTransaction): Promise<void> {\n    try {\n      // Calculate points (10 points per dollar spent)\n      const pointsEarned = Math.floor(momaTransaction.amount / 100) * 10;\n      \n      // Create Hi-Vis loyalty transaction\n      await storage.createTransaction({\n        userId,\n        type: \"purchase\",\n        points: pointsEarned,\n        description: `Auto-purchase: ${momaTransaction.productName} from ${momaTransaction.machineId}`,\n        machineId: momaTransaction.machineId,\n        externalTransactionId: momaTransaction.id,\n        amount: momaTransaction.amount,\n        cardNumber: momaTransaction.cardNumber,\n        isAutoGenerated: true,\n      });\n\n      // Update user points\n      const user = await storage.getUser(userId);\n      if (user) {\n        const newTotalPoints = (user.totalPoints || 0) + pointsEarned;\n        await storage.updateUserPoints(userId, newTotalPoints);\n\n        // Update punch card\n        const newPunchProgress = Math.min((user.punchCardProgress || 0) + 1, 10);\n        await storage.updatePunchCard(userId, newPunchProgress);\n\n        // Check for punch card completion\n        if (newPunchProgress === 10) {\n          await storage.createTransaction({\n            userId,\n            type: \"bonus\",\n            points: 100,\n            description: \"Punch card completed - Free large drink\",\n          });\n          await storage.updateUserPoints(userId, newTotalPoints + 100);\n          await storage.updatePunchCard(userId, 0);\n        }\n\n        // Check for tier upgrades\n        await this.checkAndUpdateUserTier(userId, newTotalPoints + (newPunchProgress === 10 ? 100 : 0));\n\n        // Send notification to user\n        await this.sendPointsEarnedNotification(userId, pointsEarned, momaTransaction.productName);\n      }\n\n      console.log(`✅ Awarded ${pointsEarned} points to user ${userId} for ${momaTransaction.productName}`);\n\n    } catch (error) {\n      console.error(`❌ Error awarding points for transaction ${momaTransaction.id}:`, error);\n      throw error;\n    }\n  }\n\n  // Check and update user loyalty tier based on points\n  private async checkAndUpdateUserTier(userId: string, totalPoints: number): Promise<void> {\n    let newTier = \"apprentice\";\n    \n    if (totalPoints >= 1000) {\n      newTier = \"foreman\";\n    } else if (totalPoints >= 500) {\n      newTier = \"tradie\";\n    }\n\n    const user = await storage.getUser(userId);\n    if (user && user.loyaltyTier !== newTier) {\n      await storage.updateUserTier(userId, newTier);\n      \n      // Send tier upgrade notification\n      await storage.createNotification({\n        userId,\n        title: \"🏗️ Tier Upgrade!\",\n        message: `Congratulations! You've been promoted to ${newTier.toUpperCase()} tier. New rewards unlocked!`,\n        type: \"achievement\",\n      });\n      \n      console.log(`🎉 User ${userId} upgraded to ${newTier} tier with ${totalPoints} points`);\n    }\n  }\n\n  // Send points earned notification\n  private async sendPointsEarnedNotification(userId: string, points: number, productName: string): Promise<void> {\n    try {\n      await storage.createNotification({\n        userId,\n        title: \"Points Earned! 🎯\",\n        message: `You earned ${points} points from your ${productName} purchase. Keep collecting for great rewards!`,\n        type: \"achievement\",\n      });\n    } catch (error) {\n      console.error(\"Error sending notification:\", error);\n    }\n  }\n\n  // Parse webhook data from Moma app\n  private parseWebhookData(webhookData: any): MomaTransaction[] {\n    // This will depend on the format Moma sends\n    // Example implementation:\n    if (Array.isArray(webhookData.transactions)) {\n      return webhookData.transactions.map(this.mapMomaTransaction);\n    } else if (webhookData.transaction) {\n      return [this.mapMomaTransaction(webhookData.transaction)];\n    }\n    return [];\n  }\n\n  // Parse API response from Moma\n  private parseMomaApiResponse(apiResponse: any): MomaTransaction[] {\n    // This will depend on Moma's API response format\n    if (Array.isArray(apiResponse.data)) {\n      return apiResponse.data.map(this.mapMomaTransaction);\n    }\n    return [];\n  }\n\n  // Map Moma transaction format to our internal format\n  private mapMomaTransaction(momaData: any): MomaTransaction {\n    return {\n      id: momaData.id || momaData.transaction_id,\n      machineId: momaData.machine_id || momaData.deviceId,\n      cardNumber: momaData.card_number || momaData.cardNumber,\n      phoneNumber: momaData.phone_number || momaData.phoneNumber,\n      amount: momaData.amount_cents || (momaData.amount * 100),\n      productName: momaData.product_name || momaData.productName || momaData.item,\n      timestamp: new Date(momaData.timestamp || momaData.created_at),\n      location: momaData.location,\n      paymentMethod: momaData.payment_method || momaData.paymentType,\n    };\n  }\n\n  // Utility methods for tracking last processed timestamp\n  private async getLastProcessedTimestamp(): Promise<Date> {\n    // You could store this in database or file system\n    // For now, return 24 hours ago as default\n    return new Date(Date.now() - 24 * 60 * 60 * 1000);\n  }\n\n  private async updateLastProcessedTimestamp(timestamp: Date): Promise<void> {\n    // Store the timestamp for next polling cycle\n    console.log(`📝 Updated last processed timestamp to: ${timestamp.toISOString()}`);\n  }\n\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\n// Export singleton instance\nexport const momaIntegration = new MomaIntegrationService(\n  process.env.MOMA_API_KEY || \"\",\n  process.env.MOMA_API_URL || \"https://api.moma.app\"\n);","size_bytes":11556},"server/nayaxIntegration.ts":{"content":"// Nayax DOT Integration for QR Code Scanning and Real-time Promotions\nimport { storage } from './storage';\n\ninterface NayaxPromotion {\n  promotionId: string;\n  discountPercentage?: number;\n  freeItemCode?: string;\n  description: string;\n}\n\ninterface NayaxResponse {\n  success: boolean;\n  transactionId?: string;\n  promotionApplied?: NayaxPromotion;\n  message: string;\n}\n\ninterface QRCodeData {\n  userId: string;\n  timestamp: number;\n  tier: string;\n  points: number;\n  type: string;\n  token: string;\n}\n\nexport class NayaxIntegration {\n  private baseUrl: string;\n  private apiKey: string;\n\n  constructor() {\n    // In production, these would come from environment variables\n    this.baseUrl = process.env.NAYAX_API_URL || 'https://api.nayax.com/v2';\n    this.apiKey = process.env.NAYAX_API_KEY || 'demo-api-key';\n  }\n\n  // Validate QR code and determine applicable promotions\n  async validateQRCode(qrData: string, machineId?: string): Promise<{\n    isValid: boolean;\n    user?: any;\n    promotions: any[];\n    pointsBonus: number;\n    discountPercentage: number;\n    message: string;\n  }> {\n    try {\n      // Parse QR code data\n      const qrCodeData: QRCodeData = JSON.parse(qrData);\n      \n      // Basic validation\n      if (qrCodeData.type !== 'hi-vis-customer') {\n        return {\n          isValid: false,\n          promotions: [],\n          pointsBonus: 0,\n          discountPercentage: 0,\n          message: 'Invalid QR code type'\n        };\n      }\n\n      // Check timestamp (QR codes expire after 24 hours)\n      const now = Date.now();\n      const qrAge = now - qrCodeData.timestamp;\n      const maxAge = 24 * 60 * 60 * 1000; // 24 hours\n\n      if (qrAge > maxAge) {\n        return {\n          isValid: false,\n          promotions: [],\n          pointsBonus: 0,\n          discountPercentage: 0,\n          message: 'QR code has expired. Please generate a new one.'\n        };\n      }\n\n      // Get user from database\n      const user = await storage.getUser(qrCodeData.userId);\n      if (!user) {\n        return {\n          isValid: false,\n          promotions: [],\n          pointsBonus: 0,\n          discountPercentage: 0,\n          message: 'User not found'\n        };\n      }\n\n      // Get available promotions for user's tier\n      const promotions = await this.getPromotionsForTier(user.currentTier || 'Apprentice');\n      \n      // Calculate benefits\n      let totalPointsBonus = 0;\n      let maxDiscountPercentage = 0;\n\n      for (const promo of promotions) {\n        if (promo.bonusPoints) {\n          totalPointsBonus += promo.bonusPoints;\n        }\n        if (promo.discountPercentage && promo.discountPercentage > maxDiscountPercentage) {\n          maxDiscountPercentage = promo.discountPercentage;\n        }\n      }\n\n      return {\n        isValid: true,\n        user,\n        promotions,\n        pointsBonus: totalPointsBonus,\n        discountPercentage: maxDiscountPercentage,\n        message: `Welcome ${user.firstName || 'Hi-Vis Customer'}! ${promotions.length} promotions available.`\n      };\n\n    } catch (error) {\n      console.error('QR code validation error:', error);\n      return {\n        isValid: false,\n        promotions: [],\n        pointsBonus: 0,\n        discountPercentage: 0,\n        message: 'Invalid QR code format'\n      };\n    }\n  }\n\n  // Get promotions available for a specific tier\n  private async getPromotionsForTier(tier: string): Promise<any[]> {\n    // Sample promotions - in production these would come from database\n    const allPromotions = [\n      {\n        id: 'promo-1',\n        name: 'Apprentice Welcome',\n        description: '10% off your next purchase',\n        discountPercentage: 10,\n        bonusPoints: 0,\n        tierRequired: 'Apprentice',\n        type: 'discount'\n      },\n      {\n        id: 'promo-2',\n        name: 'Site Safety Bonus',\n        description: '25 bonus points for healthy snacks',\n        discountPercentage: 0,\n        bonusPoints: 25,\n        tierRequired: 'Apprentice',\n        type: 'bonus_points'\n      },\n      {\n        id: 'promo-3',\n        name: 'Tradie Power Hour',\n        description: 'Double points on energy drinks',\n        discountPercentage: 0,\n        bonusPoints: 20,\n        tierRequired: 'Tradie',\n        type: 'bonus_points'\n      },\n      {\n        id: 'promo-4',\n        name: 'Tradie Special',\n        description: '15% off all beverages',\n        discountPercentage: 15,\n        bonusPoints: 0,\n        tierRequired: 'Tradie',\n        type: 'discount'\n      },\n      {\n        id: 'promo-5',\n        name: 'Foreman Special',\n        description: 'Free large coffee with any purchase',\n        discountPercentage: 0,\n        bonusPoints: 0,\n        tierRequired: 'Foreman',\n        type: 'free_item',\n        freeItemCode: 'COFFEE_LARGE'\n      },\n      {\n        id: 'promo-6',\n        name: 'Foreman Premium',\n        description: '20% off + 50 bonus points',\n        discountPercentage: 20,\n        bonusPoints: 50,\n        tierRequired: 'Foreman',\n        type: 'combo'\n      }\n    ];\n\n    // Filter promotions based on tier hierarchy\n    const tierOrder = ['Apprentice', 'Tradie', 'Foreman'];\n    const userTierIndex = tierOrder.indexOf(tier);\n    \n    return allPromotions.filter(promo => {\n      const promoTierIndex = tierOrder.indexOf(promo.tierRequired);\n      return promoTierIndex <= userTierIndex;\n    });\n  }\n\n  // Send promotion to Nayax DOT vending machine\n  async pushPromotionToMachine(machineId: string, promotion: any): Promise<NayaxResponse> {\n    try {\n      // In production, this would make a real API call to Nayax\n      const nayaxPayload = {\n        machineId,\n        promotionType: promotion.type,\n        discountPercentage: promotion.discountPercentage || 0,\n        freeItemCode: promotion.freeItemCode,\n        description: promotion.description,\n        validUntil: new Date(Date.now() + 30 * 60 * 1000).toISOString(), // 30 minutes\n      };\n\n      console.log('Sending promotion to Nayax DOT:', nayaxPayload);\n\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Simulate success response\n      return {\n        success: true,\n        transactionId: `NAYAX-${Date.now()}`,\n        promotionApplied: {\n          promotionId: promotion.id,\n          discountPercentage: promotion.discountPercentage,\n          freeItemCode: promotion.freeItemCode,\n          description: promotion.description,\n        },\n        message: 'Promotion successfully applied to vending machine'\n      };\n\n    } catch (error) {\n      console.error('Error pushing promotion to Nayax:', error);\n      return {\n        success: false,\n        message: 'Failed to apply promotion to vending machine'\n      };\n    }\n  }\n\n  // Record QR scan in database\n  async recordQRScan(\n    userId: string,\n    machineId: string | undefined,\n    qrData: string,\n    promotions: any[],\n    pointsAwarded: number,\n    discountApplied: number\n  ): Promise<void> {\n    try {\n      await storage.createQRScan({\n        userId,\n        machineId: machineId || 'unknown',\n        qrData,\n        promotionApplied: promotions.map(p => p.name).join(', '),\n        pointsAwarded,\n        discountApplied,\n        status: 'completed'\n      });\n\n      // Also create a transaction record for points\n      if (pointsAwarded > 0) {\n        await storage.createTransaction({\n          userId,\n          type: 'bonus',\n          points: pointsAwarded,\n          description: `QR Code Bonus: ${promotions.map(p => p.name).join(', ')}`,\n          machineId: machineId || 'QR-SCAN',\n        });\n\n        // Update user's total points\n        const user = await storage.getUser(userId);\n        if (user) {\n          const newTotalPoints = (user.totalPoints || 0) + pointsAwarded;\n          await storage.updateUserPoints(userId, newTotalPoints);\n        }\n      }\n\n    } catch (error) {\n      console.error('Error recording QR scan:', error);\n    }\n  }\n\n  // Get QR scan history for analytics\n  async getQRScanHistory(userId?: string, machineId?: string, limit: number = 50): Promise<any[]> {\n    try {\n      return await storage.getQRScans(userId, machineId, limit);\n    } catch (error) {\n      console.error('Error fetching QR scan history:', error);\n      return [];\n    }\n  }\n}\n\nexport const nayaxIntegration = new NayaxIntegration();","size_bytes":8277},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n    suburb: \"\", // Will be set during profile completion\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4278},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./auth\";\nimport { insertTransactionSchema, insertRewardSchema, insertMachineSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.post('/api/auth/complete-profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { fullName, suburb } = req.body;\n      \n      if (!fullName || !fullName.trim() || !suburb || !suburb.trim()) {\n        return res.status(400).json({ message: \"Full name and suburb are required\" });\n      }\n\n      // Parse full name into first and last name\n      const nameParts = fullName.trim().split(' ');\n      const firstName = nameParts[0];\n      const lastName = nameParts.slice(1).join(' ') || '';\n\n      const updatedUser = await storage.updateUserProfile(userId, {\n        firstName,\n        lastName,\n        suburb: suburb.trim()\n      });\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user profile:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // User loyalty routes\n  app.get('/api/user/transactions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const transactions = await storage.getUserTransactions(userId);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.post('/api/user/purchase', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { machineId, amount } = req.body;\n      \n      // Award 10 points per purchase\n      const points = 10;\n      const transaction = await storage.createTransaction({\n        userId,\n        type: \"purchase\",\n        points,\n        description: `Purchase from machine ${machineId}`,\n        machineId,\n      });\n\n      // Update user points and punch card\n      const user = await storage.getUser(userId);\n      let tierUpgrade = null;\n      \n      if (user) {\n        const newPoints = (user.totalPoints || 0) + points;\n        const newPunchProgress = Math.min((user.punchCardProgress || 0) + 1, 5);\n        \n        await storage.updateUserPoints(userId, newPoints);\n        await storage.updatePunchCard(userId, newPunchProgress);\n        \n        // Check for tier upgrade\n        let newTier = user.loyaltyTier;\n        if (newPoints >= 500 && user.loyaltyTier === \"apprentice\") {\n          newTier = \"tradie\";\n          tierUpgrade = \"tradie\";\n          await storage.updateUserTier(userId, newTier);\n        } else if (newPoints >= 1000 && user.loyaltyTier === \"tradie\") {\n          newTier = \"foreman\";\n          tierUpgrade = \"foreman\";\n          await storage.updateUserTier(userId, newTier);\n        }\n\n        // Check for punch card completion\n        if (newPunchProgress === 5) {\n          await storage.createTransaction({\n            userId,\n            type: \"bonus\",\n            points: 100,\n            description: \"Punch card completed - Free large drink\",\n          });\n          await storage.updateUserPoints(userId, newPoints + 100);\n          await storage.updatePunchCard(userId, 0); // Reset punch card\n        }\n      }\n\n      res.json({\n        ...transaction,\n        tierUpgrade\n      });\n    } catch (error) {\n      console.error(\"Error processing purchase:\", error);\n      res.status(500).json({ message: \"Failed to process purchase\" });\n    }\n  });\n\n  // Rewards routes\n  app.get('/api/rewards', async (req, res) => {\n    try {\n      const rewards = await storage.getRewards();\n      res.json(rewards);\n    } catch (error) {\n      console.error(\"Error fetching rewards:\", error);\n      res.status(500).json({ message: \"Failed to fetch rewards\" });\n    }\n  });\n\n  app.post('/api/rewards/redeem', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { rewardId } = req.body;\n      \n      const transaction = await storage.redeemReward(userId, rewardId);\n      res.json(transaction);\n    } catch (error) {\n      console.error(\"Error redeeming reward:\", error);\n      if (error instanceof Error) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to redeem reward\" });\n      }\n    }\n  });\n\n  // Machine routes\n  app.get('/api/machines', async (req, res) => {\n    try {\n      const machines = await storage.getMachines();\n      res.json(machines);\n    } catch (error) {\n      console.error(\"Error fetching machines:\", error);\n      res.status(500).json({ message: \"Failed to fetch machines\" });\n    }\n  });\n\n  // Admin routes\n  app.get('/api/admin/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin && !user?.isDeveloper) {\n        return res.status(403).json({ message: \"Admin or developer access required\" });\n      }\n\n      const stats = await storage.getAdminStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching admin stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin stats\" });\n    }\n  });\n\n  app.get('/api/admin/users', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin && !user?.isDeveloper) {\n        return res.status(403).json({ message: \"Admin or developer access required\" });\n      }\n\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching admin users:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin users\" });\n    }\n  });\n\n  // Referral routes\n  app.get('/api/referral/my-code', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.referralCode) {\n        const newCode = await storage.generateReferralCode(userId);\n        res.json({ referralCode: newCode });\n      } else {\n        res.json({ referralCode: user.referralCode });\n      }\n    } catch (error) {\n      console.error(\"Error getting referral code:\", error);\n      res.status(500).json({ message: \"Failed to get referral code\" });\n    }\n  });\n\n  app.post('/api/referral/use-code', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { referralCode } = req.body;\n      \n      const user = await storage.getUser(userId);\n      if (user?.referredBy) {\n        return res.status(400).json({ message: \"You have already used a referral code\" });\n      }\n\n      const referrer = await storage.getUserByReferralCode(referralCode);\n      if (!referrer) {\n        return res.status(400).json({ message: \"Invalid referral code\" });\n      }\n\n      if (referrer.id === userId) {\n        return res.status(400).json({ message: \"Cannot use your own referral code\" });\n      }\n\n      // Update the new user with referral\n      await storage.updateUserReferredBy(userId, referrer.id);\n      \n      // Give both users bonus points\n      await storage.createTransaction({\n        userId: referrer.id,\n        type: \"bonus\",\n        points: 50,\n        description: \"Referral bonus - Friend joined\",\n      });\n\n      await storage.createTransaction({\n        userId,\n        type: \"bonus\", \n        points: 25,\n        description: \"Welcome bonus - Used referral code\",\n      });\n\n      // Update points\n      await storage.updateUserPoints(referrer.id, (referrer.totalPoints || 0) + 50);\n      await storage.updateUserPoints(userId, (user?.totalPoints || 0) + 25);\n      await storage.updateReferralCount(referrer.id, (referrer.referralCount || 0) + 1);\n\n      res.json({ success: true, pointsEarned: 25 });\n    } catch (error) {\n      console.error(\"Error using referral code:\", error);\n      res.status(500).json({ message: \"Failed to use referral code\" });\n    }\n  });\n\n  // QR code simulation route\n  app.post('/api/qr/scan', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { qrData } = req.body;\n      \n      // Parse QR data (format: \"HIVIS_MACHINE_001\")\n      if (!qrData || !qrData.startsWith(\"HIVIS_MACHINE_\")) {\n        return res.status(400).json({ message: \"Invalid QR code\" });\n      }\n      \n      const machineId = qrData;\n      \n      // Simulate purchase\n      const transaction = await storage.createTransaction({\n        userId,\n        type: \"purchase\",\n        points: 10,\n        description: `QR Purchase from ${machineId}`,\n        machineId,\n      });\n\n      // Update user points, punch card, and daily streak\n      const user = await storage.getUser(userId);\n      let tierUpgrade = null;\n      \n      if (user) {\n        const newPoints = (user.totalPoints || 0) + 10;\n        const newPunchProgress = Math.min((user.punchCardProgress || 0) + 1, 5);\n        \n        await storage.updateUserPoints(userId, newPoints);\n        await storage.updatePunchCard(userId, newPunchProgress);\n        await storage.updateDailyStreak(userId);\n        \n        // Check for tier upgrade\n        let newTier = user.loyaltyTier;\n        if (newPoints >= 500 && user.loyaltyTier === \"apprentice\") {\n          newTier = \"tradie\";\n          tierUpgrade = \"tradie\";\n          await storage.updateUserTier(userId, newTier);\n        } else if (newPoints >= 1000 && user.loyaltyTier === \"tradie\") {\n          newTier = \"foreman\";\n          tierUpgrade = \"foreman\";\n          await storage.updateUserTier(userId, newTier);\n        }\n        \n        // Check for punch card completion\n        if (newPunchProgress === 5) {\n          await storage.createTransaction({\n            userId,\n            type: \"bonus\",\n            points: 100,\n            description: \"Punch card completed - Free large drink\",\n          });\n          await storage.updateUserPoints(userId, newPoints + 100);\n          await storage.updatePunchCard(userId, 0);\n        }\n      }\n\n      res.json({ \n        success: true, \n        pointsEarned: 10,\n        transaction,\n        tierUpgrade\n      });\n    } catch (error) {\n      console.error(\"Error processing QR scan:\", error);\n      res.status(500).json({ message: \"Failed to process QR scan\" });\n    }\n  });\n\n  // Notification routes\n  app.post('/api/admin/send-notification', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { title, message, type, userIds } = req.body;\n      await storage.sendBulkNotifications(title, message, type, userIds);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error sending notifications:\", error);\n      res.status(500).json({ message: \"Failed to send notifications\" });\n    }\n  });\n\n  app.get('/api/notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const notifications = await storage.getUserNotifications(userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.post('/api/notifications/:id/read', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.markNotificationRead(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking notification read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification read\" });\n    }\n  });\n\n  // External transaction processing routes\n  app.post('/api/external/transaction', async (req, res) => {\n    try {\n      const { externalId, machineId, cardNumber, amount, productName, timestamp } = req.body;\n      \n      await storage.processExternalTransaction({\n        externalId,\n        machineId,\n        cardNumber,\n        amount,\n        productName,\n        timestamp: new Date(timestamp),\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error processing external transaction:\", error);\n      res.status(500).json({ message: \"Failed to process transaction\" });\n    }\n  });\n\n  app.get('/api/admin/unprocessed-transactions', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const transactions = await storage.getUnprocessedExternalTransactions();\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching unprocessed transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch unprocessed transactions\" });\n    }\n  });\n\n  app.post('/api/admin/match-transaction', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { externalTransactionId, userId } = req.body;\n      await storage.matchTransactionToUser(externalTransactionId, userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error matching transaction:\", error);\n      res.status(500).json({ message: \"Failed to match transaction\" });\n    }\n  });\n\n  // Update user profile with card number for automatic matching\n  app.post('/api/user/update-card', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { cardNumber } = req.body;\n      \n      await storage.upsertUser({ \n        id: userId, \n        cardNumber,\n        updatedAt: new Date(),\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating card number:\", error);\n      res.status(500).json({ message: \"Failed to update card number\" });\n    }\n  });\n\n  app.get('/api/user/permanent-qr-code', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const qrCode = await storage.generateUserPermanentQrCode(userId);\n      res.json({ qrCode });\n    } catch (error) {\n      console.error(\"Error getting permanent QR code:\", error);\n      res.status(500).json({ message: \"Failed to get permanent QR code\" });\n    }\n  });\n\n  // Moma Integration Routes\n  \n  // Webhook endpoint for Moma to send real-time transaction data\n  app.post('/api/moma/webhook', async (req, res) => {\n    try {\n      const { momaIntegration } = await import('./momaIntegration');\n      await momaIntegration.processWebhookData(req.body);\n      res.json({ success: true, message: \"Webhook processed successfully\" });\n    } catch (error) {\n      console.error(\"Error processing Moma webhook:\", error);\n      res.status(500).json({ message: \"Failed to process webhook\" });\n    }\n  });\n\n  // Start automatic polling of Moma API\n  app.post('/api/admin/start-moma-sync', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { momaIntegration } = await import('./momaIntegration');\n      momaIntegration.startPolling();\n      res.json({ success: true, message: \"Moma sync started\" });\n    } catch (error) {\n      console.error(\"Error starting Moma sync:\", error);\n      res.status(500).json({ message: \"Failed to start Moma sync\" });\n    }\n  });\n\n  // Stop automatic polling\n  app.post('/api/admin/stop-moma-sync', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { momaIntegration } = await import('./momaIntegration');\n      momaIntegration.stopPolling();\n      res.json({ success: true, message: \"Moma sync stopped\" });\n    } catch (error) {\n      console.error(\"Error stopping Moma sync:\", error);\n      res.status(500).json({ message: \"Failed to stop Moma sync\" });\n    }\n  });\n\n  // CSV Upload endpoint for Moma transaction data\n  app.post('/api/admin/upload-csv', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { csvData } = req.body;\n      if (!csvData) {\n        return res.status(400).json({ message: \"CSV data required\" });\n      }\n\n      // Parse CSV data (expecting: date, amount, card_number, product)\n      const lines = csvData.split('\\n').filter((line: string) => line.trim());\n      const headers = lines[0].split(',').map((h: string) => h.trim().toLowerCase());\n      \n      let processedCount = 0;\n      let errorCount = 0;\n\n      for (let i = 1; i < lines.length; i++) {\n        try {\n          const values = lines[i].split(',').map((v: string) => v.trim());\n          const record: any = {};\n          \n          headers.forEach((header, index) => {\n            record[header] = values[index];\n          });\n\n          // Create external transaction\n          await storage.processExternalTransaction({\n            externalId: `CSV_${Date.now()}_${i}`,\n            machineId: record.machine_id || record.machine || \"UNKNOWN\",\n            cardNumber: record.card_number || record.card,\n            amount: Math.round(parseFloat(record.amount || '0') * 100), // Convert to cents\n            productName: record.product || record.item || \"Unknown Product\",\n            timestamp: new Date(record.date || record.timestamp),\n          });\n\n          processedCount++;\n        } catch (error) {\n          console.error(`Error processing CSV line ${i}:`, error);\n          errorCount++;\n        }\n      }\n\n      res.json({ \n        success: true, \n        message: `Processed ${processedCount} transactions, ${errorCount} errors`,\n        processed: processedCount,\n        errors: errorCount\n      });\n    } catch (error) {\n      console.error(\"Error processing CSV upload:\", error);\n      res.status(500).json({ message: \"Failed to process CSV data\" });\n    }\n  });\n\n  // Enhanced reward redemption system\n  app.post(\"/api/rewards/redeem\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { rewardId } = req.body;\n\n      const user = await storage.getUser(userId);\n      const reward = await storage.getReward(rewardId);\n\n      if (!user || !reward) {\n        return res.status(404).json({ message: \"User or reward not found\" });\n      }\n\n      if (user.totalPoints < reward.pointsCost) {\n        return res.status(400).json({ message: \"Insufficient points\" });\n      }\n\n      // Generate unique redemption code\n      const redemptionCode = `HIVIS-${Date.now().toString(36).toUpperCase()}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`;\n\n      // Create redemption transaction\n      await storage.createTransaction({\n        userId,\n        type: \"redemption\",\n        points: -reward.pointsCost,\n        description: `Redeemed: ${reward.name} - Code: ${redemptionCode}`,\n        redemptionCode,\n      });\n\n      // Update user points\n      await storage.updateUserPoints(userId, user.totalPoints - reward.pointsCost);\n\n      // Create notification about successful redemption\n      await storage.createNotification({\n        userId,\n        title: \"🎯 Reward Redeemed!\",\n        message: `Your ${reward.name} is ready! Show code ${redemptionCode} at any Hi-Vis vending machine.`,\n        type: \"reward\",\n      });\n\n      res.json({ \n        success: true, \n        redemptionCode,\n        message: `${reward.name} redeemed successfully!`\n      });\n    } catch (error) {\n      console.error(\"Error redeeming reward:\", error);\n      res.status(500).json({ message: \"Failed to redeem reward\" });\n    }\n  });\n\n  // Validate redemption code (for vending machine operators)\n  app.post(\"/api/admin/validate-redemption\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { redemptionCode } = req.body;\n      const transaction = await storage.getTransactionByRedemptionCode(redemptionCode);\n\n      if (!transaction) {\n        return res.status(404).json({ \n          valid: false, \n          message: \"Invalid redemption code\" \n        });\n      }\n\n      if (transaction.isRedeemed) {\n        return res.status(400).json({ \n          valid: false, \n          message: \"Code already used\" \n        });\n      }\n\n      // Mark as redeemed\n      await storage.markTransactionAsRedeemed(transaction.id);\n      \n      const rewardUser = await storage.getUser(transaction.userId);\n      \n      res.json({ \n        valid: true, \n        reward: transaction.description,\n        customerName: `${rewardUser?.firstName} ${rewardUser?.lastName}`,\n        redeemedAt: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error(\"Error validating redemption:\", error);\n      res.status(500).json({ message: \"Failed to validate redemption code\" });\n    }\n  });\n\n  // AWS Integration routes\n  app.post(\"/api/admin/aws-sync/start\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { awsMomaSync } = await import(\"./awsIntegration\");\n      await awsMomaSync.startSync();\n      \n      res.json({ \n        success: true, \n        message: \"AWS sync started successfully\" \n      });\n    } catch (error) {\n      console.error(\"Error starting AWS sync:\", error);\n      res.status(500).json({ message: \"Failed to start AWS sync\" });\n    }\n  });\n\n  app.post(\"/api/admin/aws-sync/stop\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { awsMomaSync } = await import(\"./awsIntegration\");\n      awsMomaSync.stopSync();\n      \n      res.json({ \n        success: true, \n        message: \"AWS sync stopped successfully\" \n      });\n    } catch (error) {\n      console.error(\"Error stopping AWS sync:\", error);\n      res.status(500).json({ message: \"Failed to stop AWS sync\" });\n    }\n  });\n\n  app.post(\"/api/admin/aws-sync/test\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { awsMomaSync } = await import(\"./awsIntegration\");\n      const result = await awsMomaSync.testConnection();\n      \n      res.json(result);\n    } catch (error) {\n      console.error(\"Error testing AWS connection:\", error);\n      res.status(500).json({ \n        success: false, \n        message: \"Failed to test AWS connection\" \n      });\n    }\n  });\n\n  app.get(\"/api/admin/aws-sync/status\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { awsMomaSync } = await import(\"./awsIntegration\");\n      const status = awsMomaSync.getStatus();\n      \n      res.json(status);\n    } catch (error) {\n      console.error(\"Error getting AWS sync status:\", error);\n      res.status(500).json({ message: \"Failed to get AWS sync status\" });\n    }\n  });\n\n  app.post(\"/api/admin/aws-sync/manual\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { awsMomaSync } = await import(\"./awsIntegration\");\n      const result = await awsMomaSync.triggerManualSync();\n      \n      res.json(result);\n    } catch (error) {\n      console.error(\"Error triggering manual AWS sync:\", error);\n      res.status(500).json({ \n        success: false, \n        message: \"Failed to trigger manual sync\" \n      });\n    }\n  });\n\n  // QR Code validation for Nayax DOT integration\n  app.post(\"/api/qr/validate\", async (req: any, res) => {\n    try {\n      const { qrData, machineId } = req.body;\n\n      if (!qrData) {\n        return res.status(400).json({ message: \"QR code data required\" });\n      }\n\n      const { nayaxIntegration } = await import(\"./nayaxIntegration\");\n      const result = await nayaxIntegration.validateQRCode(qrData, machineId);\n\n      if (!result.isValid) {\n        return res.status(400).json(result);\n      }\n\n      // Record the scan\n      if (result.user) {\n        await nayaxIntegration.recordQRScan(\n          result.user.id,\n          machineId,\n          qrData,\n          result.promotions,\n          result.pointsBonus,\n          result.discountPercentage\n        );\n\n        // If there are promotions, push them to the Nayax machine\n        if (result.promotions.length > 0 && machineId) {\n          for (const promotion of result.promotions) {\n            await nayaxIntegration.pushPromotionToMachine(machineId, promotion);\n          }\n        }\n      }\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"QR validation error:\", error);\n      res.status(500).json({ message: \"Failed to validate QR code\" });\n    }\n  });\n\n  // QR Code scanner for manual point addition\n  app.post(\"/api/scan-purchase\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { machineId, amount } = req.body;\n\n      if (!machineId || !amount) {\n        return res.status(400).json({ message: \"Machine ID and amount required\" });\n      }\n\n      // Calculate points (10 points per dollar)\n      const pointsEarned = Math.floor(amount / 100) * 10;\n\n      // Create transaction\n      await storage.createTransaction({\n        userId,\n        type: \"purchase\",\n        points: pointsEarned,\n        description: `QR Purchase at ${machineId}`,\n        machineId,\n        amount,\n      });\n\n      // Update user points and punch card\n      const user = await storage.getUser(userId);\n      let tierUpgrade = null;\n      \n      if (user) {\n        const newTotalPoints = (user.totalPoints || 0) + pointsEarned;\n        await storage.updateUserPoints(userId, newTotalPoints);\n\n        const newPunchProgress = Math.min((user.punchCardProgress || 0) + 1, 5);\n        await storage.updatePunchCard(userId, newPunchProgress);\n\n        // Check for tier upgrade\n        let newTier = user.loyaltyTier;\n        if (newTotalPoints >= 500 && user.loyaltyTier === \"apprentice\") {\n          newTier = \"tradie\";\n          tierUpgrade = \"tradie\";\n          await storage.updateUserTier(userId, newTier);\n        } else if (newTotalPoints >= 1000 && user.loyaltyTier === \"tradie\") {\n          newTier = \"foreman\";\n          tierUpgrade = \"foreman\";\n          await storage.updateUserTier(userId, newTier);\n        }\n\n        // Check for punch card completion\n        if (newPunchProgress === 5) {\n          await storage.createTransaction({\n            userId,\n            type: \"bonus\",\n            points: 100,\n            description: \"Punch card completed - Free large drink\",\n          });\n          await storage.updateUserPoints(userId, newTotalPoints + 100);\n          await storage.updatePunchCard(userId, 0);\n        }\n      }\n\n      res.json({ \n        success: true, \n        pointsEarned,\n        message: `Earned ${pointsEarned} points!`,\n        tierUpgrade\n      });\n    } catch (error) {\n      console.error(\"Error processing QR purchase:\", error);\n      res.status(500).json({ message: \"Failed to process purchase\" });\n    }\n  });\n\n  // Leaderboard routes\n  app.get('/api/leaderboard', async (req, res) => {\n    try {\n      const leaderboards = await storage.getLeaderboardBySuburb();\n      res.json(leaderboards);\n    } catch (error) {\n      console.error(\"Error fetching leaderboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch leaderboard\" });\n    }\n  });\n\n  // Content management routes\n  app.get(\"/api/content/photo-reel\", async (req, res) => {\n    try {\n      const items = await storage.getPhotoReelItems();\n      res.json(items);\n    } catch (error) {\n      console.error(\"Error fetching photo reel items:\", error);\n      res.status(500).json({ message: \"Failed to fetch photo reel items\" });\n    }\n  });\n\n  app.get(\"/api/content/app-exclusive-rewards\", async (req, res) => {\n    try {\n      const rewards = await storage.getAppExclusiveRewards();\n      res.json(rewards);\n    } catch (error) {\n      console.error(\"Error fetching app exclusive rewards:\", error);\n      res.status(500).json({ message: \"Failed to fetch app exclusive rewards\" });\n    }\n  });\n\n  // Developer content management routes\n  app.post(\"/api/developer/photo-reel\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isDeveloper) {\n        return res.status(403).json({ message: \"Developer access required\" });\n      }\n\n      const item = await storage.createPhotoReelItem(req.body);\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error creating photo reel item:\", error);\n      res.status(500).json({ message: \"Failed to create photo reel item\" });\n    }\n  });\n\n  app.put(\"/api/developer/photo-reel/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isDeveloper) {\n        return res.status(403).json({ message: \"Developer access required\" });\n      }\n\n      const item = await storage.updatePhotoReelItem(req.params.id, req.body);\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error updating photo reel item:\", error);\n      res.status(500).json({ message: \"Failed to update photo reel item\" });\n    }\n  });\n\n  app.delete(\"/api/developer/photo-reel/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isDeveloper) {\n        return res.status(403).json({ message: \"Developer access required\" });\n      }\n\n      await storage.deletePhotoReelItem(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting photo reel item:\", error);\n      res.status(500).json({ message: \"Failed to delete photo reel item\" });\n    }\n  });\n\n  app.post(\"/api/developer/app-exclusive-rewards\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isDeveloper) {\n        return res.status(403).json({ message: \"Developer access required\" });\n      }\n\n      const reward = await storage.createAppExclusiveReward(req.body);\n      res.json(reward);\n    } catch (error) {\n      console.error(\"Error creating app exclusive reward:\", error);\n      res.status(500).json({ message: \"Failed to create app exclusive reward\" });\n    }\n  });\n\n  app.put(\"/api/developer/app-exclusive-rewards/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isDeveloper) {\n        return res.status(403).json({ message: \"Developer access required\" });\n      }\n\n      const reward = await storage.updateAppExclusiveReward(req.params.id, req.body);\n      res.json(reward);\n    } catch (error) {\n      console.error(\"Error updating app exclusive reward:\", error);\n      res.status(500).json({ message: \"Failed to update app exclusive reward\" });\n    }\n  });\n\n  app.delete(\"/api/developer/app-exclusive-rewards/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user?.isDeveloper) {\n        return res.status(403).json({ message: \"Developer access required\" });\n      }\n\n      await storage.deleteAppExclusiveReward(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting app exclusive reward:\", error);\n      res.status(500).json({ message: \"Failed to delete app exclusive reward\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":33166},"server/sendgrid.ts":{"content":"import { MailService } from '@sendgrid/mail';\n\nif (!process.env.SENDGRID_API_KEY) {\n  throw new Error(\"SENDGRID_API_KEY environment variable must be set\");\n}\n\nconst mailService = new MailService();\nmailService.setApiKey(process.env.SENDGRID_API_KEY);\n\ninterface EmailParams {\n  to: string;\n  from: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  try {\n    await mailService.send({\n      to: params.to,\n      from: params.from,\n      subject: params.subject,\n      text: params.text,\n      html: params.html,\n    });\n    return true;\n  } catch (error) {\n    console.error('SendGrid email error:', error);\n    return false;\n  }\n}\n\nexport function createPasswordResetEmail(resetUrl: string, userEmail: string) {\n  const subject = \"Reset Your Hi-Vis Vending Password\";\n  \n  const text = `\nHi there!\n\nYou requested a password reset for your Hi-Vis Vending account.\n\nClick the link below to reset your password:\n${resetUrl}\n\nThis link will expire in 1 hour for security reasons.\n\nIf you didn't request this reset, you can safely ignore this email.\n\nThanks,\nThe Hi-Vis Vending Team\n  `.trim();\n\n  const html = `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Reset Your Password</title>\n  <style>\n    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n    .header { background: linear-gradient(135deg, #f97316, #eab308); color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }\n    .content { background: #f9fafb; padding: 30px; border-radius: 0 0 8px 8px; }\n    .button { display: inline-block; background: #f97316; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: bold; margin: 20px 0; }\n    .footer { color: #666; font-size: 14px; margin-top: 20px; padding-top: 20px; border-top: 1px solid #e5e5e5; }\n  </style>\n</head>\n<body>\n  <div class=\"header\">\n    <h1>🦺 Hi-Vis Vending</h1>\n    <p>Password Reset Request</p>\n  </div>\n  <div class=\"content\">\n    <h2>Reset Your Password</h2>\n    <p>Hi there!</p>\n    <p>You requested a password reset for your Hi-Vis Vending account. Click the button below to create a new password:</p>\n    \n    <a href=\"${resetUrl}\" class=\"button\">Reset My Password</a>\n    \n    <p>Or copy and paste this link into your browser:</p>\n    <p style=\"word-break: break-all; background: #e5e5e5; padding: 10px; border-radius: 4px; font-family: monospace;\">${resetUrl}</p>\n    \n    <div class=\"footer\">\n      <p><strong>Important:</strong> This link will expire in 1 hour for security reasons.</p>\n      <p>If you didn't request this reset, you can safely ignore this email.</p>\n      <p>Thanks,<br>The Hi-Vis Vending Team</p>\n    </div>\n  </div>\n</body>\n</html>\n  `.trim();\n\n  return { subject, text, html };\n}","size_bytes":2941},"server/storage.ts":{"content":"import {\n  users,\n  transactions,\n  rewards,\n  machines,\n  notifications,\n  externalTransactions,\n  seasons,\n  monthlyPoints,\n  photoReelItems,\n  appExclusiveRewards,\n  type User,\n  type UpsertUser,\n  type InsertTransaction,\n  type Transaction,\n  type Reward,\n  type Machine,\n  type Notification,\n  type InsertNotification,\n  type ExternalTransaction,\n  type InsertExternalTransaction,\n  type Season,\n  type MonthlyPoints,\n  type PhotoReelItem,\n  type InsertPhotoReelItem,\n  type AppExclusiveReward,\n  type InsertAppExclusiveReward,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: Omit<UpsertUser, 'id'>): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserPassword(id: string, password: string): Promise<User>;\n  setPasswordResetToken(id: string, token: string, expiry: Date): Promise<User>;\n  getUserByResetToken(token: string): Promise<User | undefined>;\n  getUserByReferralCode(referralCode: string): Promise<User | undefined>;\n  generateReferralCode(userId: string): Promise<string>;\n  updateUserReferredBy(userId: string, referrerId: string): Promise<User>;\n  updateReferralCount(userId: string, count: number): Promise<User>;\n  \n  // Loyalty operations\n  updateUserPoints(userId: string, points: number): Promise<User>;\n  updateUserTier(userId: string, tier: string): Promise<User>;\n  updatePunchCard(userId: string, progress: number): Promise<User>;\n  updateUserSuburb(id: string, suburb: string): Promise<User>;\n  updateUserProfile(id: string, profile: { firstName: string; lastName: string; suburb: string }): Promise<User>;\n  \n  // Transaction operations\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  getUserTransactions(userId: string, limit?: number): Promise<Transaction[]>;\n  \n  // Reward operations\n  getRewards(): Promise<Reward[]>;\n  getReward(id: string): Promise<Reward | undefined>;\n  redeemReward(userId: string, rewardId: string): Promise<Transaction>;\n  \n  // Machine operations\n  getMachines(): Promise<Machine[]>;\n  updateMachineStatus(id: string, isOnline: boolean): Promise<Machine>;\n  \n  // Admin operations\n  getAdminStats(): Promise<{\n    totalUsers: number;\n    totalTransactions: number;\n    pointsRedeemed: number;\n    activeMachines: number;\n    activeUsersToday: number;\n    totalPointsEarned: number;\n  }>;\n  getRecentUsers(limit?: number): Promise<User[]>;\n  getAllUsers(): Promise<User[]>;\n  \n  // Notification operations\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  sendBulkNotifications(title: string, message: string, type: string, userIds?: string[]): Promise<void>;\n  getUserNotifications(userId: string): Promise<Notification[]>;\n  markNotificationRead(notificationId: string): Promise<void>;\n  \n  // External transaction matching\n  processExternalTransaction(transaction: InsertExternalTransaction): Promise<void>;\n  \n  // Content management operations\n  getPhotoReelItems(): Promise<PhotoReelItem[]>;\n  getAppExclusiveRewards(): Promise<AppExclusiveReward[]>;\n  createPhotoReelItem(item: InsertPhotoReelItem): Promise<PhotoReelItem>;\n  updatePhotoReelItem(id: string, item: Partial<InsertPhotoReelItem>): Promise<PhotoReelItem>;\n  deletePhotoReelItem(id: string): Promise<void>;\n  createAppExclusiveReward(reward: InsertAppExclusiveReward): Promise<AppExclusiveReward>;\n  updateAppExclusiveReward(id: string, reward: Partial<InsertAppExclusiveReward>): Promise<AppExclusiveReward>;\n  deleteAppExclusiveReward(id: string): Promise<void>;\n  \n  // Leaderboard operations\n  getLeaderboardBySuburb(): Promise<{ suburb: string; users: Array<User & { rank: number }> }[]>;\n  getUnprocessedExternalTransactions(): Promise<ExternalTransaction[]>;\n  matchTransactionToUser(externalTransactionId: string, userId: string): Promise<void>;\n  getUserByCardNumber(cardNumber: string): Promise<User | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: Omit<UpsertUser, 'id'>): Promise<User> {\n    const dataToInsert = {\n      ...userData,\n      firstName: userData.firstName ? this.capitalizeName(userData.firstName) : userData.firstName,\n      lastName: userData.lastName ? this.capitalizeName(userData.lastName) : userData.lastName,\n      referralCode: this.generateShortCode(),\n      // Check if this is the developer account\n      isDeveloper: userData.email?.toLowerCase() === 'byron@sydneyselectvending.com.au',\n    };\n\n    const [user] = await db\n      .insert(users)\n      .values(dataToInsert)\n      .returning();\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    // Generate referral code if new user\n    const existingUser = await this.getUser(userData.id!);\n    const dataToInsert = {\n      ...userData,\n      firstName: userData.firstName ? this.capitalizeName(userData.firstName) : userData.firstName,\n      lastName: userData.lastName ? this.capitalizeName(userData.lastName) : userData.lastName,\n      referralCode: existingUser?.referralCode || this.generateShortCode(),\n    };\n\n    const updateData = {\n      ...userData,\n      firstName: userData.firstName ? this.capitalizeName(userData.firstName) : userData.firstName,\n      lastName: userData.lastName ? this.capitalizeName(userData.lastName) : userData.lastName,\n      updatedAt: new Date(),\n    };\n\n    const [user] = await db\n      .insert(users)\n      .values(dataToInsert)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: updateData,\n      })\n      .returning();\n    return user;\n  }\n\n  async getUserByReferralCode(referralCode: string): Promise<User | undefined> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.referralCode, referralCode));\n    return user;\n  }\n\n  async generateReferralCode(userId: string): Promise<string> {\n    const code = this.generateShortCode();\n    await db\n      .update(users)\n      .set({ referralCode: code })\n      .where(eq(users.id, userId));\n    return code;\n  }\n\n  async updateUserReferredBy(userId: string, referrerId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ \n        referredBy: referrerId,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async updateReferralCount(userId: string, count: number): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ \n        referralCount: count,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Reward redemption methods\n  async getTransactionByRedemptionCode(code: string): Promise<Transaction | undefined> {\n    const [transaction] = await db.select().from(transactions).where(eq(transactions.redemptionCode, code));\n    return transaction;\n  }\n\n  async markTransactionAsRedeemed(transactionId: string): Promise<void> {\n    await db.update(transactions)\n      .set({ \n        isRedeemed: true, \n        redeemedAt: new Date() \n      })\n      .where(eq(transactions.id, transactionId));\n  }\n\n  private generateShortCode(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < 6; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n\n  private generatePermanentQrCode(): string {\n    // Generate a longer, more secure code for permanent QR codes\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = 'HIVIS-';\n    for (let i = 0; i < 12; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n\n  async generateUserPermanentQrCode(userId: string): Promise<string> {\n    const user = await this.getUser(userId);\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // If user already has a permanent QR code, return it\n    if (user.permanentQrCode) {\n      return user.permanentQrCode;\n    }\n\n    // Generate new permanent QR code\n    let qrCode = this.generatePermanentQrCode();\n    \n    // Ensure uniqueness\n    let existingUser = await this.getUserByPermanentQrCode(qrCode);\n    while (existingUser) {\n      qrCode = this.generatePermanentQrCode();\n      existingUser = await this.getUserByPermanentQrCode(qrCode);\n    }\n\n    // Update user with permanent QR code\n    await db\n      .update(users)\n      .set({ \n        permanentQrCode: qrCode,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId));\n\n    return qrCode;\n  }\n\n  async getUserByPermanentQrCode(qrCode: string): Promise<User | undefined> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.permanentQrCode, qrCode));\n    return user;\n  }\n\n  private capitalizeName(name: string): string {\n    if (!name || !name.trim()) return name;\n    return name.trim()\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ');\n  }\n\n  // Loyalty operations\n  async updateUserPoints(userId: string, points: number): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ \n        totalPoints: points,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async updateUserTier(userId: string, tier: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ \n        loyaltyTier: tier,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async updatePunchCard(userId: string, progress: number): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ \n        punchCardProgress: progress,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async updateDailyStreak(userId: string): Promise<User> {\n    const user = await this.getUser(userId);\n    if (!user) throw new Error(\"User not found\");\n\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const lastPurchase = user.lastPurchaseDate ? new Date(user.lastPurchaseDate) : null;\n    const lastPurchaseDate = lastPurchase ? new Date(lastPurchase.getFullYear(), lastPurchase.getMonth(), lastPurchase.getDate()) : null;\n    \n    let newStreak = user.currentStreak || 0;\n    let streakRewardEarned = user.streakRewardEarned || false;\n\n    // If last purchase was yesterday, increment streak\n    if (lastPurchaseDate) {\n      const yesterday = new Date(today);\n      yesterday.setDate(yesterday.getDate() - 1);\n      \n      if (lastPurchaseDate.getTime() === yesterday.getTime()) {\n        newStreak += 1;\n      } else if (lastPurchaseDate.getTime() !== today.getTime()) {\n        // Reset streak if more than a day has passed\n        newStreak = 1;\n      }\n      // If last purchase was today, don't change streak\n    } else {\n      // First purchase ever\n      newStreak = 1;\n    }\n\n    // Check if user earned 7-day streak reward\n    if (newStreak >= 7 && !streakRewardEarned) {\n      streakRewardEarned = true;\n      \n      // Create a reward transaction for free large drink\n      await this.createTransaction({\n        userId,\n        type: \"bonus\",\n        points: 0, // Free drink, no points deducted\n        description: \"7-Day Streak Reward: Free Large Drink\",\n        redemptionCode: `STREAK-${Math.random().toString(36).substring(2, 8).toUpperCase()}`,\n        isRedeemed: false\n      });\n    }\n\n    const [updatedUser] = await db\n      .update(users)\n      .set({ \n        currentStreak: newStreak,\n        lastPurchaseDate: today,\n        streakRewardEarned,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId))\n      .returning();\n      \n    return updatedUser;\n  }\n\n  async updateUserSuburb(id: string, suburb: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ \n        suburb: suburb,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserProfile(id: string, profile: { firstName: string; lastName: string; suburb: string }): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ \n        firstName: this.capitalizeName(profile.firstName),\n        lastName: this.capitalizeName(profile.lastName),\n        suburb: profile.suburb,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserPassword(id: string, password: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ \n        password,\n        resetToken: null,\n        resetTokenExpiry: null,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async setPasswordResetToken(id: string, token: string, expiry: Date): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ \n        resetToken: token,\n        resetTokenExpiry: expiry,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async getUserByResetToken(token: string): Promise<User | undefined> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.resetToken, token));\n    return user;\n  }\n\n  // Transaction operations\n  async createTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    const [newTransaction] = await db\n      .insert(transactions)\n      .values(transaction)\n      .returning();\n    return newTransaction;\n  }\n\n  async getUserTransactions(userId: string, limit = 20): Promise<Transaction[]> {\n    return await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.userId, userId))\n      .orderBy(desc(transactions.createdAt))\n      .limit(limit);\n  }\n\n  // Reward operations\n  async getRewards(): Promise<Reward[]> {\n    return await db\n      .select()\n      .from(rewards)\n      .where(eq(rewards.isActive, true));\n  }\n\n  async getReward(id: string): Promise<Reward | undefined> {\n    const [reward] = await db\n      .select()\n      .from(rewards)\n      .where(eq(rewards.id, id));\n    return reward;\n  }\n\n  async redeemReward(userId: string, rewardId: string): Promise<Transaction> {\n    const reward = await this.getReward(rewardId);\n    if (!reward) {\n      throw new Error(\"Reward not found\");\n    }\n\n    const user = await this.getUser(userId);\n    if (!user || (user.totalPoints || 0) < reward.pointsCost) {\n      throw new Error(\"Insufficient points\");\n    }\n\n    // Create redemption transaction\n    const transaction = await this.createTransaction({\n      userId,\n      type: \"redemption\",\n      points: -reward.pointsCost,\n      description: `Redeemed ${reward.name}`,\n    });\n\n    // Update user points\n    await this.updateUserPoints(userId, (user.totalPoints || 0) - reward.pointsCost);\n\n    return transaction;\n  }\n\n  // Machine operations\n  async getMachines(): Promise<Machine[]> {\n    return await db.select().from(machines);\n  }\n\n  async updateMachineStatus(id: string, isOnline: boolean): Promise<Machine> {\n    const [machine] = await db\n      .update(machines)\n      .set({ \n        isOnline,\n        lastPing: new Date()\n      })\n      .where(eq(machines.id, id))\n      .returning();\n    return machine;\n  }\n\n  // Admin operations\n  async getAdminStats(): Promise<{\n    totalUsers: number;\n    totalTransactions: number;\n    pointsRedeemed: number;\n    activeMachines: number;\n    activeUsersToday: number;\n    totalPointsEarned: number;\n  }> {\n    try {\n      const totalUsers = await db.select().from(users);\n      const allTransactions = await db.select().from(transactions);\n      const allMachines = await db.select().from(machines);\n      \n      const pointsRedeemed = allTransactions\n        .filter(t => t.type === \"redemption\")\n        .reduce((sum, t) => sum + Math.abs(t.points), 0);\n\n      const totalPointsEarned = allTransactions\n        .filter(t => t.points > 0)\n        .reduce((sum, t) => sum + t.points, 0);\n\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const activeUsersToday = allTransactions\n        .filter(t => new Date(t.createdAt!) >= today)\n        .map(t => t.userId)\n        .filter((userId, index, arr) => arr.indexOf(userId) === index)\n        .length;\n\n      const activeMachines = allMachines.filter(m => m.isOnline);\n\n      return {\n        totalUsers: totalUsers.length,\n        totalTransactions: allTransactions.length,\n        pointsRedeemed,\n        activeMachines: activeMachines.length,\n        activeUsersToday,\n        totalPointsEarned,\n      };\n    } catch (error) {\n      console.error(\"Error in getAdminStats:\", error);\n      // Return default stats if there's an error\n      return {\n        totalUsers: 0,\n        totalTransactions: 0,\n        pointsRedeemed: 0,\n        activeMachines: 0,\n        activeUsersToday: 0,\n        totalPointsEarned: 0,\n      };\n    }\n  }\n\n  async getRecentUsers(limit = 10): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .orderBy(desc(users.createdAt))\n      .limit(limit);\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  // Notification operations\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const [newNotification] = await db\n      .insert(notifications)\n      .values(notification)\n      .returning();\n    return newNotification;\n  }\n\n  async sendBulkNotifications(title: string, message: string, type: string, userIds?: string[]): Promise<void> {\n    let targetUsers: User[];\n    \n    if (userIds && userIds.length > 0) {\n      targetUsers = await db.select().from(users).where(and(...userIds.map(id => eq(users.id, id))));\n    } else {\n      targetUsers = await db.select().from(users).where(eq(users.notificationsEnabled, true));\n    }\n\n    const notificationsToInsert = targetUsers.map(user => ({\n      userId: user.id,\n      title,\n      message,\n      type,\n    }));\n\n    if (notificationsToInsert.length > 0) {\n      await db.insert(notifications).values(notificationsToInsert);\n    }\n  }\n\n  async getUserNotifications(userId: string): Promise<Notification[]> {\n    return await db\n      .select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt))\n      .limit(50);\n  }\n\n  async markNotificationRead(notificationId: string): Promise<void> {\n    await db\n      .update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.id, notificationId));\n  }\n\n  // External transaction matching\n  async processExternalTransaction(transaction: InsertExternalTransaction): Promise<void> {\n    // First, store the external transaction\n    const [externalTx] = await db\n      .insert(externalTransactions)\n      .values({\n        ...transaction,\n        isProcessed: false,\n      })\n      .returning();\n\n    // Try to match to a user by card number\n    if (transaction.cardNumber) {\n      const user = await this.getUserByCardNumber(transaction.cardNumber);\n      if (user) {\n        await this.matchTransactionToUser(externalTx.id, user.id);\n      }\n    }\n  }\n\n  // Process external transaction with product-specific points\n  async processExternalTransactionWithPoints(transaction: any): Promise<void> {\n    // First, store the external transaction\n    const [externalTx] = await db\n      .insert(externalTransactions)\n      .values({\n        externalId: transaction.externalId,\n        machineId: transaction.machineId,\n        cardNumber: transaction.cardNumber,\n        qrCode: transaction.qrCode, // Add QR code to external transaction record\n        amount: transaction.amount,\n        productName: transaction.productName,\n        timestamp: transaction.timestamp,\n        isProcessed: false,\n      })\n      .returning();\n\n    let user = null;\n\n    // Try to match to a user by permanent QR code first (preferred method)\n    if (transaction.qrCode) {\n      user = await this.getUserByPermanentQrCode(transaction.qrCode);\n      if (user) {\n        await this.matchTransactionToUserWithPoints(externalTx.id, user.id, transaction.pointsEarned);\n        return;\n      }\n    }\n\n    // Fall back to matching by card number if QR code match fails\n    if (transaction.cardNumber) {\n      user = await this.getUserByCardNumber(transaction.cardNumber);\n      if (user) {\n        await this.matchTransactionToUserWithPoints(externalTx.id, user.id, transaction.pointsEarned);\n      }\n    }\n  }\n\n  async getUnprocessedExternalTransactions(): Promise<ExternalTransaction[]> {\n    return await db\n      .select()\n      .from(externalTransactions)\n      .where(eq(externalTransactions.isProcessed, false))\n      .orderBy(desc(externalTransactions.createdAt));\n  }\n\n  async matchTransactionToUser(externalTransactionId: string, userId: string): Promise<void> {\n    const [externalTx] = await db\n      .select()\n      .from(externalTransactions)\n      .where(eq(externalTransactions.id, externalTransactionId));\n\n    if (!externalTx) return;\n\n    // Calculate points (e.g., 10 points per dollar spent)\n    const points = Math.floor(externalTx.amount / 100) * 10;\n\n    // Create loyalty transaction\n    await this.createTransaction({\n      userId,\n      type: \"purchase\",\n      points,\n      description: `Purchase: ${externalTx.productName || 'Vending machine item'}`,\n      machineId: externalTx.machineId,\n      amount: externalTx.amount,\n      cardNumber: externalTx.cardNumber || undefined,\n      isAutoGenerated: true,\n    });\n\n    // Update user points, monthly points, and daily streak\n    await this.updateUserPointsAndMonthly(userId, points);\n    await this.updateDailyStreak(userId);\n\n    // Mark external transaction as processed\n    await db\n      .update(externalTransactions)\n      .set({ \n        isProcessed: true,\n        matchedUserId: userId \n      })\n      .where(eq(externalTransactions.id, externalTransactionId));\n  }\n\n  // Update user points and monthly season points\n  async updateUserPointsAndMonthly(userId: string, points: number): Promise<void> {\n    const user = await this.getUser(userId);\n    if (!user) return;\n\n    const newTotal = (user.totalPoints || 0) + points;\n    await this.updateUserPoints(userId, newTotal);\n\n    // Check for tier promotion\n    let newTier = user.loyaltyTier;\n    if (newTotal >= 1000) newTier = \"foreman\";\n    else if (newTotal >= 500) newTier = \"tradie\";\n    \n    if (newTier !== user.loyaltyTier) {\n      await this.updateUserTier(userId, newTier || \"apprentice\");\n      \n      // Send congratulatory notification\n      await this.createNotification({\n        userId,\n        title: \"Level Up!\",\n        message: `Congratulations! You've been promoted to ${newTier!.charAt(0).toUpperCase() + newTier!.slice(1)}!`,\n        type: \"achievement\",\n      });\n    }\n\n    // Update monthly points for current season\n    await this.updateMonthlyPoints(userId, points);\n  }\n\n  // Monthly season management\n  async getCurrentSeason(): Promise<Season | undefined> {\n    const [currentSeason] = await db\n      .select()\n      .from(seasons)\n      .where(eq(seasons.isActive, true))\n      .limit(1);\n    return currentSeason;\n  }\n\n  async createNewSeason(): Promise<Season> {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = now.getMonth() + 1; // 1-12\n    const monthNames = [\n      'January', 'February', 'March', 'April', 'May', 'June',\n      'July', 'August', 'September', 'October', 'November', 'December'\n    ];\n    \n    // Deactivate any existing active season\n    await db\n      .update(seasons)\n      .set({ isActive: false });\n\n    // Create new season\n    const startDate = new Date(year, now.getMonth(), 1);\n    const endDate = new Date(year, now.getMonth() + 1, 0);\n\n    const [newSeason] = await db\n      .insert(seasons)\n      .values({\n        year,\n        month,\n        name: `${monthNames[month - 1]} ${year}`,\n        isActive: true,\n        startDate,\n        endDate,\n      })\n      .returning();\n\n    return newSeason;\n  }\n\n  async updateMonthlyPoints(userId: string, points: number): Promise<void> {\n    let currentSeason = await this.getCurrentSeason();\n    \n    // Create new season if none exists or if we're in a new month\n    if (!currentSeason) {\n      currentSeason = await this.createNewSeason();\n    }\n\n    const user = await this.getUser(userId);\n    if (!user) return;\n\n    // Check if user has monthly points record for current season\n    const [existingRecord] = await db\n      .select()\n      .from(monthlyPoints)\n      .where(and(\n        eq(monthlyPoints.userId, userId),\n        eq(monthlyPoints.seasonId, currentSeason.id)\n      ));\n\n    if (existingRecord) {\n      // Update existing record\n      await db\n        .update(monthlyPoints)\n        .set({ \n          points: existingRecord.points + points,\n          updatedAt: new Date()\n        })\n        .where(eq(monthlyPoints.id, existingRecord.id));\n    } else {\n      // Create new record\n      await db\n        .insert(monthlyPoints)\n        .values({\n          userId,\n          seasonId: currentSeason.id,\n          points,\n          suburb: user.suburb || 'Unknown',\n        });\n    }\n\n    // Update ranks for the season\n    await this.updateSeasonRanks(currentSeason.id);\n  }\n\n  async updateSeasonRanks(seasonId: string): Promise<void> {\n    // Get all monthly points for this season, grouped by suburb\n    const allPoints = await db\n      .select()\n      .from(monthlyPoints)\n      .where(eq(monthlyPoints.seasonId, seasonId))\n      .orderBy(desc(monthlyPoints.points));\n\n    // Group by suburb and update ranks\n    const suburbGroups = new Map<string, any[]>();\n    for (const record of allPoints) {\n      if (!suburbGroups.has(record.suburb)) {\n        suburbGroups.set(record.suburb, []);\n      }\n      suburbGroups.get(record.suburb)!.push(record);\n    }\n\n    // Update ranks within each suburb\n    for (const [suburb, users] of suburbGroups) {\n      const sortedUsers = users.sort((a: any, b: any) => b.points - a.points);\n      for (let i = 0; i < sortedUsers.length; i++) {\n        const user = sortedUsers[i];\n        const rank = i + 1;\n        await db\n          .update(monthlyPoints)\n          .set({ rank, updatedAt: new Date() })\n          .where(eq(monthlyPoints.id, user.id));\n      }\n    }\n  }\n\n  // Match transaction with specific point value\n  async matchTransactionToUserWithPoints(externalTransactionId: string, userId: string, points: number): Promise<void> {\n    const [externalTx] = await db\n      .select()\n      .from(externalTransactions)\n      .where(eq(externalTransactions.id, externalTransactionId));\n\n    if (!externalTx) return;\n\n    // Create loyalty transaction with product-specific points\n    await this.createTransaction({\n      userId,\n      type: \"purchase\",\n      points,\n      description: `Purchase: ${externalTx.productName || 'Vending machine item'} (${points} pts)`,\n      machineId: externalTx.machineId,\n      amount: externalTx.amount,\n      cardNumber: externalTx.cardNumber || undefined,\n      isAutoGenerated: true,\n    });\n\n    // Update user points, monthly points, and daily streak\n    await this.updateUserPointsAndMonthly(userId, points);\n    await this.updateDailyStreak(userId);\n\n    // Mark external transaction as processed\n    await db\n      .update(externalTransactions)\n      .set({ \n        isProcessed: true,\n        matchedUserId: userId,\n      })\n      .where(eq(externalTransactions.id, externalTransactionId));\n  }\n\n  async getUserByCardNumber(cardNumber: string): Promise<User | undefined> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.cardNumber, cardNumber));\n    return user;\n  }\n\n  // QR code scan operations\n  async createQRScan(scanData: any): Promise<any> {\n    const [scan] = await db\n      .insert(qrScans)\n      .values(scanData)\n      .returning();\n    return scan;\n  }\n\n  async getQRScans(userId?: string, machineId?: string, limit: number = 50): Promise<any[]> {\n    let query = db.select().from(qrScans);\n    \n    if (userId) {\n      query = query.where(eq(qrScans.userId, userId));\n    }\n    if (machineId) {\n      query = query.where(eq(qrScans.machineId, machineId));\n    }\n    \n    return await query\n      .orderBy(desc(qrScans.createdAt))\n      .limit(limit);\n  }\n\n  // Leaderboard operations\n  async getLeaderboardBySuburb(): Promise<{ suburb: string; users: Array<User & { rank: number }> }[]> {\n    // Get all users with points, grouped by suburb\n    const allUsers = await db\n      .select()\n      .from(users)\n      .orderBy(desc(users.totalPoints));\n\n    // Group users by suburb\n    const suburbGroups = new Map<string, User[]>();\n    \n    for (const user of allUsers) {\n      if (!user.suburb) continue;\n      \n      if (!suburbGroups.has(user.suburb)) {\n        suburbGroups.set(user.suburb, []);\n      }\n      suburbGroups.get(user.suburb)!.push(user);\n    }\n\n    // Create leaderboard with rankings for each suburb\n    const leaderboards: { suburb: string; users: Array<User & { rank: number }> }[] = [];\n    \n    for (const [suburb, suburbUsers] of suburbGroups) {\n      // Sort users by points and add ranking\n      const rankedUsers = suburbUsers\n        .sort((a, b) => (b.totalPoints || 0) - (a.totalPoints || 0))\n        .map((user, index) => ({\n          ...user,\n          rank: index + 1\n        }));\n\n      leaderboards.push({\n        suburb,\n        users: rankedUsers\n      });\n    }\n\n    // Sort suburbs by highest total points\n    leaderboards.sort((a, b) => {\n      const aTotal = a.users.reduce((sum, u) => sum + (u.totalPoints || 0), 0);\n      const bTotal = b.users.reduce((sum, u) => sum + (u.totalPoints || 0), 0);\n      return bTotal - aTotal;\n    });\n\n    return leaderboards;\n  }\n\n  async getMonthlyLeaderboard(seasonId: string): Promise<any[]> {\n    return await db\n      .select({\n        id: monthlyPoints.id,\n        userId: monthlyPoints.userId,\n        points: monthlyPoints.points,\n        rank: monthlyPoints.rank,\n        suburb: monthlyPoints.suburb,\n        user: {\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          loyaltyTier: users.loyaltyTier,\n        }\n      })\n      .from(monthlyPoints)\n      .leftJoin(users, eq(monthlyPoints.userId, users.id))\n      .where(eq(monthlyPoints.seasonId, seasonId))\n      .orderBy(monthlyPoints.rank);\n  }\n\n  // Content management operations\n  async getPhotoReelItems(): Promise<PhotoReelItem[]> {\n    return await db\n      .select()\n      .from(photoReelItems)\n      .where(eq(photoReelItems.isActive, true))\n      .orderBy(photoReelItems.displayOrder, photoReelItems.createdAt);\n  }\n\n  async getAppExclusiveRewards(): Promise<AppExclusiveReward[]> {\n    return await db\n      .select()\n      .from(appExclusiveRewards)\n      .where(eq(appExclusiveRewards.isActive, true))\n      .orderBy(appExclusiveRewards.displayOrder, appExclusiveRewards.createdAt);\n  }\n\n  async createPhotoReelItem(item: InsertPhotoReelItem): Promise<PhotoReelItem> {\n    const [created] = await db\n      .insert(photoReelItems)\n      .values({\n        ...item,\n        updatedAt: new Date(),\n      })\n      .returning();\n    return created;\n  }\n\n  async updatePhotoReelItem(id: string, item: Partial<InsertPhotoReelItem>): Promise<PhotoReelItem> {\n    const [updated] = await db\n      .update(photoReelItems)\n      .set({\n        ...item,\n        updatedAt: new Date(),\n      })\n      .where(eq(photoReelItems.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deletePhotoReelItem(id: string): Promise<void> {\n    await db.delete(photoReelItems).where(eq(photoReelItems.id, id));\n  }\n\n  async createAppExclusiveReward(reward: InsertAppExclusiveReward): Promise<AppExclusiveReward> {\n    const [created] = await db\n      .insert(appExclusiveRewards)\n      .values({\n        ...reward,\n        updatedAt: new Date(),\n      })\n      .returning();\n    return created;\n  }\n\n  async updateAppExclusiveReward(id: string, reward: Partial<InsertAppExclusiveReward>): Promise<AppExclusiveReward> {\n    const [updated] = await db\n      .update(appExclusiveRewards)\n      .set({\n        ...reward,\n        updatedAt: new Date(),\n      })\n      .where(eq(appExclusiveRewards.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteAppExclusiveReward(id: string): Promise<void> {\n    await db.delete(appExclusiveRewards).where(eq(appExclusiveRewards.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":33000},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  integer,\n  boolean,\n  text,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\"),\n  password: varchar(\"password\").notNull(),\n  mobile: varchar(\"mobile\").notNull(),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  loyaltyTier: varchar(\"loyalty_tier\").default(\"apprentice\"), // apprentice, tradie, foreman\n  totalPoints: integer(\"total_points\").default(0),\n  punchCardProgress: integer(\"punch_card_progress\").default(0),\n  isAdmin: boolean(\"is_admin\").default(false),\n  isDeveloper: boolean(\"is_developer\").default(false),\n  referralCode: varchar(\"referral_code\").unique(),\n  referredBy: varchar(\"referred_by\"),\n  referralCount: integer(\"referral_count\").default(0),\n  // Push notification settings\n  pushToken: varchar(\"push_token\"), // FCM/APNS token for notifications\n  notificationsEnabled: boolean(\"notifications_enabled\").default(true),\n  // External integration\n  cardNumber: varchar(\"card_number\").unique(), // For matching vending machine transactions\n  phoneNumber: varchar(\"phone_number\"), // Alternative matching method\n  permanentQrCode: varchar(\"permanent_qr_code\").unique(), // Static QR code for vending machine scanning\n  // Location information\n  suburb: varchar(\"suburb\").notNull(), // Mandatory field for grouping customers by construction sites\n  // Daily streak tracking\n  currentStreak: integer(\"current_streak\").default(0),\n  lastPurchaseDate: timestamp(\"last_purchase_date\"),\n  streakRewardEarned: boolean(\"streak_reward_earned\").default(false), // Has earned 7-day reward\n  // Password reset functionality\n  resetToken: varchar(\"reset_token\"),\n  resetTokenExpiry: timestamp(\"reset_token_expiry\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Transactions table for tracking purchases and redemptions\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  type: varchar(\"type\").notNull(), // purchase, redemption, bonus\n  points: integer(\"points\").notNull(), // positive for earned, negative for spent\n  description: text(\"description\").notNull(),\n  machineId: varchar(\"machine_id\"),\n  // External transaction matching\n  externalTransactionId: varchar(\"external_transaction_id\").unique(), // From Moma app\n  amount: integer(\"amount\"), // Purchase amount in cents\n  cardNumber: varchar(\"card_number\"), // Card used for purchase\n  isAutoGenerated: boolean(\"is_auto_generated\").default(false), // Auto-created from external system\n  // Reward redemption fields\n  redemptionCode: varchar(\"redemption_code\").unique(), // Generated code for reward redemption\n  isRedeemed: boolean(\"is_redeemed\").default(false), // Has the reward been claimed at vending machine\n  redeemedAt: timestamp(\"redeemed_at\"), // When the reward was actually claimed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Push notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  title: varchar(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: varchar(\"type\").notNull(), // promotion, reminder, achievement\n  isRead: boolean(\"is_read\").default(false),\n  scheduledFor: timestamp(\"scheduled_for\"),\n  sentAt: timestamp(\"sent_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// External transactions for matching\nexport const externalTransactions = pgTable(\"external_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  externalId: varchar(\"external_id\").unique().notNull(), // From Moma app\n  machineId: varchar(\"machine_id\").notNull(),\n  cardNumber: varchar(\"card_number\"),\n  amount: integer(\"amount\").notNull(), // In cents\n  productName: varchar(\"product_name\"),\n  timestamp: timestamp(\"timestamp\").notNull(),\n  isProcessed: boolean(\"is_processed\").default(false),\n  matchedUserId: varchar(\"matched_user_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Rewards table for available rewards\nexport const rewards = pgTable(\"rewards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  pointsCost: integer(\"points_cost\").notNull(),\n  category: varchar(\"category\").notNull(), // drink, snack, bonus\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Photo reel for home page\nexport const photoReelItems = pgTable(\"photo_reel_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  imageUrl: varchar(\"image_url\").notNull(),\n  linkUrl: varchar(\"link_url\"), // Optional link for CTA\n  isActive: boolean(\"is_active\").default(true),\n  displayOrder: integer(\"display_order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// App exclusive rewards section\nexport const appExclusiveRewards = pgTable(\"app_exclusive_rewards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  pointsCost: integer(\"points_cost\").notNull(),\n  originalPrice: varchar(\"original_price\"), // e.g., \"$4.50\"\n  savingsText: varchar(\"savings_text\"), // e.g., \"Save $2.50\"\n  imageUrl: varchar(\"image_url\"),\n  isActive: boolean(\"is_active\").default(true),\n  isLimitedTime: boolean(\"is_limited_time\").default(false),\n  expiresAt: timestamp(\"expires_at\"),\n  displayOrder: integer(\"display_order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Vending machines table\nexport const machines = pgTable(\"machines\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  location: text(\"location\").notNull(),\n  isOnline: boolean(\"is_online\").default(true),\n  lastPing: timestamp(\"last_ping\").defaultNow(),\n  nayaxDeviceId: varchar(\"nayax_device_id\").unique(), // Nayax DOT device identifier\n  supportedPromotions: varchar(\"supported_promotions\").array(), // Array of promotion types\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Monthly seasons table for leaderboards\nexport const seasons = pgTable(\"seasons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  year: integer(\"year\").notNull(),\n  month: integer(\"month\").notNull(), // 1-12\n  name: varchar(\"name\").notNull(), // e.g., \"January 2025\", \"February 2025\"\n  isActive: boolean(\"is_active\").default(false),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Monthly leaderboard points tracking\nexport const monthlyPoints = pgTable(\"monthly_points\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  seasonId: varchar(\"season_id\").references(() => seasons.id).notNull(),\n  points: integer(\"points\").default(0),\n  rank: integer(\"rank\"),\n  suburb: varchar(\"suburb\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// QR code scans for tracking vending machine interactions\nexport const qrScans = pgTable(\"qr_scans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  machineId: varchar(\"machine_id\").references(() => machines.id),\n  qrData: text(\"qr_data\").notNull(), // Original QR code data\n  scanTimestamp: timestamp(\"scan_timestamp\").defaultNow(),\n  promotionApplied: varchar(\"promotion_applied\"), // Which promotion was triggered\n  pointsAwarded: integer(\"points_awarded\").default(0),\n  discountApplied: integer(\"discount_applied\").default(0), // Percentage discount\n  nayaxTransactionId: varchar(\"nayax_transaction_id\"), // From Nayax API\n  status: varchar(\"status\").default(\"pending\"), // pending, completed, failed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Nayax promotions configuration\nexport const promotions = pgTable(\"promotions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  type: varchar(\"type\").notNull(), // discount, bonus_points, free_item\n  tierRequired: varchar(\"tier_required\").notNull(), // Apprentice, Tradie, Foreman\n  discountPercentage: integer(\"discount_percentage\").default(0),\n  bonusPoints: integer(\"bonus_points\").default(0),\n  freeItemCode: varchar(\"free_item_code\"), // Nayax product code for free items\n  isActive: boolean(\"is_active\").default(true),\n  validFrom: timestamp(\"valid_from\").defaultNow(),\n  validUntil: timestamp(\"valid_until\"),\n  maxUsesPerUser: integer(\"max_uses_per_user\").default(1),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  transactions: many(transactions),\n  notifications: many(notifications),\n  monthlyPoints: many(monthlyPoints),\n  qrScans: many(qrScans),\n}));\n\nexport const transactionsRelations = relations(transactions, ({ one }) => ({\n  user: one(users, {\n    fields: [transactions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  user: one(users, {\n    fields: [notifications.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const externalTransactionsRelations = relations(externalTransactions, ({ one }) => ({\n  matchedUser: one(users, {\n    fields: [externalTransactions.matchedUserId],\n    references: [users.id],\n  }),\n}));\n\nexport const qrScansRelations = relations(qrScans, ({ one }) => ({\n  user: one(users, {\n    fields: [qrScans.userId],\n    references: [users.id],\n  }),\n  machine: one(machines, {\n    fields: [qrScans.machineId],\n    references: [machines.id],\n  }),\n}));\n\nexport const seasonsRelations = relations(seasons, ({ many }) => ({\n  monthlyPoints: many(monthlyPoints),\n}));\n\nexport const monthlyPointsRelations = relations(monthlyPoints, ({ one }) => ({\n  user: one(users, {\n    fields: [monthlyPoints.userId],\n    references: [users.id],\n  }),\n  season: one(seasons, {\n    fields: [monthlyPoints.seasonId],\n    references: [seasons.id],\n  }),\n}));\n\nexport const promotionsRelations = relations(promotions, ({ many }) => ({\n  // Relations can be added as needed\n}));\n\n// Schema types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = typeof transactions.$inferInsert;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = typeof notifications.$inferInsert;\nexport type ExternalTransaction = typeof externalTransactions.$inferSelect;\nexport type InsertExternalTransaction = typeof externalTransactions.$inferInsert;\nexport type Reward = typeof rewards.$inferSelect;\nexport type InsertReward = typeof rewards.$inferInsert;\nexport type Machine = typeof machines.$inferSelect;\nexport type InsertMachine = typeof machines.$inferInsert;\nexport type Season = typeof seasons.$inferSelect;\nexport type InsertSeason = typeof seasons.$inferInsert;\nexport type MonthlyPoints = typeof monthlyPoints.$inferSelect;\nexport type InsertMonthlyPoints = typeof monthlyPoints.$inferInsert;\nexport type QRScan = typeof qrScans.$inferSelect;\nexport type InsertQRScan = typeof qrScans.$inferInsert;\nexport type Promotion = typeof promotions.$inferSelect;\nexport type InsertPromotion = typeof promotions.$inferInsert;\nexport type PhotoReelItem = typeof photoReelItems.$inferSelect;\nexport type InsertPhotoReelItem = typeof photoReelItems.$inferInsert;\nexport type AppExclusiveReward = typeof appExclusiveRewards.$inferSelect;\nexport type InsertAppExclusiveReward = typeof appExclusiveRewards.$inferInsert;\n\nexport const insertTransactionSchema = createInsertSchema(transactions).pick({\n  userId: true,\n  type: true,\n  points: true,\n  description: true,\n  machineId: true,\n});\n\nexport const insertRewardSchema = createInsertSchema(rewards).pick({\n  name: true,\n  description: true,\n  pointsCost: true,\n  category: true,\n});\n\nexport const insertMachineSchema = createInsertSchema(machines).pick({\n  name: true,\n  location: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).pick({\n  userId: true,\n  title: true,\n  message: true,\n  type: true,\n  scheduledFor: true,\n});\n\nexport const insertExternalTransactionSchema = createInsertSchema(externalTransactions).pick({\n  externalId: true,\n  machineId: true,\n  cardNumber: true,\n  amount: true,\n  productName: true,\n  timestamp: true,\n});\n\nexport const insertQRScanSchema = createInsertSchema(qrScans).pick({\n  userId: true,\n  machineId: true,\n  qrData: true,\n  promotionApplied: true,\n  pointsAwarded: true,\n  discountApplied: true,\n  nayaxTransactionId: true,\n});\n\nexport const insertPhotoReelItemSchema = createInsertSchema(photoReelItems).pick({\n  title: true,\n  description: true,\n  imageUrl: true,\n  linkUrl: true,\n  displayOrder: true,\n});\n\nexport const insertAppExclusiveRewardSchema = createInsertSchema(appExclusiveRewards).pick({\n  title: true,\n  description: true,\n  pointsCost: true,\n  originalPrice: true,\n  savingsText: true,\n  imageUrl: true,\n  isLimitedTime: true,\n  expiresAt: true,\n  displayOrder: true,\n});\n\nexport const insertPromotionSchema = createInsertSchema(promotions).pick({\n  name: true,\n  description: true,\n  type: true,\n  tierRequired: true,\n  discountPercentage: true,\n  bonusPoints: true,\n  freeItemCode: true,\n});\n\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type Reward = typeof rewards.$inferSelect;\nexport type Machine = typeof machines.$inferSelect;\nexport type QRScan = typeof qrScans.$inferSelect;\nexport type Promotion = typeof promotions.$inferSelect;\nexport type InsertQRScan = z.infer<typeof insertQRScanSchema>;\nexport type InsertPromotion = z.infer<typeof insertPromotionSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type ExternalTransaction = typeof externalTransactions.$inferSelect;\nexport type InsertExternalTransaction = z.infer<typeof insertExternalTransactionSchema>;\n","size_bytes":15326},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Scan from \"@/pages/scan\";\nimport MyCode from \"@/pages/my-code\";\nimport Rewards from \"@/pages/rewards\";\nimport Profile from \"@/pages/profile\";\nimport Admin from \"@/pages/admin\";\nimport Leaderboard from \"@/pages/leaderboard\";\nimport CompleteProfile from \"@/pages/complete-profile\";\nimport Signup from \"@/pages/signup\";\nimport Login from \"@/pages/login\";\nimport ForgotPassword from \"@/pages/forgot-password\";\nimport ResetPassword from \"@/pages/reset-password\";\nimport Developer from \"@/pages/developer\";\nimport TransactionHistory from \"@/pages/transaction-history\";\nimport { AnimationProvider, useAnimation } from \"@/contexts/AnimationContext\";\nimport PointsGainedAnimation from \"@/components/PointsGainedAnimation\";\nimport TierUpgradeAnimation from \"@/components/TierUpgradeAnimation\";\n\nfunction AnimationOverlay() {\n  const { animationState, hidePointsGained, hideTierUpgrade } = useAnimation();\n  \n  return (\n    <>\n      <PointsGainedAnimation\n        points={animationState.pointsGained.points}\n        isVisible={animationState.pointsGained.isVisible}\n        onComplete={hidePointsGained}\n      />\n      <TierUpgradeAnimation\n        newTier={animationState.tierUpgrade.newTier}\n        isVisible={animationState.tierUpgrade.isVisible}\n        onComplete={hideTierUpgrade}\n      />\n    </>\n  );\n}\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading ? (\n        <Route path=\"*\" component={Landing} />\n      ) : !isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Signup} />\n          <Route path=\"/signup\" component={Signup} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/forgot-password\" component={ForgotPassword} />\n          <Route path=\"/reset-password\" component={ResetPassword} />\n          <Route component={Signup} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/scan\" component={Scan} />\n          <Route path=\"/my-code\" component={MyCode} />\n          <Route path=\"/leaderboard\" component={Leaderboard} />\n          <Route path=\"/rewards\" component={Rewards} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/transaction-history\" component={TransactionHistory} />\n          <Route path=\"/admin\" component={Admin} />\n          <Route path=\"/developer\" component={Developer} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AnimationProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n          <AnimationOverlay />\n        </TooltipProvider>\n      </AnimationProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3215},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(0, 0%, 11%);\n  --muted: hsl(0, 0%, 96%);\n  --muted-foreground: hsl(0, 0%, 48%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(0, 0%, 11%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(0, 0%, 11%);\n  --border: hsl(0, 0%, 88%);\n  --input: hsl(0, 0%, 92%);\n  --primary: hsl(25, 100%, 48%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(49, 100%, 50%);\n  --secondary-foreground: hsl(0, 0%, 11%);\n  --accent: hsl(49, 100%, 50%);\n  --accent-foreground: hsl(0, 0%, 11%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --ring: hsl(25, 100%, 48%);\n  --radius: 0.5rem;\n  \n  /* Hi-Vis Industrial Colors */\n  --hivis-orange: hsl(25, 100%, 48%);        /* Orange #f58b00 */\n  --hivis-yellow: hsl(49, 100%, 50%);        /* Safety Yellow #FFD500 */\n  --hivis-charcoal: hsl(0, 0%, 11%);         /* Charcoal Black #1C1C1C */\n  --hivis-concrete: hsl(0, 0%, 48%);         /* Concrete Grey #7A7A7A */\n  --hivis-white: hsl(0, 0%, 100%);           /* Clean White #FFFFFF */\n}\n\n.dark {\n  --background: hsl(0, 0%, 11%);\n  --foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 18%);\n  --muted-foreground: hsl(0, 0%, 48%);\n  --popover: hsl(0, 0%, 11%);\n  --popover-foreground: hsl(0, 0%, 100%);\n  --card: hsl(0, 0%, 11%);\n  --card-foreground: hsl(0, 0%, 100%);\n  --border: hsl(0, 0%, 24%);\n  --input: hsl(0, 0%, 18%);\n  --primary: hsl(25, 100%, 48%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(49, 100%, 50%);\n  --secondary-foreground: hsl(0, 0%, 11%);\n  --accent: hsl(49, 100%, 50%);\n  --accent-foreground: hsl(0, 0%, 11%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --ring: hsl(25, 100%, 48%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .safety-stripes {\n    background: repeating-linear-gradient(\n      45deg,\n      hsl(49, 100%, 50%),\n      hsl(49, 100%, 50%) 10px,\n      hsl(25, 100%, 48%) 10px,\n      hsl(25, 100%, 48%) 20px\n    );\n  }\n  \n  .gradient-orange {\n    background: linear-gradient(135deg, hsl(25, 100%, 48%) 0%, hsl(49, 100%, 50%) 100%);\n  }\n  \n  .gradient-industrial {\n    background: linear-gradient(135deg, hsl(0, 0%, 11%) 0%, hsl(0, 0%, 48%) 50%, hsl(25, 100%, 48%) 100%);\n  }\n  \n  .card-shadow {\n    box-shadow: 0 4px 6px -1px hsla(25, 100%, 48%, 0.1), 0 2px 4px -1px hsla(25, 100%, 48%, 0.06);\n  }\n  \n  .card-shadow-concrete {\n    box-shadow: 0 8px 16px -4px hsla(0, 0%, 48%, 0.15), 0 4px 8px -2px hsla(0, 0%, 48%, 0.1);\n  }\n  \n  .pulse-orange {\n    animation: pulse-orange 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n  \n  .pulse-yellow {\n    animation: pulse-yellow 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n  \n  @keyframes pulse-orange {\n    0%, 100% {\n      opacity: 1;\n    }\n    50% {\n      opacity: .7;\n    }\n  }\n  \n  @keyframes pulse-yellow {\n    0%, 100% {\n      opacity: 1;\n    }\n    50% {\n      opacity: .6;\n    }\n  }\n}\n","size_bytes":3104},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AppExclusiveRewards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star, Clock, Gift, Image as ImageIcon } from \"lucide-react\";\nimport { AppExclusiveReward } from \"@shared/schema\";\n\ninterface AppExclusiveRewardsProps {\n  rewards: AppExclusiveReward[];\n  onRedeem?: (rewardId: string) => void;\n}\n\nexport default function AppExclusiveRewards({ rewards, onRedeem }: AppExclusiveRewardsProps) {\n  if (!rewards || rewards.length === 0) {\n    return null;\n  }\n\n  const formatTimeRemaining = (expiresAt: string) => {\n    const now = new Date();\n    const expiry = new Date(expiresAt);\n    const diffMs = expiry.getTime() - now.getTime();\n    const days = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    \n    if (days > 0) return `${days}d ${hours}h left`;\n    if (hours > 0) return `${hours}h left`;\n    return 'Expires soon';\n  };\n\n  return (\n    <section className=\"px-6 py-4\">\n      <div className=\"flex items-center gap-2 mb-4\">\n        <Star className=\"w-5 h-5 text-yellow-400\" />\n        <h3 className=\"text-white text-lg font-semibold\">App Exclusive Rewards</h3>\n        <Badge className=\"bg-yellow-400 text-slate-800 text-xs font-bold\">EXCLUSIVE</Badge>\n      </div>\n      \n      <div className=\"space-y-3\">\n        {rewards.map((reward) => (\n          <Card key={reward.id} className=\"bg-white border border-slate-200\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-16 h-16 bg-slate-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  {reward.imageUrl ? (\n                    <img \n                      src={reward.imageUrl} \n                      alt={reward.title}\n                      className=\"w-full h-full object-cover rounded-lg\"\n                      onError={(e) => {\n                        const target = e.target as HTMLImageElement;\n                        target.style.display = 'none';\n                        const fallback = target.nextElementSibling as HTMLDivElement;\n                        if (fallback) fallback.style.display = 'flex';\n                      }}\n                    />\n                  ) : null}\n                  <div className={`w-full h-full ${reward.imageUrl ? 'hidden' : 'flex'} items-center justify-center`}>\n                    <Gift className=\"w-6 h-6 text-orange-500\" />\n                  </div>\n                </div>\n\n                <div className=\"flex-1\">\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <div>\n                      <h4 className=\"text-slate-800 font-bold text-base\">{reward.title}</h4>\n                      <p className=\"text-slate-600 text-sm font-medium\">{reward.description}</p>\n                    </div>\n                    {reward.isLimitedTime && reward.expiresAt && (\n                      <Badge variant=\"outline\" className=\"border-red-400 text-red-400 text-xs\">\n                        <Clock className=\"w-3 h-3 mr-1\" />\n                        {formatTimeRemaining(reward.expiresAt)}\n                      </Badge>\n                    )}\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"text-orange-600 font-bold text-base\">\n                        {reward.pointsCost} points\n                      </div>\n                      {reward.originalPrice && (\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-slate-500 text-xs line-through\">\n                            {reward.originalPrice}\n                          </span>\n                          {reward.savingsText && (\n                            <span className=\"text-green-600 text-xs font-semibold\">\n                              {reward.savingsText}\n                            </span>\n                          )}\n                        </div>\n                      )}\n                    </div>\n\n                    <Button \n                      size=\"sm\" \n                      className=\"bg-orange-500 hover:bg-orange-600 text-white font-semibold\"\n                      onClick={() => onRedeem?.(reward.id)}\n                    >\n                      Redeem Now\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </section>\n  );\n}","size_bytes":4655},"client/src/components/DailyStreakTracker.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Flame, Gift, Star } from \"lucide-react\";\n\ninterface DailyStreakTrackerProps {\n  currentStreak: number;\n  streakRewardEarned: boolean;\n}\n\nexport default function DailyStreakTracker({ currentStreak, streakRewardEarned }: DailyStreakTrackerProps) {\n  const targetStreak = 7;\n  const progressPercentage = Math.min((currentStreak / targetStreak) * 100, 100);\n\n  return (\n    <Card className=\"bg-slate-700 border-slate-600\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-2\">\n            <Flame className=\"w-5 h-5 text-orange-500\" />\n            <h3 className=\"text-white font-semibold\">Daily Streak</h3>\n          </div>\n          {streakRewardEarned ? (\n            <Badge className=\"bg-green-500 hover:bg-green-600\">\n              <Star className=\"w-3 h-3 mr-1\" />\n              Reward Earned!\n            </Badge>\n          ) : (\n            <Badge variant=\"outline\" className=\"border-orange-500 text-orange-500\">\n              {currentStreak}/{targetStreak} days\n            </Badge>\n          )}\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"space-y-3 mb-4\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-slate-300\">Progress</span>\n            <span className=\"text-orange-400 font-medium\">{currentStreak}/{targetStreak} days</span>\n          </div>\n          <Progress \n            value={progressPercentage} \n            className=\"h-3 bg-slate-600\"\n          />\n          <div className=\"flex justify-between text-xs text-slate-400\">\n            <span>Start</span>\n            <span>Free Large Drink</span>\n          </div>\n        </div>\n\n        {/* Progress Description */}\n        <div className=\"text-center\">\n          {currentStreak === 0 ? (\n            <p className=\"text-slate-300 text-sm\">\n              Make a purchase today to start your streak!\n            </p>\n          ) : currentStreak < targetStreak ? (\n            <p className=\"text-slate-300 text-sm\">\n              {targetStreak - currentStreak} more day{targetStreak - currentStreak !== 1 ? 's' : ''} for a <span className=\"text-orange-400 font-semibold\">free large drink</span>!\n            </p>\n          ) : streakRewardEarned ? (\n            <p className=\"text-green-400 text-sm font-medium\">\n              🎉 You've earned a free large drink! Check your rewards.\n            </p>\n          ) : (\n            <p className=\"text-orange-400 text-sm font-medium\">\n              7-day streak complete! Free large drink reward pending.\n            </p>\n          )}\n        </div>\n\n        {/* Reward Info */}\n        {!streakRewardEarned && (\n          <div className=\"mt-4 bg-gradient-to-r from-orange-500/10 to-yellow-500/10 rounded-lg p-3 border border-orange-500/20\">\n            <div className=\"flex items-center gap-2 text-orange-400\">\n              <Gift className=\"w-4 h-4\" />\n              <span className=\"text-xs font-medium\">\n                Purchase on 7 consecutive days to earn a FREE large drink!\n              </span>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3350},"client/src/components/LoyaltyProgress.tsx":{"content":"interface LoyaltyProgressProps {\n  tier: string;\n  points: number;\n}\n\nexport default function LoyaltyProgress({ tier, points }: LoyaltyProgressProps) {\n  const getTierInfo = (currentTier: string, currentPoints: number) => {\n    switch (currentTier) {\n      case \"apprentice\":\n        return {\n          current: \"Apprentice\",\n          next: \"Tradie\",\n          pointsNeeded: 500 - currentPoints,\n          progress: (currentPoints / 500) * 100,\n          maxed: false\n        };\n      case \"tradie\":\n        return {\n          current: \"Tradie\",\n          next: \"Foreman\",\n          pointsNeeded: 1000 - currentPoints,\n          progress: ((currentPoints - 500) / 500) * 100,\n          maxed: false\n        };\n      case \"foreman\":\n        return {\n          current: \"Foreman\",\n          next: \"Max Level\",\n          pointsNeeded: 0,\n          progress: 100,\n          maxed: true\n        };\n      default:\n        return {\n          current: \"Apprentice\",\n          next: \"Tradie\",\n          pointsNeeded: 500 - currentPoints,\n          progress: (currentPoints / 500) * 100,\n          maxed: false\n        };\n    }\n  };\n\n  const tierInfo = getTierInfo(tier, points);\n\n  return (\n    <div className=\"bg-white/20 rounded-xl p-4\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <span className=\"font-semibold\">{tierInfo.current} Level</span>\n        {!tierInfo.maxed && (\n          <span className=\"text-sm\">\n            {tierInfo.pointsNeeded} points to {tierInfo.next}\n          </span>\n        )}\n      </div>\n      \n      <div className=\"w-full bg-white/30 rounded-full h-3 mb-2\">\n        <div \n          className=\"bg-white h-3 rounded-full transition-all duration-500 ease-out\"\n          style={{ width: `${Math.min(tierInfo.progress, 100)}%` }}\n        ></div>\n      </div>\n      \n      <div className=\"flex justify-between text-xs\">\n        <span>Apprentice</span>\n        <span className={tier === \"tradie\" ? \"font-bold\" : \"\"}>Tradie</span>\n        <span className={tier === \"foreman\" ? \"font-bold\" : \"\"}>Foreman</span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2085},"client/src/components/Navigation.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Home, QrCode, Gift, User, Trophy, Shield } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n\n  const isActive = (path: string) => location === path;\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-slate-800 border-t-2 border-orange-500\">\n      <div className=\"flex\">\n        <Link href=\"/\" className=\"flex-1\">\n          <button className=\"w-full py-3 px-2 text-center\">\n            <Home className={`w-4 h-4 mx-auto mb-1 ${\n              isActive('/') ? 'text-orange-500' : 'text-slate-400'\n            }`} />\n            <span className={`text-xs font-medium ${\n              isActive('/') ? 'text-orange-500' : 'text-slate-400'\n            }`}>\n              Home\n            </span>\n          </button>\n        </Link>\n        \n        <Link href=\"/rewards\" className=\"flex-1\">\n          <button className=\"w-full py-3 px-2 text-center\">\n            <Gift className={`w-4 h-4 mx-auto mb-1 ${\n              isActive('/rewards') ? 'text-orange-500' : 'text-slate-400'\n            }`} />\n            <span className={`text-xs font-medium ${\n              isActive('/rewards') ? 'text-orange-500' : 'text-slate-400'\n            }`}>\n              Rewards\n            </span>\n          </button>\n        </Link>\n        \n        <Link href=\"/my-code\" className=\"flex-1\">\n          <button className=\"w-full py-3 px-2 text-center\">\n            <QrCode className={`w-4 h-4 mx-auto mb-1 ${\n              isActive('/my-code') ? 'text-orange-500' : 'text-slate-400'\n            }`} />\n            <span className={`text-xs font-medium ${\n              isActive('/my-code') ? 'text-orange-500' : 'text-slate-400'\n            }`}>\n              My Code\n            </span>\n          </button>\n        </Link>\n        \n        <Link href=\"/leaderboard\" className=\"flex-1\">\n          <button className=\"w-full py-3 px-2 text-center\">\n            <Trophy className={`w-4 h-4 mx-auto mb-1 ${\n              isActive('/leaderboard') ? 'text-orange-500' : 'text-slate-400'\n            }`} />\n            <span className={`text-xs font-medium ${\n              isActive('/leaderboard') ? 'text-orange-500' : 'text-slate-400'\n            }`}>\n              Leaderboard\n            </span>\n          </button>\n        </Link>\n        \n        <Link href=\"/profile\" className=\"flex-1\">\n          <button className=\"w-full py-3 px-2 text-center\">\n            <User className={`w-4 h-4 mx-auto mb-1 ${\n              isActive('/profile') ? 'text-orange-500' : 'text-slate-400'\n            }`} />\n            <span className={`text-xs font-medium ${\n              isActive('/profile') ? 'text-orange-500' : 'text-slate-400'\n            }`}>\n              Profile\n            </span>\n          </button>\n        </Link>\n        \n        {user?.isAdmin && (\n          <Link href=\"/admin\" className=\"flex-1\">\n            <button className=\"w-full py-3 px-2 text-center\">\n              <Shield className={`w-4 h-4 mx-auto mb-1 ${\n                isActive('/admin') ? 'text-orange-500' : 'text-slate-400'\n              }`} />\n              <span className={`text-xs font-medium ${\n                isActive('/admin') ? 'text-orange-500' : 'text-slate-400'\n              }`}>\n                Admin\n              </span>\n            </button>\n          </Link>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3486},"client/src/components/PhotoReel.tsx":{"content":"import { PhotoReelItem } from \"@shared/schema\";\nimport useEmblaCarousel from 'embla-carousel-react';\nimport { useCallback } from 'react';\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\ninterface PhotoReelProps {\n  items: PhotoReelItem[];\n}\n\nexport default function PhotoReel({ items }: PhotoReelProps) {\n  const [emblaRef, emblaApi] = useEmblaCarousel({ loop: true });\n\n  const scrollPrev = useCallback(() => {\n    if (emblaApi) emblaApi.scrollPrev();\n  }, [emblaApi]);\n\n  const scrollNext = useCallback(() => {\n    if (emblaApi) emblaApi.scrollNext();\n  }, [emblaApi]);\n\n  if (!items || items.length === 0) {\n    return null;\n  }\n\n  return (\n    <section className=\"w-full relative\">\n      <div className=\"overflow-hidden\" ref={emblaRef}>\n        <div className=\"flex\">\n          {items.map((item) => (\n            <div \n              key={item.id} \n              className=\"min-w-full flex-shrink-0 relative\"\n            >\n              <div className=\"w-full h-48 sm:h-56 md:h-64 overflow-hidden\">\n                <img \n                  src={item.imageUrl} \n                  alt={item.title}\n                  className=\"w-full h-full object-cover object-top\"\n                />\n              </div>\n              <div className=\"absolute inset-0 bg-gradient-to-t from-black/90 via-black/30 to-transparent\" />\n              <div className=\"absolute bottom-0 left-0 right-0 p-4 sm:p-6 md:p-8\">\n                <h4 className=\"text-white font-bold text-xl sm:text-2xl md:text-3xl mb-2 sm:mb-3 drop-shadow-2xl\">{item.title}</h4>\n                {item.description && (\n                  <p className=\"text-white text-sm sm:text-base md:text-lg font-semibold drop-shadow-xl\">{item.description}</p>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {/* Navigation Buttons - Only show if more than 1 item */}\n      {items.length > 1 && (\n        <>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"absolute top-1/2 left-4 transform -translate-y-1/2 bg-white/90 hover:bg-white border-white/50 shadow-lg z-10\"\n            onClick={scrollPrev}\n            data-testid=\"carousel-prev\"\n          >\n            <ChevronLeft className=\"h-4 w-4 text-gray-800\" />\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"absolute top-1/2 right-4 transform -translate-y-1/2 bg-white/90 hover:bg-white border-white/50 shadow-lg z-10\"\n            onClick={scrollNext}\n            data-testid=\"carousel-next\"\n          >\n            <ChevronRight className=\"h-4 w-4 text-gray-800\" />\n          </Button>\n        </>\n      )}\n    </section>\n  );\n}","size_bytes":2770},"client/src/components/PunchCard.tsx":{"content":"import { HardHat } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface PunchCardProps {\n  progress: number; // 0-5\n}\n\nexport default function PunchCard({ progress }: PunchCardProps) {\n  const totalSlots = 5;\n  const completed = Math.min(progress, totalSlots);\n\n  return (\n    <Card className=\"bg-white border-slate-200 card-shadow\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-slate-800\">Digital Punch Card</h3>\n          <div className=\"safety-stripes w-8 h-4 rounded\"></div>\n        </div>\n        \n        <p className=\"text-slate-600 mb-4\">Collect 5 punches for a free large drink!</p>\n        \n        {/* Punch Card Grid */}\n        <div className=\"grid grid-cols-5 gap-3 mb-4\">\n          {Array.from({ length: totalSlots }, (_, index) => {\n            const isCompleted = index < completed;\n            \n            return (\n              <div\n                key={index}\n                className={`aspect-square rounded-lg flex items-center justify-center border-2 ${\n                  isCompleted\n                    ? \"bg-orange-500 border-orange-500\"\n                    : \"bg-slate-100 border-slate-300 border-dashed\"\n                }`}\n              >\n                {isCompleted && (\n                  <HardHat className=\"text-white w-5 h-5\" />\n                )}\n              </div>\n            );\n          })}\n        </div>\n        \n        <div className=\"text-center\">\n          <p className=\"text-orange-500 font-semibold\">\n            {completed}/{totalSlots} punches collected\n          </p>\n          <p className=\"text-sm text-slate-600\">\n            {completed === totalSlots \n              ? \"🎉 Punch card complete! Free drink available!\"\n              : `${totalSlots - completed} more for your free drink!`\n            }\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1974},"client/src/components/QRCodeGenerator.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { QrCode, RefreshCw, Copy, CheckCircle } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface QRCodeGeneratorProps {\n  userId: string;\n  userTier: string;\n  totalPoints: number;\n}\n\nexport function QRCodeGenerator({ userId, userTier, totalPoints }: QRCodeGeneratorProps) {\n  const [qrCodeData, setQrCodeData] = useState<string>('');\n  const [qrCodeSvg, setQrCodeSvg] = useState<string>('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const { toast } = useToast();\n\n  // Generate QR code data with user info and timestamp\n  const generateQRCode = () => {\n    setIsGenerating(true);\n    \n    const qrData = {\n      userId,\n      timestamp: Date.now(),\n      tier: userTier,\n      points: totalPoints,\n      type: 'hi-vis-customer',\n      // Add random token for security\n      token: Math.random().toString(36).substring(2, 15)\n    };\n\n    const qrString = JSON.stringify(qrData);\n    setQrCodeData(qrString);\n    \n    // Generate SVG QR code\n    generateQRCodeSVG(qrString);\n    \n    setTimeout(() => setIsGenerating(false), 500);\n  };\n\n  const generateQRCodeSVG = (data: string) => {\n    // Simple QR code SVG generator (placeholder - in production use a real QR library)\n    const size = 200;\n    const modules = 25; // QR code grid size\n    const moduleSize = size / modules;\n    \n    let svg = `<svg width=\"${size}\" height=\"${size}\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"${size}\" height=\"${size}\" fill=\"white\"/>`;\n    \n    // Generate pseudo-random pattern based on data hash\n    let hash = 0;\n    for (let i = 0; i < data.length; i++) {\n      hash = ((hash << 5) - hash + data.charCodeAt(i)) & 0xffffffff;\n    }\n    \n    for (let y = 0; y < modules; y++) {\n      for (let x = 0; x < modules; x++) {\n        // Create finder patterns (corners)\n        const isFinderPattern = \n          (x < 7 && y < 7) || \n          (x >= modules - 7 && y < 7) || \n          (x < 7 && y >= modules - 7);\n        \n        if (isFinderPattern) {\n          if ((x === 0 || x === 6 || y === 0 || y === 6) ||\n              (x >= 2 && x <= 4 && y >= 2 && y <= 4)) {\n            svg += `<rect x=\"${x * moduleSize}\" y=\"${y * moduleSize}\" \n                     width=\"${moduleSize}\" height=\"${moduleSize}\" fill=\"black\"/>`;\n          }\n        } else {\n          // Generate data pattern\n          const seed = (hash + x * 31 + y * 17) % 100;\n          if (seed > 50) {\n            svg += `<rect x=\"${x * moduleSize}\" y=\"${y * moduleSize}\" \n                     width=\"${moduleSize}\" height=\"${moduleSize}\" fill=\"black\"/>`;\n          }\n        }\n      }\n    }\n    \n    svg += '</svg>';\n    setQrCodeSvg(svg);\n  };\n\n  const copyQRData = async () => {\n    try {\n      await navigator.clipboard.writeText(qrCodeData);\n      setCopied(true);\n      toast({\n        title: \"QR Code Data Copied\",\n        description: \"QR code data copied to clipboard\",\n      });\n      setTimeout(() => setCopied(false), 2000);\n    } catch (error) {\n      toast({\n        title: \"Copy Failed\",\n        description: \"Could not copy QR code data\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Generate initial QR code\n  useEffect(() => {\n    generateQRCode();\n  }, [userId, userTier, totalPoints]);\n\n  const getTierColor = (tier: string) => {\n    switch (tier.toLowerCase()) {\n      case 'foreman': return 'text-yellow-400';\n      case 'tradie': return 'text-blue-400';\n      default: return 'text-green-400';\n    }\n  };\n\n  return (\n    <Card className=\"bg-slate-700 border-slate-600\">\n      <CardHeader>\n        <CardTitle className=\"text-white flex items-center\">\n          <QrCode className=\"w-5 h-5 mr-2 text-orange-500\" />\n          Your Personal QR Code\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"text-center\">\n          <div className=\"bg-white p-4 rounded-lg inline-block mb-4\">\n            {qrCodeSvg ? (\n              <div dangerouslySetInnerHTML={{ __html: qrCodeSvg }} />\n            ) : (\n              <div className=\"w-48 h-48 bg-slate-200 rounded flex items-center justify-center\">\n                <QrCode className=\"w-16 h-16 text-slate-400\" />\n              </div>\n            )}\n          </div>\n          \n          <div className=\"space-y-2 text-sm\">\n            <div className=\"text-white\">\n              <span className=\"text-slate-400\">Tier: </span>\n              <span className={getTierColor(userTier)}>{userTier}</span>\n            </div>\n            <div className=\"text-white\">\n              <span className=\"text-slate-400\">Points: </span>\n              <span className=\"text-orange-400\">{totalPoints}</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-3\">\n          <div className=\"bg-slate-800 p-3 rounded-lg\">\n            <h4 className=\"text-white font-semibold mb-2\">How to Use:</h4>\n            <ul className=\"text-slate-300 text-sm space-y-1\">\n              <li>• Open this QR code at the vending machine</li>\n              <li>• Select \"Scan QR Code\" on the Nayax DOT screen</li>\n              <li>• Hold your phone up to the scanner</li>\n              <li>• Get instant promotions and bonus points!</li>\n            </ul>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-3\">\n            <Button\n              onClick={generateQRCode}\n              disabled={isGenerating}\n              className=\"bg-orange-600 hover:bg-orange-700 text-white\"\n            >\n              {isGenerating ? (\n                <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n              ) : (\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n              )}\n              Refresh Code\n            </Button>\n\n            <Button\n              onClick={copyQRData}\n              className=\"bg-slate-600 hover:bg-slate-500 text-white\"\n            >\n              {copied ? (\n                <CheckCircle className=\"w-4 h-4 mr-2 text-green-400\" />\n              ) : (\n                <Copy className=\"w-4 h-4 mr-2\" />\n              )}\n              {copied ? \"Copied!\" : \"Copy Data\"}\n            </Button>\n          </div>\n\n          <div className=\"bg-orange-100 border border-orange-400 p-3 rounded-lg\">\n            <p className=\"text-orange-800 text-sm font-semibold\">\n              🎯 Show this QR code at any Hi-Vis vending machine to unlock exclusive promotions \n              and earn bonus points based on your loyalty tier!\n            </p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6738},"client/src/components/QRScanner.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, Camera } from \"lucide-react\";\n\ninterface QRScannerProps {\n  onScan: (data: string) => void;\n  onClose: () => void;\n  isLoading?: boolean;\n}\n\nexport default function QRScanner({ onScan, onClose, isLoading }: QRScannerProps) {\n  const [hasPermission, setHasPermission] = useState<boolean | null>(null);\n\n  useEffect(() => {\n    // Request camera permission\n    const requestPermission = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n        setHasPermission(true);\n        // Stop the stream for now\n        stream.getTracks().forEach(track => track.stop());\n      } catch (error) {\n        setHasPermission(false);\n      }\n    };\n\n    requestPermission();\n  }, []);\n\n  // Simulate QR scanning for demo purposes\n  const simulateScan = () => {\n    // Generate a simulated Hi-Vis machine QR code\n    const machineId = `HIVIS_MACHINE_${Math.floor(Math.random() * 100).toString().padStart(3, '0')}`;\n    onScan(machineId);\n  };\n\n  if (hasPermission === null) {\n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center\">\n        <div className=\"text-center text-white\">\n          <Camera className=\"w-12 h-12 mx-auto mb-4 animate-pulse\" />\n          <p>Requesting camera permission...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (hasPermission === false) {\n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center\">\n        <div className=\"bg-slate-800 rounded-lg p-6 mx-4 text-center\">\n          <Camera className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n          <h3 className=\"text-white text-lg font-semibold mb-2\">Camera Access Required</h3>\n          <p className=\"text-slate-300 mb-4\">\n            Please allow camera access to scan QR codes\n          </p>\n          <Button onClick={onClose} className=\"bg-orange-500 hover:bg-orange-600 text-slate-800\">\n            Close\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black z-50\">\n      <div className=\"flex flex-col h-full\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 bg-slate-800\">\n          <h2 className=\"text-white text-lg font-semibold\">Scan QR Code</h2>\n          <Button\n            onClick={onClose}\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"text-white hover:bg-slate-700\"\n            disabled={isLoading}\n          >\n            <X className=\"w-5 h-5\" />\n          </Button>\n        </div>\n\n        {/* Scanner Area */}\n        <div className=\"flex-1 relative bg-black flex items-center justify-center\">\n          {/* Demo scanner frame */}\n          <div className=\"relative\">\n            <div className=\"w-64 h-64 border-4 border-orange-500 rounded-xl relative\">\n              {/* Corner indicators */}\n              <div className=\"absolute top-0 left-0 w-8 h-8 border-t-4 border-l-4 border-yellow-400 rounded-tl-xl\"></div>\n              <div className=\"absolute top-0 right-0 w-8 h-8 border-t-4 border-r-4 border-yellow-400 rounded-tr-xl\"></div>\n              <div className=\"absolute bottom-0 left-0 w-8 h-8 border-b-4 border-l-4 border-yellow-400 rounded-bl-xl\"></div>\n              <div className=\"absolute bottom-0 right-0 w-8 h-8 border-b-4 border-r-4 border-yellow-400 rounded-br-xl\"></div>\n              \n              {/* Scanner content */}\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                {isLoading ? (\n                  <div className=\"text-center\">\n                    <div className=\"w-8 h-8 border-4 border-orange-500 border-t-transparent rounded-full animate-spin mx-auto mb-2\"></div>\n                    <p className=\"text-white text-sm\">Processing...</p>\n                  </div>\n                ) : (\n                  <div className=\"text-center\">\n                    <Camera className=\"w-12 h-12 text-white mx-auto mb-2\" />\n                    <p className=\"text-white text-sm\">Point at QR code</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Instructions */}\n        <div className=\"p-4 bg-slate-800\">\n          <p className=\"text-white text-center text-sm mb-4\">\n            Hold steady and align QR code within frame\n          </p>\n          \n          {/* Demo button for testing */}\n          <Button \n            onClick={simulateScan}\n            disabled={isLoading}\n            className=\"w-full bg-orange-500 hover:bg-orange-600 text-slate-800 font-semibold\"\n          >\n            {isLoading ? \"Processing...\" : \"Simulate Scan (Demo)\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4850},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user && !error,\n  };\n}\n","size_bytes":274},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function capitalizeName(name: string): string {\n  if (!name || !name.trim()) return name;\n  return name.trim()\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ');\n}\n","size_bytes":396},"client/src/pages/admin.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { HardHat, Users, Activity, Gift, Bell, Link2, DollarSign, Target, Clock, ArrowLeft, Send, Play, Square, Wifi, WifiOff, Upload, CheckCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { capitalizeName } from \"@/lib/utils\";\n\nexport default function Admin() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  \n  // Notification form state\n  const [notificationForm, setNotificationForm] = useState({\n    title: \"\",\n    message: \"\",\n    type: \"promotion\"\n  });\n\n  // Moma sync state\n  const [syncStatus, setSyncStatus] = useState({\n    isRunning: false,\n    lastSync: null,\n    connectionStatus: \"unknown\"\n  });\n\n  // CSV and redemption state\n  const [csvData, setCsvData] = useState(\"\");\n  const [redemptionCode, setRedemptionCode] = useState(\"\");\n\n  // AWS sync state\n  const [awsStatus, setAwsStatus] = useState({\n    isRunning: false,\n    bucketName: \"\",\n    connectionStatus: \"unknown\"\n  });\n\n  // Query admin stats\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/admin/stats\"],\n    enabled: isAuthenticated && user?.isAdmin,\n  });\n\n  // Query all users\n  const { data: allUsers = [] } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    enabled: isAuthenticated && user?.isAdmin,\n  });\n\n  // Query unprocessed transactions\n  const { data: unprocessedTransactions = [] } = useQuery({\n    queryKey: [\"/api/admin/unprocessed-transactions\"],\n    enabled: isAuthenticated && user?.isAdmin,\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  // Mutation for sending notifications\n  const sendNotificationMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/send-notification\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Notifications Sent\",\n        description: \"Push notifications have been sent to all users\",\n      });\n      setNotificationForm({ title: \"\", message: \"\", type: \"promotion\" });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Send\",\n        description: error.message || \"Could not send notifications\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation for matching transactions\n  const matchTransactionMutation = useMutation({\n    mutationFn: async ({ externalTransactionId, userId }: { externalTransactionId: string; userId: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/match-transaction\", { externalTransactionId, userId });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/unprocessed-transactions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n      toast({\n        title: \"Transaction Matched\",\n        description: \"Transaction has been matched to user and points awarded\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Matching Failed\",\n        description: error.message || \"Could not match transaction\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Moma sync mutations\n  const startSyncMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/admin/start-moma-sync\", {});\n      return response.json();\n    },\n    onSuccess: () => {\n      setSyncStatus(prev => ({ ...prev, isRunning: true }));\n      toast({\n        title: \"Moma Sync Started\",\n        description: \"Now automatically checking for new transactions every 30 seconds\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Sync Failed\",\n        description: error.message || \"Could not start Moma sync\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const stopSyncMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/admin/stop-moma-sync\", {});\n      return response.json();\n    },\n    onSuccess: () => {\n      setSyncStatus(prev => ({ ...prev, isRunning: false }));\n      toast({\n        title: \"Moma Sync Stopped\",\n        description: \"Automatic transaction checking has been disabled\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Stop Failed\",\n        description: error.message || \"Could not stop Moma sync\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const testConnectionMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/admin/test-moma-connection\", {});\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setSyncStatus(prev => ({ ...prev, connectionStatus: data.success ? \"connected\" : \"failed\" }));\n      toast({\n        title: data.success ? \"Connection Success\" : \"Connection Failed\",\n        description: data.message,\n        variant: data.success ? \"default\" : \"destructive\",\n      });\n    },\n    onError: (error) => {\n      setSyncStatus(prev => ({ ...prev, connectionStatus: \"failed\" }));\n      toast({\n        title: \"Connection Test Failed\",\n        description: error.message || \"Could not test Moma connection\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // CSV upload mutation\n  const uploadCsvMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/admin/upload-csv\", { csvData });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCsvData(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/unprocessed-transactions\"] });\n      toast({\n        title: \"CSV Upload Complete\",\n        description: `Processed ${data.processed} transactions, ${data.errors} errors`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Upload Failed\",\n        description: error.message || \"Could not process CSV data\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Redemption code validation mutation\n  const validateCodeMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/admin/validate-redemption\", { redemptionCode });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setRedemptionCode(\"\");\n      if (data.valid) {\n        toast({\n          title: \"Valid Redemption Code!\",\n          description: `${data.reward} for ${data.customerName}`,\n        });\n      } else {\n        toast({\n          title: \"Invalid Code\",\n          description: data.message,\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Validation Failed\",\n        description: error.message || \"Could not validate redemption code\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // AWS sync mutations\n  const startAwsSyncMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/admin/aws-sync/start\", {});\n      return response.json();\n    },\n    onSuccess: () => {\n      setAwsStatus(prev => ({ ...prev, isRunning: true }));\n      toast({\n        title: \"AWS Sync Started\",\n        description: \"Automatic sync with AWS services is now active\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Start AWS Sync\",\n        description: error.message || \"Could not start AWS sync service\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const stopAwsSyncMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/admin/aws-sync/stop\", {});\n      return response.json();\n    },\n    onSuccess: () => {\n      setAwsStatus(prev => ({ ...prev, isRunning: false }));\n      toast({\n        title: \"AWS Sync Stopped\",\n        description: \"Automatic sync has been disabled\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Stop AWS Sync\",\n        description: error.message || \"Could not stop AWS sync service\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const testAwsConnectionMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/admin/aws-sync/test\", {});\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setAwsStatus(prev => ({ ...prev, connectionStatus: data.success ? \"connected\" : \"failed\" }));\n      toast({\n        title: data.success ? \"AWS Connection Successful\" : \"AWS Connection Failed\",\n        description: data.message,\n        variant: data.success ? \"default\" : \"destructive\",\n      });\n    },\n    onError: (error) => {\n      setAwsStatus(prev => ({ ...prev, connectionStatus: \"failed\" }));\n      toast({\n        title: \"AWS Connection Test Failed\",\n        description: error.message || \"Could not test AWS connection\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Redirect if not admin\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || !user?.isAdmin)) {\n      toast({\n        title: \"Access Denied\",\n        description: \"Admin access required\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 1000);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  if (isLoading || !user?.isAdmin) {\n    return (\n      <div className=\"min-h-screen bg-slate-800 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-orange-500 rounded-lg flex items-center justify-center mx-auto mb-4\">\n            <HardHat className=\"text-slate-800 w-8 h-8\" />\n          </div>\n          <p className=\"text-white\">Loading admin dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const handleSendNotification = () => {\n    if (!notificationForm.title.trim() || !notificationForm.message.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in both title and message\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    sendNotificationMutation.mutate(notificationForm);\n  };\n\n  // Construction industry notification templates\n  const notificationTemplates = [\n    {\n      title: \"Knock-off Deal's On!\",\n      message: \"End your shift with a cold drink! Use your loyalty points for 50% off all beverages until 5pm. 🏗️\",\n      type: \"promotion\"\n    },\n    {\n      title: \"Smoko Sorted!\",\n      message: \"Pre-smoko special: Buy any snack and get 20 bonus points! Perfect for your morning break. ☕\",\n      type: \"promotion\"\n    },\n    {\n      title: \"Safety First Rewards\",\n      message: \"Hard work deserves rewards! Check out your new loyalty tier and available rewards in the app. 👷‍♂️\",\n      type: \"achievement\"\n    },\n    {\n      title: \"Tool Down Time\",\n      message: \"Lunch break reminder: Don't forget to grab something from the Hi-Vis vending machine to fuel up! 🔧\",\n      type: \"reminder\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-slate-800\">\n      {/* Header */}\n      <header className=\"bg-slate-800 border-b-4 border-orange-500 sticky top-0 z-50\">\n        <div className=\"flex items-center justify-between px-4 py-3\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"text-slate-400 hover:text-white p-2\">\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n          </Link>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 bg-orange-500 rounded-lg flex items-center justify-center\">\n              <HardHat className=\"text-slate-800 w-6 h-6\" />\n            </div>\n            <div>\n              <h1 className=\"text-white font-bold text-lg\">Admin Dashboard</h1>\n              <p className=\"text-yellow-400 text-xs font-medium\">Hi-Vis Vending Control Center</p>\n            </div>\n          </div>\n          <div className=\"w-10\" /> {/* Spacer for centering */}\n        </div>\n      </header>\n\n      <main className=\"p-6 pb-20\">\n        {/* Stats Overview */}\n        <div className=\"mb-6\">\n          <h2 className=\"text-white text-xl font-semibold mb-4\">System Overview</h2>\n          <div className=\"grid grid-cols-2 lg:grid-cols-3 gap-4\">\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardContent className=\"p-4 text-center\">\n                <Users className=\"w-8 h-8 text-blue-400 mx-auto mb-2\" />\n                <p className=\"text-2xl font-bold text-white\">{stats?.totalUsers || 0}</p>\n                <p className=\"text-slate-300 text-sm\">Total Users</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardContent className=\"p-4 text-center\">\n                <Activity className=\"w-8 h-8 text-green-400 mx-auto mb-2\" />\n                <p className=\"text-2xl font-bold text-white\">{stats?.activeUsersToday || 0}</p>\n                <p className=\"text-slate-300 text-sm\">Active Today</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardContent className=\"p-4 text-center\">\n                <DollarSign className=\"w-8 h-8 text-yellow-400 mx-auto mb-2\" />\n                <p className=\"text-2xl font-bold text-white\">{stats?.totalTransactions || 0}</p>\n                <p className=\"text-slate-300 text-sm\">Transactions</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardContent className=\"p-4 text-center\">\n                <Target className=\"w-8 h-8 text-orange-400 mx-auto mb-2\" />\n                <p className=\"text-2xl font-bold text-white\">{stats?.totalPointsEarned || 0}</p>\n                <p className=\"text-slate-300 text-sm\">Points Earned</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardContent className=\"p-4 text-center\">\n                <Gift className=\"w-8 h-8 text-purple-400 mx-auto mb-2\" />\n                <p className=\"text-2xl font-bold text-white\">{stats?.pointsRedeemed || 0}</p>\n                <p className=\"text-slate-300 text-sm\">Points Redeemed</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardContent className=\"p-4 text-center\">\n                <Link2 className=\"w-8 h-8 text-green-500 mx-auto mb-2\" />\n                <p className=\"text-2xl font-bold text-white\">{stats?.activeMachines || 0}</p>\n                <p className=\"text-slate-300 text-sm\">Active Machines</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Admin Tabs */}\n        <Tabs defaultValue=\"notifications\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-5 bg-slate-700\">\n            <TabsTrigger value=\"notifications\" className=\"data-[state=active]:bg-orange-500 data-[state=active]:text-slate-800\">\n              <Bell className=\"w-4 h-4 mr-2\" />\n              Notifications\n            </TabsTrigger>\n            <TabsTrigger value=\"users\" className=\"data-[state=active]:bg-orange-500 data-[state=active]:text-slate-800\">\n              <Users className=\"w-4 h-4 mr-2\" />\n              Users\n            </TabsTrigger>\n            <TabsTrigger value=\"transactions\" className=\"data-[state=active]:bg-orange-500 data-[state=active]:text-slate-800\">\n              <Clock className=\"w-4 h-4 mr-2\" />\n              Transactions\n            </TabsTrigger>\n            <TabsTrigger value=\"moma\" className=\"data-[state=active]:bg-orange-500 data-[state=active]:text-slate-800\">\n              <Link2 className=\"w-4 h-4 mr-2\" />\n              Moma Sync\n            </TabsTrigger>\n            <TabsTrigger value=\"aws\" className=\"data-[state=active]:bg-blue-500 data-[state=active]:text-slate-800\">\n              <Wifi className=\"w-4 h-4 mr-2\" />\n              AWS Integration\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Notifications Tab */}\n          <TabsContent value=\"notifications\" className=\"space-y-6\">\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center\">\n                  <Bell className=\"w-5 h-5 mr-2 text-orange-500\" />\n                  Send Push Notification\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"title\" className=\"text-white\">Title</Label>\n                  <Input\n                    id=\"title\"\n                    value={notificationForm.title}\n                    onChange={(e) => setNotificationForm(prev => ({ ...prev, title: e.target.value }))}\n                    placeholder=\"e.g., Knock-off Deal's On!\"\n                    className=\"mt-1 bg-slate-800 border-slate-600 text-white\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"message\" className=\"text-white\">Message</Label>\n                  <Textarea\n                    id=\"message\"\n                    value={notificationForm.message}\n                    onChange={(e) => setNotificationForm(prev => ({ ...prev, message: e.target.value }))}\n                    placeholder=\"Write your message to all Hi-Vis app users...\"\n                    className=\"mt-1 bg-slate-800 border-slate-600 text-white\"\n                    rows={3}\n                  />\n                </div>\n\n                <Button\n                  onClick={handleSendNotification}\n                  disabled={sendNotificationMutation.isPending}\n                  className=\"w-full bg-orange-500 hover:bg-orange-600 text-slate-800 font-semibold\"\n                >\n                  <Send className=\"w-4 h-4 mr-2\" />\n                  {sendNotificationMutation.isPending ? \"Sending...\" : \"Send to All Users\"}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Notification Templates */}  \n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Quick Templates</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid gap-3\">\n                  {notificationTemplates.map((template, index) => (\n                    <Card key={index} className=\"bg-slate-800 border-slate-600\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <h4 className=\"font-semibold text-white\">{template.title}</h4>\n                          <Badge className=\"bg-orange-500 text-slate-800\">{template.type}</Badge>\n                        </div>\n                        <p className=\"text-slate-300 text-sm mb-3\">{template.message}</p>\n                        <Button\n                          size=\"sm\"\n                          onClick={() => setNotificationForm(template)}\n                          className=\"bg-slate-600 hover:bg-slate-500 text-white\"\n                        >\n                          Use Template\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Users Tab */}\n          <TabsContent value=\"users\" className=\"space-y-4\">\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">All Users ({allUsers.length})</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                  {allUsers.map((user: any) => (\n                    <Card key={user.id} className=\"bg-slate-800 border-slate-600\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex justify-between items-center\">\n                          <div>\n                            <p className=\"font-semibold text-white\">\n                              {capitalizeName(user.firstName)} {capitalizeName(user.lastName)}\n                            </p>\n                            <p className=\"text-slate-400 text-sm\">{user.email}</p>\n                            <p className=\"text-yellow-400 text-sm\">\n                              {user.totalPoints || 0} points • {user.loyaltyTier}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <Badge className=\"bg-green-600 text-white mb-1\">\n                              {user.referralCount || 0} referrals\n                            </Badge>\n                            {user.cardNumber && (\n                              <p className=\"text-xs text-slate-400\">Card: {user.cardNumber}</p>\n                            )}\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Transactions Tab */}\n          <TabsContent value=\"transactions\" className=\"space-y-4\">\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">\n                  Unprocessed Vending Machine Transactions ({unprocessedTransactions.length})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {unprocessedTransactions.length === 0 ? (\n                  <p className=\"text-slate-400 text-center py-8\">No unprocessed transactions</p>\n                ) : (\n                  <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                    {unprocessedTransactions.map((transaction: any) => (\n                      <Card key={transaction.id} className=\"bg-slate-800 border-slate-600\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex justify-between items-start\">\n                            <div className=\"flex-1\">\n                              <p className=\"font-semibold text-white\">\n                                ${(transaction.amount / 100).toFixed(2)} • {transaction.productName || 'Unknown Item'}\n                              </p>\n                              <p className=\"text-slate-400 text-sm\">\n                                Machine: {transaction.machineId} • {new Date(transaction.timestamp).toLocaleString()}\n                              </p>\n                              {transaction.cardNumber && (\n                                <p className=\"text-yellow-400 text-sm\">Card: {transaction.cardNumber}</p>\n                              )}\n                            </div>\n                            <div className=\"ml-4\">\n                              <select\n                                onChange={(e) => {\n                                  if (e.target.value) {\n                                    matchTransactionMutation.mutate({\n                                      externalTransactionId: transaction.id,\n                                      userId: e.target.value\n                                    });\n                                  }\n                                }}\n                                className=\"bg-slate-600 text-white text-xs p-1 rounded\"\n                                disabled={matchTransactionMutation.isPending}\n                              >\n                                <option value=\"\">Match to User</option>\n                                {allUsers.map((user: any) => (\n                                  <option key={user.id} value={user.id}>\n                                    {user.firstName} {user.lastName}\n                                  </option>\n                                ))}\n                              </select>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Moma Integration Tab */}\n          <TabsContent value=\"moma\" className=\"space-y-6\">\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center\">\n                  <Link2 className=\"w-5 h-5 mr-2 text-orange-500\" />\n                  Moma App Integration\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 bg-slate-800 rounded-lg\">\n                  <div>\n                    <h4 className=\"text-white font-semibold\">Auto-Sync Status</h4>\n                    <p className=\"text-slate-400 text-sm\">\n                      {syncStatus.isRunning \n                        ? \"Checking for new transactions every 30 seconds\" \n                        : \"Automatic sync is stopped\"}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    {syncStatus.isRunning ? (\n                      <Wifi className=\"w-6 h-6 text-green-400\" />\n                    ) : (\n                      <WifiOff className=\"w-6 h-6 text-slate-400\" />\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-4 p-4 bg-slate-800 rounded-lg\">\n                    <h4 className=\"text-white font-semibold\">CSV Upload</h4>\n                    <div className=\"space-y-2\">\n                      <Textarea\n                        placeholder=\"Paste CSV data here (date,amount,card_number,product)...\"\n                        value={csvData}\n                        onChange={(e) => setCsvData(e.target.value)}\n                        className=\"bg-slate-700 border-slate-600 text-white min-h-[100px]\"\n                      />\n                      <Button\n                        onClick={() => uploadCsvMutation.mutate()}\n                        disabled={uploadCsvMutation.isPending || !csvData.trim()}\n                        className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n                      >\n                        {uploadCsvMutation.isPending ? \"Processing...\" : \"Upload CSV Data\"}\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4 p-4 bg-slate-800 rounded-lg\">\n                    <h4 className=\"text-white font-semibold\">Redemption Code Validator</h4>\n                    <div className=\"space-y-2\">\n                      <Input\n                        placeholder=\"Enter redemption code...\"\n                        value={redemptionCode}\n                        onChange={(e) => setRedemptionCode(e.target.value.toUpperCase())}\n                        className=\"bg-slate-700 border-slate-600 text-white\"\n                      />\n                      <Button\n                        onClick={() => validateCodeMutation.mutate()}\n                        disabled={validateCodeMutation.isPending || !redemptionCode.trim()}\n                        className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n                      >\n                        {validateCodeMutation.isPending ? \"Validating...\" : \"Validate Code\"}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-4 bg-slate-800 rounded-lg\">\n                  <h4 className=\"text-white font-semibold mb-2\">Connection Status</h4>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={`w-3 h-3 rounded-full ${\n                      syncStatus.connectionStatus === \"connected\" ? \"bg-green-400\" :\n                      syncStatus.connectionStatus === \"failed\" ? \"bg-red-400\" : \"bg-yellow-400\"\n                    }`} />\n                    <span className=\"text-slate-300\">\n                      {syncStatus.connectionStatus === \"connected\" ? \"Connected to Moma API\" :\n                       syncStatus.connectionStatus === \"failed\" ? \"Connection Failed\" : \"Connection Unknown\"}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Integration Setup Instructions */}\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Integration Setup Guide</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-4 text-slate-300\">\n                  <div>\n                    <h4 className=\"text-white font-semibold mb-2\">Method 1: Real-time Webhooks (Recommended)</h4>\n                    <p className=\"text-sm mb-2\">Configure your Moma app to send transaction data instantly:</p>\n                    <div className=\"bg-slate-800 p-3 rounded font-mono text-xs\">\n                      POST https://your-domain/api/moma/webhook\n                    </div>\n                    <p className=\"text-xs mt-2\">Include card number, amount, product, and timestamp in the webhook payload.</p>\n                  </div>\n\n                  <div>\n                    <h4 className=\"text-white font-semibold mb-2\">Method 2: CSV Import</h4>\n                    <p className=\"text-sm mb-2\">Export transaction data from your Moma app and upload it here:</p>\n                    <div className=\"space-y-1 text-xs\">\n                      <div>• Export sales reports from Moma app</div>\n                      <div>• Include: date, amount, card number, product</div>\n                      <div>• Upload CSV file for automatic processing</div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"text-white font-semibold mb-2\">Method 3: QR Code Tracking</h4>\n                    <p className=\"text-sm\">Have customers scan QR codes on vending machines after purchase to earn points manually.</p>\n                  </div>\n\n                  <div className=\"bg-orange-100 border border-orange-400 p-3 rounded\">\n                    <p className=\"text-orange-800 text-sm font-semibold\">\n                      💡 Pro Tip: For best results, have customers link their payment card numbers in their Hi-Vis profiles for automatic matching.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* AWS Integration Tab */}\n          <TabsContent value=\"aws\" className=\"space-y-6\">\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center\">\n                  <Wifi className=\"w-5 h-5 mr-2 text-blue-500\" />\n                  AWS Integration for Moma Data Transfer\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 bg-slate-800 rounded-lg\">\n                  <div>\n                    <h4 className=\"text-white font-semibold\">AWS Sync Status</h4>\n                    <p className=\"text-slate-400 text-sm\">\n                      {awsStatus.isRunning \n                        ? \"Monitoring AWS S3 and SQS for new transactions\" \n                        : \"AWS sync is currently stopped\"}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    {awsStatus.isRunning ? (\n                      <CheckCircle className=\"w-6 h-6 text-green-400\" />\n                    ) : (\n                      <WifiOff className=\"w-6 h-6 text-slate-400\" />\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <Button\n                    onClick={() => startAwsSyncMutation.mutate()}\n                    disabled={startAwsSyncMutation.isPending || awsStatus.isRunning}\n                    className=\"bg-green-600 hover:bg-green-700 text-white\"\n                  >\n                    <Play className=\"w-4 h-4 mr-2\" />\n                    {startAwsSyncMutation.isPending ? \"Starting...\" : \"Start AWS Sync\"}\n                  </Button>\n\n                  <Button\n                    onClick={() => stopAwsSyncMutation.mutate()}\n                    disabled={stopAwsSyncMutation.isPending || !awsStatus.isRunning}\n                    className=\"bg-red-600 hover:bg-red-700 text-white\"\n                  >\n                    <Square className=\"w-4 h-4 mr-2\" />\n                    {stopAwsSyncMutation.isPending ? \"Stopping...\" : \"Stop AWS Sync\"}\n                  </Button>\n\n                  <Button\n                    onClick={() => testAwsConnectionMutation.mutate()}\n                    disabled={testAwsConnectionMutation.isPending}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                  >\n                    <Wifi className=\"w-4 h-4 mr-2\" />\n                    {testAwsConnectionMutation.isPending ? \"Testing...\" : \"Test Connection\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* AWS Setup Instructions */}\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">AWS Configuration Setup</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-4 text-slate-300\">\n                  <div>\n                    <h4 className=\"text-white font-semibold mb-2\">Step 1: AWS Credentials</h4>\n                    <p className=\"text-sm mb-2\">Set up your AWS credentials for Hi-Vis Vending integration:</p>\n                    <div className=\"bg-slate-800 p-3 rounded font-mono text-xs space-y-1\">\n                      <div>AWS_ACCESS_KEY_ID=your_access_key</div>\n                      <div>AWS_SECRET_ACCESS_KEY=your_secret_key</div>\n                      <div>AWS_REGION=us-east-1</div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"text-white font-semibold mb-2\">Step 2: S3 Bucket Setup</h4>\n                    <p className=\"text-sm mb-2\">Configure Moma app to upload transaction files to S3:</p>\n                    <div className=\"bg-slate-800 p-3 rounded font-mono text-xs space-y-1\">\n                      <div>Bucket: hi-vis-moma-data</div>\n                      <div>Folder: transactions/</div>\n                      <div>Format: JSON files with transaction data</div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"text-white font-semibold mb-2\">Step 3: SQS Queue (Optional)</h4>\n                    <p className=\"text-sm mb-2\">For real-time notifications:</p>\n                    <div className=\"bg-slate-800 p-3 rounded font-mono text-xs\">\n                      <div>Queue: hi-vis-transaction-notifications</div>\n                    </div>\n                  </div>\n\n                  <div className=\"bg-blue-100 border border-blue-400 p-3 rounded\">\n                    <p className=\"text-blue-800 text-sm font-semibold\">\n                      ⚡ AWS Integration automatically processes transactions from both S3 files and SQS messages, \n                      providing seamless sync with your Moma vending machines.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}","size_bytes":36737},"client/src/pages/complete-profile.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { HardHat, MapPin, User } from \"lucide-react\";\n\nexport default function CompleteProfile() {\n  const [fullName, setFullName] = useState(\"\");\n  const [suburb, setSuburb] = useState(\"\");\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Suburb mapping function\n  const mapSuburbToGroup = (selectedSuburb: string): string => {\n    switch (selectedSuburb.toLowerCase()) {\n      case 'seven hills':\n        return 'Girraween';\n      case 'parramatta':\n        return 'Harris Park';\n      case 'wahroonga':\n      case 'girraween':\n      case 'harris park':\n        return selectedSuburb;\n      default:\n        return selectedSuburb;\n    }\n  };\n\n  const suburbOptions = [\n    { value: 'Wahroonga', label: 'Wahroonga' },\n    { value: 'Girraween', label: 'Girraween' },\n    { value: 'Seven Hills', label: 'Seven Hills (counted as Girraween)' },\n    { value: 'Harris Park', label: 'Harris Park' },\n    { value: 'Parramatta', label: 'Parramatta (counted as Harris Park)' },\n  ];\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: { fullName: string; suburb: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/complete-profile\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Profile Complete!\",\n        description: \"Welcome to Hi-Vis Vending loyalty program!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!fullName.trim() || !suburb.trim()) {\n      toast({\n        title: \"Required Fields\",\n        description: \"Please fill in all required fields to continue\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    const mappedSuburb = mapSuburbToGroup(suburb);\n    updateProfileMutation.mutate({ \n      fullName: fullName.trim(),\n      suburb: mappedSuburb \n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 flex items-center justify-center p-4\">\n      <div className=\"max-w-md w-full\">\n        <Card className=\"border-orange-200 shadow-lg\">\n          <CardHeader className=\"text-center\">\n            <div className=\"w-16 h-16 bg-orange-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <HardHat className=\"w-8 h-8 text-white\" />\n            </div>\n            <CardTitle className=\"text-2xl text-gray-900\">Complete Your Profile</CardTitle>\n            <p className=\"text-gray-600\">\n              Welcome {user?.firstName || 'to Hi-Vis Vending'}! We need a bit more info to set up your account.\n            </p>\n          </CardHeader>\n          \n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"fullName\" className=\"text-gray-700 font-medium\">\n                  Full Name *\n                </Label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <Input\n                    id=\"fullName\"\n                    type=\"text\"\n                    value={fullName}\n                    onChange={(e) => setFullName(e.target.value)}\n                    placeholder=\"e.g. John Smith\"\n                    className=\"pl-10 border-orange-200 focus:border-orange-500\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"suburb\" className=\"text-gray-700 font-medium\">\n                  Work Location *\n                </Label>\n                <Select value={suburb} onValueChange={setSuburb}>\n                  <SelectTrigger className=\"border-orange-200 focus:border-orange-500\">\n                    <div className=\"flex items-center\">\n                      <MapPin className=\"w-4 h-4 text-gray-400 mr-2\" />\n                      <SelectValue placeholder=\"Select your work location\" />\n                    </div>\n                  </SelectTrigger>\n                  <SelectContent>\n                    {suburbOptions.map((option) => (\n                      <SelectItem key={option.value} value={option.value}>\n                        {option.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <p className=\"text-sm text-gray-500\">\n                  We use this to group you with other workers in your area for local leaderboards and promotions.\n                </p>\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={updateProfileMutation.isPending || !fullName.trim() || !suburb.trim()}\n                className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n              >\n                {updateProfileMutation.isPending ? \"Setting up...\" : \"Complete Profile\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":5901},"client/src/pages/developer.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Code2, Database, Settings, Users, Activity, AlertTriangle, Download, FileText, Camera, Upload, Edit } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { User, PhotoReelItem } from \"@shared/schema\";\nimport { capitalizeName } from \"@/lib/utils\";\n\ntype AdminStats = {\n  totalUsers: number;\n  totalTransactions: number;\n  pointsRedeemed: number;\n  activeMachines: number;\n  activeUsersToday: number;\n  totalPointsEarned: number;\n};\n\nexport default function Developer() {\n  const { user } = useAuth() as { user: User | null };\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  // Get system stats\n  const { data: stats } = useQuery<AdminStats>({\n    queryKey: [\"/api/admin/stats\"],\n  });\n\n  // Get all users for developer analysis\n  const { data: allUsers } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  // Get photo reel items for content management\n  const { data: photoReelItems } = useQuery<PhotoReelItem[]>({\n    queryKey: [\"/api/content/photo-reel\"],\n  });\n\n  if (!user?.isDeveloper) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 flex items-center justify-center p-4\">\n        <Card className=\"border-red-200 shadow-lg max-w-md w-full\">\n          <CardHeader className=\"text-center\">\n            <div className=\"w-16 h-16 bg-red-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <AlertTriangle className=\"w-8 h-8 text-white\" />\n            </div>\n            <CardTitle className=\"text-2xl text-gray-900\">Access Denied</CardTitle>\n            <p className=\"text-gray-600\">\n              This page is restricted to developer access only.\n            </p>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  const tabs = [\n    { id: \"overview\", label: \"Overview\", icon: Activity },\n    { id: \"database\", label: \"Database\", icon: Database },\n    { id: \"users\", label: \"Users\", icon: Users },\n    { id: \"content\", label: \"Content\", icon: Code2 },\n    { id: \"system\", label: \"System\", icon: Settings },\n  ];\n\n  const handleDatabaseAction = (action: string) => {\n    toast({\n      title: \"Developer Action\",\n      description: `${action} functionality would be implemented here`,\n    });\n  };\n\n  const generateUserReport = () => {\n    if (!allUsers) {\n      toast({\n        title: \"No Data\",\n        description: \"User data not available for report generation\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const report = {\n      generated: new Date().toISOString(),\n      totalUsers: allUsers.length,\n      usersByTier: {\n        apprentice: allUsers.filter(u => u.loyaltyTier === 'apprentice').length,\n        tradie: allUsers.filter(u => u.loyaltyTier === 'tradie').length,\n        foreman: allUsers.filter(u => u.loyaltyTier === 'foreman').length,\n      },\n      usersBySuburb: allUsers.reduce((acc: Record<string, number>, user) => {\n        const suburb = user.suburb || 'Unknown';\n        acc[suburb] = (acc[suburb] || 0) + 1;\n        return acc;\n      }, {}),\n      totalPoints: allUsers.reduce((sum, user) => sum + (user.totalPoints || 0), 0),\n      avgPointsPerUser: allUsers.length > 0 ? \n        Math.round(allUsers.reduce((sum, user) => sum + (user.totalPoints || 0), 0) / allUsers.length) : 0,\n      activeUsers: allUsers.filter(u => (u.totalPoints || 0) > 0).length,\n      users: allUsers.map(user => ({\n        id: user.id,\n        email: user.email,\n        name: `${capitalizeName(user.firstName || '')} ${capitalizeName(user.lastName || '')}`.trim(),\n        suburb: user.suburb,\n        tier: user.loyaltyTier,\n        points: user.totalPoints,\n        isAdmin: user.isAdmin,\n        isDeveloper: user.isDeveloper,\n        joinDate: user.createdAt,\n      }))\n    };\n\n    const dataStr = JSON.stringify(report, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `hi-vis-user-report-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n\n    toast({\n      title: \"Report Generated\",\n      description: `User report downloaded with ${allUsers.length} users`,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-6\">\n          <div className=\"flex items-center gap-3 mb-2\">\n            <Code2 className=\"w-8 h-8 text-orange-600\" />\n            <h1 className=\"text-3xl font-bold text-gray-900\">Developer Console</h1>\n            <Badge variant=\"destructive\" className=\"bg-red-500\">RESTRICTED</Badge>\n          </div>\n          <p className=\"text-gray-600\">\n            Advanced system controls and diagnostics for {capitalizeName(user.firstName || '')} {capitalizeName(user.lastName || '')}\n          </p>\n        </div>\n\n        {/* Tab Navigation */}\n        <div className=\"flex space-x-1 mb-6 bg-white rounded-lg p-1 shadow-sm border border-orange-200\">\n          {tabs.map((tab) => {\n            const Icon = tab.icon;\n            return (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={`flex items-center gap-2 px-4 py-2 rounded-md transition-colors ${\n                  activeTab === tab.id\n                    ? \"bg-orange-500 text-white\"\n                    : \"text-gray-600 hover:bg-orange-50\"\n                }`}\n              >\n                <Icon className=\"w-4 h-4\" />\n                {tab.label}\n              </button>\n            );\n          })}\n        </div>\n\n        {/* Tab Content */}\n        <div className=\"space-y-6\">\n          {activeTab === \"overview\" && (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <Card className=\"border-orange-200\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-600\">Total Users</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-orange-600\">{stats?.totalUsers || 0}</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-orange-200\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-600\">Active Today</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-green-600\">{stats?.activeUsersToday || 0}</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-orange-200\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-600\">Total Transactions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-blue-600\">{stats?.totalTransactions || 0}</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-orange-200\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-600\">Points Earned</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-purple-600\">{stats?.totalPointsEarned || 0}</div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {activeTab === \"database\" && (\n            <Card className=\"border-orange-200\">\n              <CardHeader>\n                <CardTitle className=\"text-xl text-gray-900\">Database Operations</CardTitle>\n                <p className=\"text-gray-600\">Direct database management tools</p>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Button\n                    onClick={() => handleDatabaseAction(\"Reset all user points\")}\n                    variant=\"destructive\"\n                    className=\"w-full\"\n                  >\n                    Reset All Points\n                  </Button>\n                  \n                  <Button\n                    onClick={() => handleDatabaseAction(\"Clear transaction history\")}\n                    variant=\"destructive\"\n                    className=\"w-full\"\n                  >\n                    Clear Transactions\n                  </Button>\n                  \n                  <Button\n                    onClick={generateUserReport}\n                    variant=\"outline\"\n                    className=\"w-full border-orange-200 hover:bg-orange-50\"\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Generate User Report\n                  </Button>\n                  \n                  <Button\n                    onClick={() => handleDatabaseAction(\"Run database cleanup\")}\n                    variant=\"outline\"\n                    className=\"w-full border-orange-200\"\n                  >\n                    Cleanup Database\n                  </Button>\n                </div>\n                \n                <Separator />\n                \n                <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4\">\n                  <h4 className=\"font-semibold text-orange-800 mb-2\">📊 Data Analysis</h4>\n                  <p className=\"text-orange-700 text-sm mb-3\">\n                    Generate comprehensive reports for system analysis and business insights.\n                  </p>\n                  <Button\n                    onClick={generateUserReport}\n                    className=\"w-full bg-orange-600 hover:bg-orange-700\"\n                  >\n                    <FileText className=\"w-4 h-4 mr-2\" />\n                    Download Detailed Analytics Report\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {activeTab === \"users\" && (\n            <Card className=\"border-orange-200\">\n              <CardHeader>\n                <CardTitle className=\"text-xl text-gray-900\">User Management</CardTitle>\n                <p className=\"text-gray-600\">Advanced user controls and analytics</p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                    <div className=\"bg-blue-50 rounded-lg p-4\">\n                      <h4 className=\"font-semibold text-blue-800\">Apprentices</h4>\n                      <p className=\"text-2xl font-bold text-blue-600\">\n                        {allUsers?.filter(u => u.loyaltyTier === \"apprentice\").length || 0}\n                      </p>\n                    </div>\n                    <div className=\"bg-orange-50 rounded-lg p-4\">\n                      <h4 className=\"font-semibold text-orange-800\">Tradies</h4>\n                      <p className=\"text-2xl font-bold text-orange-600\">\n                        {allUsers?.filter(u => u.loyaltyTier === \"tradie\").length || 0}\n                      </p>\n                    </div>\n                    <div className=\"bg-yellow-50 rounded-lg p-4\">\n                      <h4 className=\"font-semibold text-yellow-800\">Foremen</h4>\n                      <p className=\"text-2xl font-bold text-yellow-600\">\n                        {allUsers?.filter(u => u.loyaltyTier === \"foreman\").length || 0}\n                      </p>\n                    </div>\n                  </div>\n\n                  <Button\n                    onClick={generateUserReport}\n                    className=\"w-full bg-orange-600 hover:bg-orange-700\"\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Generate Full User Report\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {activeTab === \"content\" && (\n            <div className=\"space-y-6\">\n              <Card className=\"border-orange-200\">\n                <CardHeader>\n                  <CardTitle className=\"text-xl text-gray-900\">Photo Reel Management</CardTitle>\n                  <p className=\"text-gray-600\">Manage home page photo reel content</p>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4\">\n                    <h4 className=\"font-semibold text-blue-800 mb-2 flex items-center gap-2\">\n                      <Camera className=\"w-4 h-4\" />\n                      Photo Reel Management\n                    </h4>\n                    <p className=\"text-blue-700 text-sm mb-4\">\n                      Upload and manage promotional images for the home page carousel.\n                    </p>\n                    \n                    {/* Image Upload Section */}\n                    <div className=\"bg-white border-2 border-dashed border-blue-300 rounded-lg p-4 mb-4 text-center\">\n                      <Upload className=\"w-8 h-8 text-blue-400 mx-auto mb-2\" />\n                      <h5 className=\"font-medium text-blue-800 mb-1\">Upload New Image</h5>\n                      <p className=\"text-blue-600 text-xs mb-3\">\n                        <strong>Banner dimensions needed:</strong><br/>\n                        • Mobile: 1080x480px (landscape)<br/>\n                        • Desktop: 1200x400px (banner)<br/>\n                        • Your image needs to be converted from portrait to landscape format\n                      </p>\n                      <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={(e) => {\n                          const file = e.target.files?.[0];\n                          if (file) {\n                            toast({\n                              title: \"Image Selected\",\n                              description: `${file.name} ready for upload. Image upload functionality will be enhanced in the next update.`,\n                            });\n                          }\n                        }}\n                        className=\"block w-full text-sm text-blue-600\n                          file:mr-4 file:py-2 file:px-4\n                          file:rounded-full file:border-0\n                          file:text-sm file:font-semibold\n                          file:bg-blue-100 file:text-blue-700\n                          hover:file:bg-blue-200 cursor-pointer\"\n                      />\n                    </div>\n\n                    {/* Current Images */}\n                    <div className=\"space-y-3\">\n                      <h5 className=\"font-medium text-blue-800\">Current Photo Reel Images:</h5>\n                      {photoReelItems?.slice(0, 3).map((item, index) => (\n                        <div key={item.id} className=\"bg-white rounded-lg p-3 border border-blue-200\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"w-16 h-10 bg-blue-100 rounded overflow-hidden\">\n                              <img \n                                src={item.imageUrl} \n                                alt={item.title}\n                                className=\"w-full h-full object-cover\"\n                              />\n                            </div>\n                            <div className=\"flex-1\">\n                              <h6 className=\"font-medium text-blue-900 text-sm\">{item.title}</h6>\n                              <p className=\"text-blue-700 text-xs\">{item.description}</p>\n                              <p className=\"text-blue-500 text-xs\">Position: {item.displayOrder + 1}</p>\n                            </div>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"border-blue-300 text-blue-600 hover:bg-blue-50\"\n                              onClick={() => toast({\n                                title: \"Edit Feature\",\n                                description: \"Image editing will be available in the next update.\",\n                              })}\n                            >\n                              <Edit className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-orange-200\">\n                <CardHeader>\n                  <CardTitle className=\"text-xl text-gray-900\">App Exclusive Rewards</CardTitle>\n                  <p className=\"text-gray-600\">Manage special app-only reward offers</p>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                    <h4 className=\"font-semibold text-yellow-800 mb-2\">⭐ Exclusive Rewards</h4>\n                    <p className=\"text-yellow-700 text-sm mb-3\">\n                      Create and manage special rewards that are only available through the mobile app.\n                    </p>\n                    <div className=\"space-y-2\">\n                      <Button\n                        onClick={() => toast({\n                          title: \"Feature Coming Soon\",\n                          description: \"App exclusive rewards management will be available in the next update.\",\n                        })}\n                        className=\"w-full bg-yellow-600 hover:bg-yellow-700\"\n                      >\n                        Manage App Exclusive Rewards\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {activeTab === \"system\" && (\n            <Card className=\"border-orange-200\">\n              <CardHeader>\n                <CardTitle className=\"text-xl text-gray-900\">System Configuration</CardTitle>\n                <p className=\"text-gray-600\">Environment and system settings</p>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"bg-gray-50 rounded-lg p-4\">\n                    <h4 className=\"font-semibold text-gray-800 mb-2\">Environment</h4>\n                    <Badge variant=\"secondary\">Development</Badge>\n                  </div>\n                  \n                  <div className=\"bg-gray-50 rounded-lg p-4\">\n                    <h4 className=\"font-semibold text-gray-800 mb-2\">Database Status</h4>\n                    <Badge className=\"bg-green-500\">Connected</Badge>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-2\">\n                  <Button\n                    onClick={() => handleDatabaseAction(\"Check system health\")}\n                    variant=\"outline\"\n                    className=\"w-full border-orange-200\"\n                  >\n                    Run Health Check\n                  </Button>\n                  \n                  <Button\n                    onClick={() => handleDatabaseAction(\"View system logs\")}\n                    variant=\"outline\"\n                    className=\"w-full border-orange-200\"\n                  >\n                    View System Logs\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":20228},"client/src/pages/forgot-password.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { HardHat, Mail, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function ForgotPassword() {\n  const [email, setEmail] = useState(\"\");\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const { toast } = useToast();\n\n  const resetMutation = useMutation({\n    mutationFn: async (email: string) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/forgot-password\", { email });\n      return response.json();\n    },\n    onSuccess: () => {\n      setIsSubmitted(true);\n      toast({\n        title: \"Reset Email Sent\",\n        description: \"Check your email for password reset instructions.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Reset Failed\",\n        description: error.message || \"Please check your email address and try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email.trim()) {\n      toast({\n        title: \"Email Required\",\n        description: \"Please enter your email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    resetMutation.mutate(email.trim());\n  };\n\n  if (isSubmitted) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 flex items-center justify-center p-4\">\n        <div className=\"max-w-md w-full\">\n          <Card className=\"border-orange-200 shadow-lg\">\n            <CardHeader className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Mail className=\"w-8 h-8 text-white\" />\n              </div>\n              <CardTitle className=\"text-2xl text-gray-900\">Check Your Email</CardTitle>\n              <p className=\"text-gray-600\">\n                We've sent password reset instructions to <strong>{email}</strong>\n              </p>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-4\">\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-sm text-gray-500\">\n                  Didn't receive an email? Check your spam folder or try again.\n                </p>\n                <Button\n                  onClick={() => setIsSubmitted(false)}\n                  variant=\"outline\"\n                  className=\"w-full border-orange-200 hover:bg-orange-50\"\n                >\n                  Try Different Email\n                </Button>\n              </div>\n              \n              <div className=\"text-center pt-4\">\n                <Link href=\"/login\" className=\"inline-flex items-center text-orange-600 hover:text-orange-700 font-medium\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Login\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 flex items-center justify-center p-4\">\n      <div className=\"max-w-md w-full\">\n        <Card className=\"border-orange-200 shadow-lg\">\n          <CardHeader className=\"text-center\">\n            <div className=\"w-16 h-16 bg-orange-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <HardHat className=\"w-8 h-8 text-white\" />\n            </div>\n            <CardTitle className=\"text-2xl text-gray-900\">Reset Your Password</CardTitle>\n            <p className=\"text-gray-600\">\n              Enter your email address and we'll send you a link to reset your password\n            </p>\n          </CardHeader>\n          \n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-gray-700 font-medium\">\n                  Email Address\n                </Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    placeholder=\"john@example.com\"\n                    className=\"pl-10 border-orange-200 focus:border-orange-500\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={resetMutation.isPending}\n                className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n              >\n                {resetMutation.isPending ? \"Sending...\" : \"Send Reset Link\"}\n              </Button>\n\n              <div className=\"text-center pt-4\">\n                <Link href=\"/login\" className=\"inline-flex items-center text-orange-600 hover:text-orange-700 font-medium\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Login\n                </Link>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":5584},"client/src/pages/home.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Navigation from \"@/components/Navigation\";\nimport AnimatedLoyaltyProgress from \"@/components/AnimatedLoyaltyProgress\";\nimport PunchCard from \"@/components/PunchCard\";\nimport DailyStreakTracker from \"@/components/DailyStreakTracker\";\nimport PhotoReel from \"@/components/PhotoReel\";\nimport AppExclusiveRewards from \"@/components/AppExclusiveRewards\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { QrCode, Gift, HardHat, Bell, Users, Copy, Share2 } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { capitalizeName } from \"@/lib/utils\";\nimport { PhotoReelItem, AppExclusiveReward } from \"@shared/schema\";\n\nexport default function Home() {\n  const [referralCodeInput, setReferralCodeInput] = useState(\"\");\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n\n  const { data: transactions } = useQuery({\n    queryKey: [\"/api/user/transactions\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: myReferralData } = useQuery({\n    queryKey: [\"/api/referral/my-code\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: photoReelItems } = useQuery<PhotoReelItem[]>({\n    queryKey: [\"/api/content/photo-reel\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: appExclusiveRewards } = useQuery<AppExclusiveReward[]>({\n    queryKey: [\"/api/content/app-exclusive-rewards\"],\n    enabled: isAuthenticated,\n  });\n\n  const useReferralMutation = useMutation({\n    mutationFn: async (referralCode: string) => {\n      const response = await apiRequest(\"POST\", \"/api/referral/use-code\", { referralCode });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/transactions\"] });\n      toast({\n        title: \"Welcome Bonus!\",\n        description: `You earned ${data.pointsEarned} points for using a referral code!`,\n      });\n      setReferralCodeInput(\"\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Invalid Code\",\n        description: error.message || \"This referral code is not valid\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !user) {\n    return (\n      <div className=\"min-h-screen bg-slate-800 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <HardHat className=\"w-12 h-12 text-orange-500 mx-auto mb-4 animate-pulse\" />\n          <p className=\"text-white\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const getTierName = (tier: string) => {\n    switch (tier) {\n      case \"apprentice\": return \"Apprentice\";\n      case \"tradie\": return \"Tradie\";\n      case \"foreman\": return \"Foreman\";\n      default: return \"Apprentice\";\n    }\n  };\n\n  const getNextTierPoints = (tier: string, currentPoints: number) => {\n    switch (tier) {\n      case \"apprentice\": return 500 - currentPoints;\n      case \"tradie\": return 1000 - currentPoints;\n      default: return 0;\n    }\n  };\n\n  const recentTransactions = transactions?.slice(0, 3) || [];\n\n  const handleUseReferralCode = () => {\n    if (!referralCodeInput.trim()) return;\n    useReferralMutation.mutate(referralCodeInput.trim().toUpperCase());\n  };\n\n  const copyReferralCode = () => {\n    if (myReferralData?.referralCode) {\n      navigator.clipboard.writeText(myReferralData.referralCode);\n      toast({\n        title: \"Copied!\",\n        description: \"Your referral code has been copied to clipboard\",\n      });\n    }\n  };\n\n  const shareReferralCode = () => {\n    if (myReferralData?.referralCode) {\n      const message = `Join Hi-Vis Vending loyalty program with my code ${myReferralData.referralCode} and get 25 free points! 🏗️`;\n      \n      if (navigator.share) {\n        navigator.share({\n          title: 'Join Hi-Vis Vending',\n          text: message,\n          url: window.location.origin\n        });\n      } else {\n        navigator.clipboard.writeText(message);\n        toast({\n          title: \"Copied!\",\n          description: \"Referral message copied to clipboard\",\n        });\n      }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-800\">\n      {/* Header */}\n      <header className=\"bg-slate-800 border-b-4 border-orange-500 sticky top-0 z-50\">\n        <div className=\"flex items-center justify-between px-4 py-3\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 bg-orange-500 rounded-lg flex items-center justify-center\">\n              <HardHat className=\"text-slate-800 w-6 h-6\" />\n            </div>\n            <div>\n              <h1 className=\"text-white font-bold text-lg\">HI-VIS</h1>\n              <p className=\"text-yellow-400 text-xs font-medium\">VENDING</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <button className=\"text-white relative\">\n              <Bell className=\"w-5 h-5\" />\n              <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full\"></span>\n            </button>\n            <Link href=\"/profile\">\n              <div className=\"w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center cursor-pointer hover:bg-orange-400 transition-colors\">\n                <span className=\"text-slate-800 font-bold text-sm\">\n                  {(user.firstName?.[0] || 'U').toUpperCase()}{(user.lastName?.[0] || '').toUpperCase()}\n                </span>\n              </div>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"pb-20\">\n        {/* Hero Section */}\n        <section className=\"gradient-orange p-6 text-slate-800\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h2 className=\"text-2xl font-bold\">\n                {user.firstName ? `${capitalizeName(user.firstName)} ${capitalizeName(user.lastName || '')}` : 'Welcome'}\n              </h2>\n              <p className=\"text-lg opacity-90\">Welcome back, {getTierName(user.loyaltyTier || 'apprentice')}!</p>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-3xl font-bold\">{user.totalPoints || 0}</p>\n              <p className=\"text-sm opacity-90\">Points</p>\n            </div>\n          </div>\n          \n          <AnimatedLoyaltyProgress \n            tier={user.loyaltyTier || 'apprentice'}\n            points={user.totalPoints || 0}\n          />\n        </section>\n\n        {/* Photo Reel Section */}\n        {photoReelItems && photoReelItems.length > 0 && (\n          <PhotoReel items={photoReelItems} />\n        )}\n\n        {/* App Exclusive Rewards Section */}\n        {appExclusiveRewards && appExclusiveRewards.length > 0 && (\n          <AppExclusiveRewards \n            rewards={appExclusiveRewards} \n            onRedeem={(rewardId) => {\n              // Handle reward redemption\n              toast({\n                title: \"Reward Redemption\",\n                description: \"Coming soon! Visit the rewards tab to redeem.\",\n              });\n            }}\n          />\n        )}\n\n        {/* Daily Streak Tracker */}\n        <section className=\"px-6 py-6\">\n          <DailyStreakTracker \n            currentStreak={user.currentStreak || 0}\n            streakRewardEarned={user.streakRewardEarned || false}\n          />\n        </section>\n\n        {/* Punch Card */}\n        <section className=\"px-6 py-4\">\n          <PunchCard progress={user.punchCardProgress || 0} />\n        </section>\n\n\n\n        {/* Recent Activity */}\n        {recentTransactions.length > 0 && (\n          <section className=\"px-6 py-4\">\n            <h3 className=\"text-white text-lg font-semibold mb-4\">Recent Activity</h3>\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardContent className=\"p-0\">\n                {recentTransactions.map((transaction, index) => (\n                  <div key={transaction.id} className={`p-4 flex items-center justify-between ${\n                    index < recentTransactions.length - 1 ? 'border-b border-slate-600' : ''\n                  }`}>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                        transaction.type === 'purchase' ? 'bg-green-100' :\n                        transaction.type === 'redemption' ? 'bg-red-100' : 'bg-yellow-100'\n                      }`}>\n                        <span className={`text-sm font-bold ${\n                          transaction.type === 'purchase' ? 'text-green-600' :\n                          transaction.type === 'redemption' ? 'text-red-600' : 'text-yellow-600'\n                        }`}>\n                          {transaction.type === 'purchase' ? '+' : \n                           transaction.type === 'redemption' ? '−' : '★'}\n                        </span>\n                      </div>\n                      <div>\n                        <p className=\"font-semibold text-white capitalize\">{transaction.type}</p>\n                        <p className=\"text-sm text-slate-400\">\n                          {new Date(transaction.createdAt!).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className={`font-semibold ${\n                        transaction.points > 0 ? 'text-green-400' : 'text-red-400'\n                      }`}>\n                        {transaction.points > 0 ? '+' : ''}{transaction.points} pts\n                      </p>\n                      <p className=\"text-sm text-slate-400\">{transaction.description}</p>\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </section>\n        )}\n\n\n      </main>\n\n      <Navigation />\n    </div>\n  );\n}\n","size_bytes":10702},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { HardHat, Zap, Gift, Star } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-slate-800 text-white\">\n      {/* Header */}\n      <header className=\"border-b-4 border-orange-500 p-4\">\n        <div className=\"flex items-center justify-center space-x-3\">\n          <div className=\"w-12 h-12 bg-orange-500 rounded-lg flex items-center justify-center\">\n            <HardHat className=\"text-slate-800 w-6 h-6\" />\n          </div>\n          <div className=\"text-center\">\n            <h1 className=\"text-white font-bold text-xl\">HI-VIS</h1>\n            <p className=\"text-yellow-400 text-sm font-medium\">VENDING</p>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"p-6\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-8\">\n          <div className=\"gradient-orange rounded-2xl p-8 text-slate-800 mb-6\">\n            <h2 className=\"text-3xl font-bold mb-2\">Welcome to Hi-Vis Vending</h2>\n            <p className=\"text-lg opacity-90\">Your construction site loyalty program</p>\n          </div>\n        </div>\n\n        {/* Features */}\n        <div className=\"space-y-4 mb-8\">\n          <Card className=\"bg-slate-700 border-slate-600\">\n            <CardContent className=\"p-6 flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-orange-500 rounded-full flex items-center justify-center\">\n                <Zap className=\"text-white w-6 h-6\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-white\">Earn Points</h3>\n                <p className=\"text-slate-300 text-sm\">Get 10 points for every purchase</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-slate-700 border-slate-600\">\n            <CardContent className=\"p-6 flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-yellow-400 rounded-full flex items-center justify-center\">\n                <Gift className=\"text-slate-800 w-6 h-6\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-white\">Redeem Rewards</h3>\n                <p className=\"text-slate-300 text-sm\">Free drinks, snacks, and more</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-slate-700 border-slate-600\">\n            <CardContent className=\"p-6 flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-green-500 rounded-full flex items-center justify-center\">\n                <Star className=\"text-white w-6 h-6\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-white\">Loyalty Tiers</h3>\n                <p className=\"text-slate-300 text-sm\">Apprentice, Tradie, Foreman levels</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Login Button */}\n        <div className=\"text-center\">\n          <Button \n            onClick={() => window.location.href = '/api/login'}\n            className=\"w-full bg-orange-500 hover:bg-orange-600 text-slate-800 font-bold py-4 text-lg\"\n          >\n            Get Started\n          </Button>\n          <p className=\"text-slate-400 text-sm mt-4\">\n            Join thousands of construction workers saving on their daily coffee and snacks\n          </p>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":3495},"client/src/pages/leaderboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Navigation from \"@/components/Navigation\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { HardHat, Trophy, Medal, Award, MapPin } from \"lucide-react\";\nimport { capitalizeName } from \"@/lib/utils\";\n\ntype LeaderboardUser = {\n  id: string;\n  firstName: string;\n  lastName: string;\n  totalPoints: number;\n  loyaltyTier: string;\n  suburb: string;\n  rank: number;\n};\n\ntype SuburbLeaderboard = {\n  suburb: string;\n  users: LeaderboardUser[];\n};\n\nexport default function Leaderboard() {\n  const { user } = useAuth();\n\n  const { data: leaderboardData } = useQuery<SuburbLeaderboard[]>({\n    queryKey: [\"/api/leaderboard\"],\n  });\n\n  // Get the user's suburb leaderboard\n  const userSuburbData = leaderboardData?.find(s => s.suburb === user?.suburb);\n\n  const getRankIcon = (rank: number) => {\n    switch (rank) {\n      case 1: return <Trophy className=\"w-6 h-6 text-yellow-400\" />;\n      case 2: return <Medal className=\"w-6 h-6 text-gray-400\" />;\n      case 3: return <Award className=\"w-6 h-6 text-amber-600\" />;\n      default: return <span className=\"w-6 h-6 flex items-center justify-center text-slate-400 font-bold\">#{rank}</span>;\n    }\n  };\n\n  const getTierColor = (tier: string) => {\n    switch (tier) {\n      case \"foreman\": return \"text-orange-400\";\n      case \"tradie\": return \"text-yellow-400\";\n      case \"apprentice\": return \"text-green-400\";\n      default: return \"text-slate-400\";\n    }\n  };\n\n  const getTierName = (tier: string) => {\n    switch (tier) {\n      case \"foreman\": return \"Foreman\";\n      case \"tradie\": return \"Tradie\";\n      case \"apprentice\": return \"Apprentice\";\n      default: return \"Apprentice\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-800\">\n      {/* Header */}\n      <header className=\"bg-slate-800 border-b-4 border-orange-500 sticky top-0 z-50\">\n        <div className=\"flex items-center justify-center px-4 py-3\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 bg-orange-500 rounded-lg flex items-center justify-center\">\n              <HardHat className=\"text-slate-800 w-6 h-6\" />\n            </div>\n            <div>\n              <h1 className=\"text-white font-bold text-lg\">Monthly Leaderboard</h1>\n              <p className=\"text-yellow-400 text-xs font-medium\">{new Date().toLocaleDateString('en-US', { month: 'long', year: 'numeric' })} Season</p>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"p-6 pb-20\">\n\n\n        {/* Monthly Prizes Section */}\n        <Card className=\"bg-gradient-to-r from-yellow-500 to-orange-500 border-0 mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-center text-slate-800\">\n              <Award className=\"w-12 h-12 mx-auto mb-3\" />\n              <h3 className=\"text-xl font-bold mb-4\">Monthly Prizes</h3>\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"bg-white/20 rounded-lg p-4\">\n                  <Trophy className=\"w-8 h-8 mx-auto mb-2 text-yellow-600\" />\n                  <p className=\"font-bold text-lg\">1st Place</p>\n                  <p className=\"text-sm\">3 Free Large Drinks</p>\n                </div>\n                <div className=\"bg-white/20 rounded-lg p-4\">\n                  <Medal className=\"w-8 h-8 mx-auto mb-2 text-gray-600\" />\n                  <p className=\"font-bold text-lg\">2nd Place</p>\n                  <p className=\"text-sm\">2 Free Large Drinks</p>\n                </div>\n                <div className=\"bg-white/20 rounded-lg p-4\">\n                  <Award className=\"w-8 h-8 mx-auto mb-2 text-amber-700\" />\n                  <p className=\"font-bold text-lg\">3rd Place</p>\n                  <p className=\"text-sm\">1 Free Large Drink</p>\n                </div>\n              </div>\n              <p className=\"text-sm mt-4 opacity-80\">\n                Prizes awarded at the end of each month based on suburb rankings\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Current User Stats */}\n        {user && (\n          <Card className=\"bg-slate-700 border-slate-600 mb-6\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-center\">\n                <h3 className=\"text-white font-semibold mb-2\">Your Stats - {user.suburb || 'No Suburb'}</h3>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-orange-400\">{user.totalPoints || 0}</p>\n                    <p className=\"text-slate-400 text-sm\">Points</p>\n                  </div>\n                  <div>\n                    <p className={`text-2xl font-bold ${getTierColor(user.loyaltyTier || 'apprentice')}`}>\n                      {getTierName(user.loyaltyTier || 'apprentice')}\n                    </p>\n                    <p className=\"text-slate-400 text-sm\">Tier</p>\n                  </div>\n                  <div>\n                    {(() => {\n                      const userRank = userSuburbData?.users.find(u => u.id === user.id)?.rank;\n                      return (\n                        <>\n                          <p className=\"text-2xl font-bold text-yellow-400\">#{userRank || '?'}</p>\n                          <p className=\"text-slate-400 text-sm\">Rank in {user.suburb}</p>\n                        </>\n                      );\n                    })()}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* User's Suburb Leaderboard */}\n        <section>\n          {user?.suburb && userSuburbData ? (\n            <>\n              <h3 className=\"text-white text-lg font-semibold mb-4 flex items-center\">\n                <Trophy className=\"w-5 h-5 mr-2\" />\n                {user.suburb} Leaderboard\n              </h3>\n              {userSuburbData.users.map((player) => (\n                <Card \n                  key={player.id} \n                  className={`bg-slate-700 border-slate-600 mb-3 ${\n                    player.rank <= 3 ? 'ring-2 ring-orange-500/20' : ''\n                  } ${player.id === user.id ? 'ring-2 ring-blue-500/30' : ''}`}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"flex items-center justify-center w-12 h-12\">\n                          {getRankIcon(player.rank)}\n                        </div>\n                        <div>\n                          <p className={`font-semibold ${player.id === user.id ? 'text-blue-400' : 'text-white'}`}>\n                            {capitalizeName(player.firstName)} {capitalizeName(player.lastName)}\n                            {player.id === user.id && ' (You)'}\n                          </p>\n                          <p className={`text-sm ${getTierColor(player.loyaltyTier)}`}>\n                            {getTierName(player.loyaltyTier)}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-xl font-bold text-orange-400\">{player.totalPoints}</p>\n                        <p className=\"text-slate-400 text-sm\">points</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </>\n          ) : (\n            <div className=\"text-center py-8\">\n              <MapPin className=\"w-16 h-16 text-slate-500 mx-auto mb-4\" />\n              <p className=\"text-white text-lg font-semibold mb-2\">No Suburb Set</p>\n              <p className=\"text-slate-400\">\n                {user?.suburb ? \n                  'No other workers in your suburb yet. Be the first!' : \n                  'Please update your profile with your suburb to see the leaderboard.'\n                }\n              </p>\n            </div>\n          )}\n        </section>\n      </main>\n\n      <Navigation />\n    </div>\n  );\n}","size_bytes":8187},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { HardHat, Mail, Lock } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\n\nexport default function Login() {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Welcome Back!\",\n        description: \"You have successfully logged in.\",\n      });\n      // Redirect to home page after successful login\n      setLocation(\"/\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Login Failed\",\n        description: \"Invalid email or password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.email.trim() || !formData.password.trim()) {\n      toast({\n        title: \"Required Fields\",\n        description: \"Please enter your email and password\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    loginMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 flex items-center justify-center p-4\">\n      <div className=\"max-w-md w-full\">\n        <Card className=\"border-orange-200 shadow-lg\">\n          <CardHeader className=\"text-center\">\n            <div className=\"w-16 h-16 bg-orange-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <HardHat className=\"w-8 h-8 text-white\" />\n            </div>\n            <CardTitle className=\"text-2xl text-gray-900\">Welcome Back</CardTitle>\n            <p className=\"text-gray-600\">\n              Log in to your Hi-Vis Vending account\n            </p>\n          </CardHeader>\n          \n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-gray-700 font-medium\">\n                  Email Address\n                </Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                    placeholder=\"john@example.com\"\n                    className=\"pl-10 border-orange-200 focus:border-orange-500\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-gray-700 font-medium\">\n                  Password\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    value={formData.password}\n                    onChange={(e) => handleInputChange(\"password\", e.target.value)}\n                    placeholder=\"Enter your password\"\n                    className=\"pl-10 border-orange-200 focus:border-orange-500\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={loginMutation.isPending}\n                className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n              >\n                {loginMutation.isPending ? \"Logging In...\" : \"Log In\"}\n              </Button>\n\n              <div className=\"text-center pt-4 space-y-2\">\n                <Link href=\"/forgot-password\" className=\"text-sm text-orange-600 hover:text-orange-700 underline\">\n                  Forgot your password?\n                </Link>\n                \n                <p className=\"text-gray-600\">\n                  Don't have an account?{\" \"}\n                  <Link href=\"/signup\" className=\"text-orange-600 hover:text-orange-700 font-medium\">\n                    Sign Up\n                  </Link>\n                </p>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":5164},"client/src/pages/my-code.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { QrCode, Gift, Zap, Crown, Copy } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { User } from \"@shared/schema\";\nimport Navigation from \"@/components/Navigation\";\n\n// QR Code Generator Component\nfunction QRCodeGenerator({ data }: { data: string }) {\n  const size = 300;\n  const qrValue = encodeURIComponent(data);\n  const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${qrValue}&bgcolor=ffffff&color=ea580c&format=png&margin=8&ecc=H`;\n  \n  return (\n    <div className=\"flex justify-center p-6 bg-gradient-to-br from-orange-50 to-yellow-50 rounded-xl border-2 border-orange-200 shadow-lg\">\n      <img \n        src={qrUrl} \n        alt=\"Your Personal Hi-Vis QR Code\" \n        width={size} \n        height={size}\n        className=\"rounded-lg shadow-md max-w-full h-auto\"\n      />\n    </div>\n  );\n}\n\nfunction TierBadge({ tier, points }: { tier: string; points: number }) {\n  const getTierIcon = () => {\n    switch (tier) {\n      case 'Foreman': return <Crown className=\"w-5 h-5\" />;\n      case 'Tradie': return <Zap className=\"w-5 h-5\" />;\n      default: return <Gift className=\"w-5 h-5\" />;\n    }\n  };\n\n  const getTierColor = () => {\n    switch (tier) {\n      case 'Foreman': return 'bg-yellow-500 text-yellow-900';\n      case 'Tradie': return 'bg-orange-500 text-orange-900';\n      default: return 'bg-green-500 text-green-900';\n    }\n  };\n\n  return (\n    <div className={`inline-flex items-center gap-2 px-4 py-2 rounded-full font-semibold text-sm ${getTierColor()}`}>\n      {getTierIcon()}\n      {tier} • {points} pts\n    </div>\n  );\n}\n\nexport default function MyCode() {\n  const { user } = useAuth() as { user: User | null };\n  const { toast } = useToast();\n  const [qrData, setQrData] = useState<string>(\"\");\n  const [lastGenerated, setLastGenerated] = useState<Date | null>(null);\n\n  // Get permanent QR code data\n  const { data: permanentQrCode, isLoading: isQrLoading } = useQuery({\n    queryKey: [`/api/user/permanent-qr-code`],\n    enabled: !!user?.id,\n  });\n\n  // Auto-set QR code when permanent code is loaded\n  useEffect(() => {\n    if (permanentQrCode?.qrCode) {\n      setQrData(permanentQrCode.qrCode);\n      setLastGenerated(null); // No need for refresh timestamp with permanent codes\n    }\n  }, [permanentQrCode]);\n\n  // Copy QR data to clipboard\n  const copyQRData = async () => {\n    try {\n      await navigator.clipboard.writeText(qrData);\n      toast({\n        title: \"Copied!\",\n        description: \"QR code data copied to clipboard.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Copy Failed\",\n        description: \"Unable to copy to clipboard.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Get promotion benefits based on tier\n  const getPromotionBenefits = (tier: string) => {\n    const benefits: Record<string, string[]> = {\n      'Apprentice': [\n        '🎯 10% discount on any purchase',\n        '🆕 Welcome promotions'\n      ],\n      'Tradie': [\n        '⚡ Double points on energy drinks',\n        '🥤 15% off all beverages',\n        '💪 Enhanced tier promotions',\n        '✅ All Apprentice benefits'\n      ],\n      'Foreman': [\n        '☕ Free large coffee with any purchase',\n        '🏆 20% off + 50 bonus points combo',\n        '👑 Premium exclusive offers',\n        '✅ All Tradie & Apprentice benefits'\n      ]\n    };\n    return benefits[tier] || benefits['Apprentice'];\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 p-4\">\n        <div className=\"max-w-md mx-auto pt-20\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <QrCode className=\"w-12 h-12 mx-auto mb-4 text-orange-600\" />\n              <p>Please log in to view your QR code</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (isQrLoading || !qrData) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 p-4\">\n        <div className=\"max-w-md mx-auto pt-20\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <QrCode className=\"w-12 h-12 mx-auto mb-4 text-orange-600 animate-pulse\" />\n              <p>Generating your permanent QR code...</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const benefits = getPromotionBenefits((user as any)?.currentTier || 'Apprentice');\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 p-4 pb-20\">\n      <div className=\"max-w-lg mx-auto space-y-6\">\n        \n        {/* Header */}\n        <div className=\"text-center pt-4\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">My QR Code</h1>\n        </div>\n\n        {/* QR Code Display */}\n        <Card className=\"border-orange-200\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"flex items-center justify-center gap-2\">\n              <QrCode className=\"w-6 h-6 text-orange-600\" />\n              Your Personal QR Code\n            </CardTitle>\n            <CardDescription>\n              This permanent code identifies you at all Hi-Vis vending machines\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {qrData && <QRCodeGenerator data={qrData} />}\n            \n            {/* Action Button */}\n            <div className=\"flex justify-center\">\n              <Button \n                onClick={copyQRData}\n                variant=\"outline\"\n                className=\"border-orange-200 hover:bg-orange-50\"\n              >\n                <Copy className=\"w-4 h-4 mr-2\" />\n                Copy Data\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Available Promotions */}\n        <Card className=\"border-orange-200\">\n          <CardHeader>\n            <CardTitle className=\"text-lg text-orange-700\">\n              🎁 Your Available Promotions\n            </CardTitle>\n            <CardDescription>\n              Benefits you'll get when scanning at vending machines\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {benefits.map((benefit, index) => (\n                <div key={index} className=\"flex items-start gap-3 p-3 bg-orange-50 rounded-lg\">\n                  <div className=\"text-sm text-gray-700\">{benefit}</div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* How to Use */}\n        <Card className=\"border-orange-200\">\n          <CardHeader>\n            <CardTitle className=\"text-lg text-orange-700\">\n              📱 How to Use Your QR Code\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ol className=\"space-y-3 text-sm text-gray-700\">\n              <li className=\"flex gap-3\">\n                <span className=\"flex-shrink-0 w-6 h-6 bg-orange-100 text-orange-700 rounded-full flex items-center justify-center text-xs font-semibold\">1</span>\n                <span>Approach any Hi-Vis vending machine</span>\n              </li>\n              <li className=\"flex gap-3\">\n                <span className=\"flex-shrink-0 w-6 h-6 bg-orange-100 text-orange-700 rounded-full flex items-center justify-center text-xs font-semibold\">2</span>\n                <span>Hold your phone with this QR code up to the scanner</span>\n              </li>\n              <li className=\"flex gap-3\">\n                <span className=\"flex-shrink-0 w-6 h-6 bg-orange-100 text-orange-700 rounded-full flex items-center justify-center text-xs font-semibold\">3</span>\n                <span>Your promotions will be applied automatically!</span>\n              </li>\n              <li className=\"flex gap-3\">\n                <span className=\"flex-shrink-0 w-6 h-6 bg-orange-100 text-orange-700 rounded-full flex items-center justify-center text-xs font-semibold\">4</span>\n                <span>Complete your purchase and earn bonus points</span>\n              </li>\n            </ol>\n          </CardContent>\n        </Card>\n\n\n\n      </div>\n      \n      <Navigation />\n    </div>\n  );\n}","size_bytes":8509},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/Navigation\";\nimport LoyaltyProgress from \"@/components/LoyaltyProgress\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { HardHat, LogOut, History, Star, Trophy, Code, ExternalLink } from \"lucide-react\";\nimport { useLocation, Link } from \"wouter\";\nimport { User, Transaction } from \"@shared/schema\";\nimport { capitalizeName } from \"@/lib/utils\";\n\nexport default function Profile() {\n  const { user } = useAuth() as { user: User | null };\n  const [, setLocation] = useLocation();\n\n  const { data: transactions = [] } = useQuery<Transaction[]>({\n    queryKey: [\"/api/user/transactions\"],\n  });\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-slate-800 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <HardHat className=\"w-12 h-12 text-orange-500 mx-auto mb-4 animate-pulse\" />\n          <p className=\"text-white\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const getTierName = (tier: string) => {\n    switch (tier) {\n      case \"apprentice\": return \"Apprentice\";\n      case \"tradie\": return \"Tradie\";\n      case \"foreman\": return \"Foreman\";\n      default: return \"Apprentice\";\n    }\n  };\n\n  const getTierIcon = (tier: string) => {\n    switch (tier) {\n      case \"apprentice\": return <HardHat className=\"w-6 h-6\" />;\n      case \"tradie\": return <Star className=\"w-6 h-6\" />;\n      case \"foreman\": return <Trophy className=\"w-6 h-6\" />;\n      default: return <HardHat className=\"w-6 h-6\" />;\n    }\n  };\n\n  const getTierColor = (tier: string) => {\n    switch (tier) {\n      case \"apprentice\": return \"bg-slate-500\";\n      case \"tradie\": return \"bg-orange-500\";\n      case \"foreman\": return \"bg-yellow-400\";\n      default: return \"bg-slate-500\";\n    }\n  };\n\n  const totalPurchases = transactions.filter(t => t.type === 'purchase').length;\n  const totalRedemptions = transactions.filter(t => t.type === 'redemption').length;\n  const totalEarned = transactions\n    .filter(t => t.points > 0)\n    .reduce((sum, t) => sum + t.points, 0);\n\n  return (\n    <div className=\"min-h-screen bg-slate-800\">\n      {/* Header */}\n      <header className=\"bg-slate-800 border-b-4 border-orange-500 sticky top-0 z-50\">\n        <div className=\"flex items-center justify-center px-4 py-3\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 bg-orange-500 rounded-lg flex items-center justify-center\">\n              <HardHat className=\"text-slate-800 w-6 h-6\" />\n            </div>\n            <div>\n              <h1 className=\"text-white font-bold text-lg\">Profile</h1>\n              <p className=\"text-yellow-400 text-xs font-medium\">Manage your account</p>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"p-6 pb-20\">\n        {/* Profile Info */}\n        <div className=\"gradient-orange rounded-2xl p-6 text-slate-800 mb-6\">\n          <div className=\"flex items-center space-x-4 mb-4\">\n            <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center\">\n              <span className=\"text-2xl font-bold\">\n                {(user.firstName?.[0] || 'U').toUpperCase()}{(user.lastName?.[0] || '').toUpperCase()}\n              </span>\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold\">\n                {user.firstName ? `${capitalizeName(user.firstName)} ${capitalizeName(user.lastName || '')}` : 'User'}\n              </h2>\n              <div className=\"flex items-center space-x-2\">\n                <div className={`w-6 h-6 ${getTierColor(user.loyaltyTier || 'apprentice')} rounded-full flex items-center justify-center`}>\n                  {getTierIcon(user.loyaltyTier || 'apprentice')}\n                </div>\n                <span className=\"font-semibold\">{getTierName(user.loyaltyTier || 'apprentice')}</span>\n              </div>\n            </div>\n          </div>\n          \n          <LoyaltyProgress \n            tier={user.loyaltyTier || 'apprentice'}\n            points={user.totalPoints || 0}\n          />\n        </div>\n\n        {/* Stats */}\n        <section className=\"mb-6\">\n          <h3 className=\"text-white text-lg font-semibold mb-4\">Your Statistics</h3>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardContent className=\"p-4 text-center\">\n                <p className=\"text-2xl font-bold text-orange-500\">{user.totalPoints || 0}</p>\n                <p className=\"text-slate-300 text-sm\">Total Points</p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardContent className=\"p-4 text-center\">\n                <p className=\"text-2xl font-bold text-green-400\">{totalEarned}</p>\n                <p className=\"text-slate-300 text-sm\">Points Earned</p>\n              </CardContent>\n            </Card>\n            \n            <Link href=\"/transaction-history\">\n              <Card className=\"bg-slate-700 border-slate-600 cursor-pointer hover:bg-slate-600 transition-colors\">\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"flex items-center justify-center gap-2 mb-1\">\n                    <p className=\"text-2xl font-bold text-blue-400\">{totalPurchases}</p>\n                    <ExternalLink className=\"w-4 h-4 text-slate-400\" />\n                  </div>\n                  <p className=\"text-slate-300 text-sm\">Purchases</p>\n                  <p className=\"text-xs text-slate-400 mt-1\">View history</p>\n                </CardContent>\n              </Card>\n            </Link>\n            \n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardContent className=\"p-4 text-center\">\n                <p className=\"text-2xl font-bold text-yellow-400\">{totalRedemptions}</p>\n                <p className=\"text-slate-300 text-sm\">Rewards Redeemed</p>\n              </CardContent>\n            </Card>\n          </div>\n        </section>\n\n        {/* Account Info */}\n        <section className=\"mb-6\">\n          <h3 className=\"text-white text-lg font-semibold mb-4\">Account Information</h3>\n          <Card className=\"bg-slate-700 border-slate-600\">\n            <CardContent className=\"p-4 space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-slate-300\">Email:</span>\n                <span className=\"text-white\">{user.email || 'Not provided'}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-slate-300\">Suburb:</span>\n                <span className=\"text-white\">{user.suburb || 'Not set'}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-slate-300\">Member since:</span>\n                <span className=\"text-white\">\n                  {user.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'Unknown'}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-slate-300\">Punch card progress:</span>\n                <span className=\"text-orange-500 font-semibold\">\n                  {user.punchCardProgress || 0}/10\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Recent Activity */}\n        {transactions.length > 0 && (\n          <section className=\"mb-6\">\n            <h3 className=\"text-white text-lg font-semibold mb-4 flex items-center space-x-2\">\n              <History className=\"w-5 h-5\" />\n              <span>Recent Activity</span>\n            </h3>\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardContent className=\"p-0\">\n                {transactions.slice(0, 5).map((transaction, index) => (\n                  <div key={transaction.id} className={`p-4 flex items-center justify-between ${\n                    index < 4 ? 'border-b border-slate-600' : ''\n                  }`}>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                        transaction.type === 'purchase' ? 'bg-green-100' :\n                        transaction.type === 'redemption' ? 'bg-red-100' : 'bg-yellow-100'\n                      }`}>\n                        <span className={`text-xs font-bold ${\n                          transaction.type === 'purchase' ? 'text-green-600' :\n                          transaction.type === 'redemption' ? 'text-red-600' : 'text-yellow-600'\n                        }`}>\n                          {transaction.type === 'purchase' ? '+' : \n                           transaction.type === 'redemption' ? '−' : '★'}\n                        </span>\n                      </div>\n                      <div>\n                        <p className=\"font-semibold text-white text-sm capitalize\">{transaction.type}</p>\n                        <p className=\"text-xs text-slate-400\">\n                          {new Date(transaction.createdAt!).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className={`font-semibold text-sm ${\n                        transaction.points > 0 ? 'text-green-400' : 'text-red-400'\n                      }`}>\n                        {transaction.points > 0 ? '+' : ''}{transaction.points}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </section>\n        )}\n\n        {/* Developer Access (Byron only) */}\n        {user.email === 'byron@sydneyselectvending.com.au' && (\n          <Button \n            onClick={() => setLocation('/developer')}\n            className=\"w-full flex items-center justify-center space-x-2 mb-4 bg-purple-600 hover:bg-purple-700\"\n          >\n            <Code className=\"w-4 h-4\" />\n            <span>Developer Console</span>\n          </Button>\n        )}\n\n        {/* Logout Button */}\n        <Button \n          onClick={() => window.location.href = '/api/logout'}\n          variant=\"destructive\"\n          className=\"w-full flex items-center justify-center space-x-2\"\n        >\n          <LogOut className=\"w-4 h-4\" />\n          <span>Logout</span>\n        </Button>\n      </main>\n\n      <Navigation />\n    </div>\n  );\n}\n","size_bytes":10688},"client/src/pages/qr-scanner.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { QrCode, Scan, Gift, Zap, Star, ArrowLeft } from 'lucide-react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { QRCodeGenerator } from '@/components/QRCodeGenerator';\nimport { Link } from 'wouter';\n\ninterface Promotion {\n  id: string;\n  title: string;\n  description: string;\n  discount: number;\n  pointsBonus: number;\n  tierRequired: string;\n  type: 'discount' | 'bonus_points' | 'free_item';\n}\n\nexport default function QRScanner() {\n  const { user } = useAuth();\n  const [activePromotions, setActivePromotions] = useState<Promotion[]>([]);\n  const [availableOffers, setAvailableOffers] = useState<Promotion[]>([]);\n\n  useEffect(() => {\n    // Load promotions based on user tier\n    if (user) {\n      loadPromotionsForTier(user.currentTier || 'Apprentice');\n    }\n  }, [user]);\n\n  const loadPromotionsForTier = (tier: string) => {\n    // Sample promotions based on tier\n    const allPromotions: Promotion[] = [\n      {\n        id: 'promo-1',\n        title: 'Apprentice Welcome',\n        description: '10% off your next purchase',\n        discount: 10,\n        pointsBonus: 0,\n        tierRequired: 'Apprentice',\n        type: 'discount'\n      },\n      {\n        id: 'promo-2',\n        title: 'Tradie Power Hour',\n        description: 'Double points on energy drinks',\n        discount: 0,\n        pointsBonus: 20,\n        tierRequired: 'Tradie',\n        type: 'bonus_points'\n      },\n      {\n        id: 'promo-3',\n        title: 'Foreman Special',\n        description: 'Free large coffee with any purchase',\n        discount: 0,\n        pointsBonus: 0,\n        tierRequired: 'Foreman',\n        type: 'free_item'\n      },\n      {\n        id: 'promo-4',\n        title: 'Site Safety Bonus',\n        description: '25 bonus points for healthy snacks',\n        discount: 0,\n        pointsBonus: 25,\n        tierRequired: 'Apprentice',\n        type: 'bonus_points'\n      }\n    ];\n\n    // Filter promotions based on user tier\n    const tierOrder = ['Apprentice', 'Tradie', 'Foreman'];\n    const userTierIndex = tierOrder.indexOf(tier);\n    \n    const available = allPromotions.filter(promo => {\n      const promoTierIndex = tierOrder.indexOf(promo.tierRequired);\n      return promoTierIndex <= userTierIndex;\n    });\n\n    setAvailableOffers(available);\n    setActivePromotions(available.slice(0, 2)); // Show 2 active promotions\n  };\n\n  const getPromotionIcon = (type: string) => {\n    switch (type) {\n      case 'discount': return <Gift className=\"w-4 h-4\" />;\n      case 'bonus_points': return <Zap className=\"w-4 h-4\" />;\n      case 'free_item': return <Star className=\"w-4 h-4\" />;\n      default: return <Gift className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getPromotionColor = (type: string) => {\n    switch (type) {\n      case 'discount': return 'bg-green-600';\n      case 'bonus_points': return 'bg-blue-600';\n      case 'free_item': return 'bg-purple-600';\n      default: return 'bg-gray-600';\n    }\n  };\n\n  const getTierColor = (tier: string) => {\n    switch (tier.toLowerCase()) {\n      case 'foreman': return 'text-yellow-400 bg-yellow-900/20 border-yellow-400';\n      case 'tradie': return 'text-blue-400 bg-blue-900/20 border-blue-400';\n      default: return 'text-green-400 bg-green-900/20 border-green-400';\n    }\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-slate-900 flex items-center justify-center\">\n        <Card className=\"bg-slate-700 border-slate-600 max-w-md\">\n          <CardContent className=\"text-center p-6\">\n            <QrCode className=\"w-16 h-16 mx-auto text-orange-500 mb-4\" />\n            <h3 className=\"text-white text-lg font-semibold mb-2\">Login Required</h3>\n            <p className=\"text-slate-300 text-sm\">Please log in to access your personal QR code.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 text-white\">\n      {/* Header */}\n      <div className=\"bg-slate-800 border-b border-slate-700 p-4\">\n        <div className=\"flex items-center justify-between max-w-4xl mx-auto\">\n          <div className=\"flex items-center space-x-3\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-orange-500 hover:bg-slate-700\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Home\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-xl font-bold text-white\">QR Code Scanner</h1>\n              <p className=\"text-slate-400 text-sm\">Unlock promotions at vending machines</p>\n            </div>\n          </div>\n          <Badge className={`${getTierColor(user.currentTier || 'Apprentice')} border`}>\n            {user.currentTier || 'Apprentice'}\n          </Badge>\n        </div>\n      </div>\n\n      <div className=\"max-w-4xl mx-auto p-4 space-y-6\">\n        {/* User QR Code */}\n        <QRCodeGenerator \n          userId={user.id}\n          userTier={user.currentTier || 'Apprentice'}\n          totalPoints={user.totalPoints || 0}\n        />\n\n        {/* Active Promotions */}\n        <Card className=\"bg-slate-700 border-slate-600\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center\">\n              <Scan className=\"w-5 h-5 mr-2 text-orange-500\" />\n              Active Promotions Available\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {activePromotions.length > 0 ? (\n              <div className=\"grid gap-4\">\n                {activePromotions.map((promo) => (\n                  <div \n                    key={promo.id}\n                    className=\"bg-slate-800 p-4 rounded-lg border border-slate-600 hover:border-orange-500 transition-colors\"\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <Badge className={`${getPromotionColor(promo.type)} text-white`}>\n                            {getPromotionIcon(promo.type)}\n                            <span className=\"ml-1\">{promo.type.replace('_', ' ')}</span>\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"text-slate-300 border-slate-500\">\n                            {promo.tierRequired}+\n                          </Badge>\n                        </div>\n                        <h4 className=\"text-white font-semibold\">{promo.title}</h4>\n                        <p className=\"text-slate-300 text-sm mt-1\">{promo.description}</p>\n                        \n                        {promo.discount > 0 && (\n                          <div className=\"mt-2 text-green-400 font-semibold\">\n                            {promo.discount}% OFF\n                          </div>\n                        )}\n                        {promo.pointsBonus > 0 && (\n                          <div className=\"mt-2 text-blue-400 font-semibold\">\n                            +{promo.pointsBonus} Bonus Points\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <QrCode className=\"w-16 h-16 mx-auto text-slate-500 mb-4\" />\n                <p className=\"text-slate-400\">No active promotions available</p>\n                <p className=\"text-slate-500 text-sm mt-2\">Check back later for new offers!</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* How It Works */}\n        <Card className=\"bg-slate-700 border-slate-600\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">How QR Code Scanning Works</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <h4 className=\"text-white font-semibold mb-3\">At the Vending Machine:</h4>\n                <ol className=\"text-slate-300 text-sm space-y-2\">\n                  <li className=\"flex items-start\">\n                    <span className=\"bg-orange-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs mr-2 mt-0.5\">1</span>\n                    Find the \"Scan QR Code\" option on the Nayax DOT screen\n                  </li>\n                  <li className=\"flex items-start\">\n                    <span className=\"bg-orange-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs mr-2 mt-0.5\">2</span>\n                    Hold your phone with this QR code up to the scanner\n                  </li>\n                  <li className=\"flex items-start\">\n                    <span className=\"bg-orange-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs mr-2 mt-0.5\">3</span>\n                    Your promotions and discounts will be applied automatically\n                  </li>\n                  <li className=\"flex items-start\">\n                    <span className=\"bg-orange-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs mr-2 mt-0.5\">4</span>\n                    Complete your purchase and earn bonus points\n                  </li>\n                </ol>\n              </div>\n              \n              <div>\n                <h4 className=\"text-white font-semibold mb-3\">Benefits by Tier:</h4>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className=\"text-green-400 bg-green-900/20 border-green-400 border\">\n                      Apprentice\n                    </Badge>\n                    <span className=\"text-slate-300 text-sm\">Basic promotions + 10% discounts</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className=\"text-blue-400 bg-blue-900/20 border-blue-400 border\">\n                      Tradie\n                    </Badge>\n                    <span className=\"text-slate-300 text-sm\">Enhanced offers + double points</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className=\"text-yellow-400 bg-yellow-900/20 border-yellow-400 border\">\n                      Foreman\n                    </Badge>\n                    <span className=\"text-slate-300 text-sm\">Premium deals + free items</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-blue-100 border border-blue-400 p-4 rounded-lg\">\n              <p className=\"text-blue-800 text-sm font-semibold\">\n                💡 Pro Tip: Your QR code updates automatically with your current tier and points, \n                ensuring you always get the best available promotions!\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11243},"client/src/pages/referral.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Navigation from \"@/components/Navigation\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { HardHat, Share2, Gift, Users, Copy, QrCode } from \"lucide-react\";\n\nexport default function Referral() {\n  const [referralCodeInput, setReferralCodeInput] = useState(\"\");\n  const [showQR, setShowQR] = useState(false);\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: myReferralData } = useQuery({\n    queryKey: [\"/api/referral/my-code\"],\n  });\n\n  const useReferralMutation = useMutation({\n    mutationFn: async (referralCode: string) => {\n      const response = await apiRequest(\"POST\", \"/api/referral/use-code\", { referralCode });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/transactions\"] });\n      toast({\n        title: \"Welcome Bonus!\",\n        description: `You earned ${data.pointsEarned} points for using a referral code!`,\n      });\n      setReferralCodeInput(\"\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Invalid Code\",\n        description: error.message || \"This referral code is not valid\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUseReferralCode = () => {\n    if (!referralCodeInput.trim()) return;\n    useReferralMutation.mutate(referralCodeInput.trim().toUpperCase());\n  };\n\n  const copyReferralCode = () => {\n    if (myReferralData?.referralCode) {\n      navigator.clipboard.writeText(myReferralData.referralCode);\n      toast({\n        title: \"Copied!\",\n        description: \"Your referral code has been copied to clipboard\",\n      });\n    }\n  };\n\n  const shareReferralCode = () => {\n    if (myReferralData?.referralCode) {\n      const message = `Join Hi-Vis Vending loyalty program with my code ${myReferralData.referralCode} and get 25 free points! 🏗️`;\n      \n      if (navigator.share) {\n        navigator.share({\n          title: 'Join Hi-Vis Vending',\n          text: message,\n          url: window.location.origin\n        });\n      } else {\n        // Fallback for browsers without Web Share API\n        navigator.clipboard.writeText(message);\n        toast({\n          title: \"Copied!\",\n          description: \"Referral message copied to clipboard\",\n        });\n      }\n    }\n  };\n\n  const myReferralCode = myReferralData?.referralCode;\n  const hasUsedReferral = user?.referredBy;\n\n  return (\n    <div className=\"min-h-screen bg-slate-800\">\n      {/* Header */}\n      <header className=\"bg-slate-800 border-b-4 border-orange-500 sticky top-0 z-50\">\n        <div className=\"flex items-center justify-center px-4 py-3\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 bg-orange-500 rounded-lg flex items-center justify-center\">\n              <HardHat className=\"text-slate-800 w-6 h-6\" />\n            </div>\n            <div>\n              <h1 className=\"text-white font-bold text-lg\">Refer-a-Mate</h1>\n              <p className=\"text-yellow-400 text-xs font-medium\">Share the rewards with your crew</p>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"p-6 pb-20\">\n        {/* Hero Section */}\n        <div className=\"gradient-orange rounded-2xl p-6 text-slate-800 mb-6\">\n          <div className=\"text-center\">\n            <Users className=\"w-16 h-16 mx-auto mb-3\" />\n            <h2 className=\"text-2xl font-bold mb-2\">Bring Your Mates!</h2>\n            <p className=\"text-lg opacity-90\">Share your code, earn together</p>\n          </div>\n        </div>\n\n        {/* How it Works */}\n        <section className=\"mb-6\">\n          <h3 className=\"text-white text-lg font-semibold mb-4\">How It Works:</h3>\n          <div className=\"space-y-3\">\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardContent className=\"p-4 flex items-center space-x-4\">\n                <div className=\"w-10 h-10 bg-orange-500 rounded-full flex items-center justify-center text-slate-800 font-bold\">\n                  1\n                </div>\n                <div>\n                  <p className=\"font-semibold text-white\">Share your code</p>\n                  <p className=\"text-sm text-slate-400\">Send your unique code to workmates</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardContent className=\"p-4 flex items-center space-x-4\">\n                <div className=\"w-10 h-10 bg-yellow-400 rounded-full flex items-center justify-center text-slate-800 font-bold\">\n                  2\n                </div>\n                <div>\n                  <p className=\"font-semibold text-white\">They join & earn</p>\n                  <p className=\"text-sm text-slate-400\">New mate gets 25 welcome points</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardContent className=\"p-4 flex items-center space-x-4\">\n                <div className=\"w-10 h-10 bg-green-500 rounded-full flex items-center justify-center text-white font-bold\">\n                  3\n                </div>\n                <div>\n                  <p className=\"font-semibold text-white\">You get rewarded</p>\n                  <p className=\"text-sm text-slate-400\">Earn 50 points for each referral</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </section>\n\n        {/* My Referral Code */}\n        <section className=\"mb-6\">\n          <h3 className=\"text-white text-lg font-semibold mb-4\">Your Referral Code</h3>\n          <Card className=\"bg-white border-slate-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-center\">\n                <div className=\"safety-stripes w-16 h-4 rounded mx-auto mb-4\"></div>\n                <div className=\"text-4xl font-bold text-slate-800 mb-2 tracking-wider\">\n                  {myReferralCode || \"LOADING...\"}\n                </div>\n                <p className=\"text-slate-600 mb-4\">Share this code with your workmates</p>\n                \n                <div className=\"flex space-x-2 justify-center\">\n                  <Button\n                    onClick={copyReferralCode}\n                    disabled={!myReferralCode}\n                    className=\"bg-orange-500 hover:bg-orange-600 text-slate-800\"\n                  >\n                    <Copy className=\"w-4 h-4 mr-2\" />\n                    Copy Code\n                  </Button>\n                  \n                  <Button\n                    onClick={shareReferralCode}\n                    disabled={!myReferralCode}\n                    className=\"bg-yellow-400 hover:bg-yellow-500 text-slate-800\"\n                  >\n                    <Share2 className=\"w-4 h-4 mr-2\" />\n                    Share\n                  </Button>\n                </div>\n                \n                <div className=\"mt-4\">\n                  <Button\n                    onClick={() => setShowQR(!showQR)}\n                    variant=\"outline\"\n                    className=\"text-slate-600 border-slate-300\"\n                  >\n                    <QrCode className=\"w-4 h-4 mr-2\" />\n                    {showQR ? \"Hide\" : \"Show\"} QR Code\n                  </Button>\n                </div>\n\n                {showQR && myReferralCode && (\n                  <div className=\"mt-4 p-4 bg-slate-100 rounded-lg\">\n                    <div className=\"w-32 h-32 bg-slate-300 rounded-lg mx-auto flex items-center justify-center\">\n                      <QrCode className=\"w-16 h-16 text-slate-600\" />\n                    </div>\n                    <p className=\"text-xs text-slate-500 mt-2\">Scan to join with code {myReferralCode}</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Use Referral Code */}\n        {!hasUsedReferral && (\n          <section className=\"mb-6\">\n            <h3 className=\"text-white text-lg font-semibold mb-4\">Got a Mate's Code?</h3>\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"referralCode\" className=\"text-white\">\n                      Enter Referral Code\n                    </Label>\n                    <Input\n                      id=\"referralCode\"\n                      value={referralCodeInput}\n                      onChange={(e) => setReferralCodeInput(e.target.value.toUpperCase())}\n                      placeholder=\"Enter 6-character code\"\n                      maxLength={6}\n                      className=\"mt-1 bg-slate-800 border-slate-600 text-white\"\n                    />\n                  </div>\n                  \n                  <Button\n                    onClick={handleUseReferralCode}\n                    disabled={!referralCodeInput.trim() || useReferralMutation.isPending}\n                    className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n                  >\n                    <Gift className=\"w-4 h-4 mr-2\" />\n                    {useReferralMutation.isPending ? \"Checking...\" : \"Use Code & Get 25 Points\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n        )}\n\n        {hasUsedReferral && (\n          <section className=\"mb-6\">\n            <Card className=\"bg-green-600 border-green-500\">\n              <CardContent className=\"p-6 text-center\">\n                <Gift className=\"w-12 h-12 text-white mx-auto mb-3\" />\n                <h3 className=\"text-white font-semibold mb-2\">Welcome Bonus Claimed!</h3>\n                <p className=\"text-green-100\">You've already used a referral code and earned your welcome points.</p>\n              </CardContent>\n            </Card>\n          </section>\n        )}\n\n        {/* Referral Stats - Moved to Bottom */}\n        <section>\n          <h3 className=\"text-white text-lg font-semibold mb-4\">Your Referrals</h3>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardContent className=\"p-4 text-center\">\n                <p className=\"text-3xl font-bold text-orange-500\">{user?.referralCount || 0}</p>\n                <p className=\"text-slate-300\">Mates Referred</p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardContent className=\"p-4 text-center\">\n                <p className=\"text-3xl font-bold text-green-400\">{(user?.referralCount || 0) * 50}</p>\n                <p className=\"text-slate-300\">Bonus Points</p>\n              </CardContent>\n            </Card>\n          </div>\n        </section>\n      </main>\n\n      <Navigation />\n    </div>\n  );\n}","size_bytes":11418},"client/src/pages/reset-password.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { HardHat, Lock, CheckCircle } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\n\nexport default function ResetPassword() {\n  const [formData, setFormData] = useState({\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const [token, setToken] = useState(\"\");\n  const [isComplete, setIsComplete] = useState(false);\n  const [location] = useLocation();\n  const { toast } = useToast();\n\n  // Extract token from URL\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const tokenFromUrl = urlParams.get('token');\n    if (tokenFromUrl) {\n      setToken(tokenFromUrl);\n    } else {\n      toast({\n        title: \"Invalid Reset Link\",\n        description: \"This password reset link is invalid or has expired\",\n        variant: \"destructive\",\n      });\n    }\n  }, [location, toast]);\n\n  const resetMutation = useMutation({\n    mutationFn: async (data: { token: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/reset-password\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      setIsComplete(true);\n      toast({\n        title: \"Password Reset Successfully\",\n        description: \"You can now log in with your new password.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Reset Failed\",\n        description: error.message || \"Failed to reset password. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.password.trim() || !formData.confirmPassword.trim()) {\n      toast({\n        title: \"Required Fields\",\n        description: \"Please fill in both password fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Password Mismatch\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      toast({\n        title: \"Password Too Short\",\n        description: \"Password must be at least 6 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!token) {\n      toast({\n        title: \"Invalid Token\",\n        description: \"Reset token is missing or invalid\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    resetMutation.mutate({ token, password: formData.password });\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  if (isComplete) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 flex items-center justify-center p-4\">\n        <div className=\"max-w-md w-full\">\n          <Card className=\"border-orange-200 shadow-lg\">\n            <CardHeader className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <CheckCircle className=\"w-8 h-8 text-white\" />\n              </div>\n              <CardTitle className=\"text-2xl text-gray-900\">Password Reset Complete</CardTitle>\n              <p className=\"text-gray-600\">\n                Your password has been successfully updated\n              </p>\n            </CardHeader>\n            \n            <CardContent>\n              <Link href=\"/login\">\n                <Button className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\">\n                  Continue to Login\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (!token) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 flex items-center justify-center p-4\">\n        <div className=\"max-w-md w-full\">\n          <Card className=\"border-orange-200 shadow-lg\">\n            <CardHeader className=\"text-center\">\n              <div className=\"w-16 h-16 bg-red-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <HardHat className=\"w-8 h-8 text-white\" />\n              </div>\n              <CardTitle className=\"text-2xl text-gray-900\">Invalid Reset Link</CardTitle>\n              <p className=\"text-gray-600\">\n                This password reset link is invalid or has expired\n              </p>\n            </CardHeader>\n            \n            <CardContent>\n              <Link href=\"/forgot-password\">\n                <Button className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\">\n                  Request New Reset Link\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 flex items-center justify-center p-4\">\n      <div className=\"max-w-md w-full\">\n        <Card className=\"border-orange-200 shadow-lg\">\n          <CardHeader className=\"text-center\">\n            <div className=\"w-16 h-16 bg-orange-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <HardHat className=\"w-8 h-8 text-white\" />\n            </div>\n            <CardTitle className=\"text-2xl text-gray-900\">Set New Password</CardTitle>\n            <p className=\"text-gray-600\">\n              Choose a strong password for your account\n            </p>\n          </CardHeader>\n          \n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-gray-700 font-medium\">\n                  New Password\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    value={formData.password}\n                    onChange={(e) => handleInputChange(\"password\", e.target.value)}\n                    placeholder=\"At least 6 characters\"\n                    className=\"pl-10 border-orange-200 focus:border-orange-500\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\" className=\"text-gray-700 font-medium\">\n                  Confirm New Password\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <Input\n                    id=\"confirmPassword\"\n                    type=\"password\"\n                    value={formData.confirmPassword}\n                    onChange={(e) => handleInputChange(\"confirmPassword\", e.target.value)}\n                    placeholder=\"Confirm your new password\"\n                    className=\"pl-10 border-orange-200 focus:border-orange-500\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={resetMutation.isPending}\n                className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n              >\n                {resetMutation.isPending ? \"Updating Password...\" : \"Update Password\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7999},"client/src/pages/rewards.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Navigation from \"@/components/Navigation\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { HardHat, Coffee, Cookie, Gift, Copy, Check } from \"lucide-react\";\n\nexport default function Rewards() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // State for redemption modal\n  const [showRedemptionModal, setShowRedemptionModal] = useState(false);\n  const [redemptionCode, setRedemptionCode] = useState(\"\");\n\n  const { data: rewards = [] } = useQuery({\n    queryKey: [\"/api/rewards\"],\n  });\n\n  // Clipboard state\n  const [copiedCode, setCopiedCode] = useState(false);\n\n  const redeemMutation = useMutation({\n    mutationFn: async (rewardId: string) => {\n      const response = await apiRequest(\"POST\", \"/api/rewards/redeem\", { rewardId });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/transactions\"] });\n      setRedemptionCode(data.redemptionCode);\n      setShowRedemptionModal(true);\n      toast({\n        title: \"Reward Redeemed!\",\n        description: `Your redemption code is: ${data.redemptionCode}`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Redemption Failed\",\n        description: error.message || \"Failed to redeem reward\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(redemptionCode);\n    setCopiedCode(true);\n    setTimeout(() => setCopiedCode(false), 2000);\n    toast({\n      title: \"Code Copied!\",\n      description: \"Redemption code copied to clipboard\",\n    });\n  };\n\n  const getRewardIcon = (category: string) => {\n    switch (category) {\n      case 'drink':\n        return <Coffee className=\"text-white w-6 h-6\" />;\n      case 'snack':\n        return <Cookie className=\"text-white w-6 h-6\" />;\n      default:\n        return <Gift className=\"text-white w-6 h-6\" />;\n    }\n  };\n\n  const getRewardColor = (category: string) => {\n    switch (category) {\n      case 'drink':\n        return 'bg-blue-500';\n      case 'snack':\n        return 'bg-orange-500';\n      default:\n        return 'bg-green-500';\n    }\n  };\n\n  const userPoints = user?.totalPoints || 0;\n\n  return (\n    <div className=\"min-h-screen bg-slate-800\">\n      {/* Header */}\n      <header className=\"bg-slate-800 border-b-4 border-orange-500 sticky top-0 z-50\">\n        <div className=\"flex items-center justify-center px-4 py-3\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 bg-orange-500 rounded-lg flex items-center justify-center\">\n              <HardHat className=\"text-slate-800 w-6 h-6\" />\n            </div>\n            <div>\n              <h1 className=\"text-white font-bold text-lg\">Rewards</h1>\n              <p className=\"text-yellow-400 text-xs font-medium\">{userPoints} points available</p>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"p-6 pb-20\">\n        {/* Points Balance */}\n        <div className=\"gradient-orange rounded-2xl p-6 text-slate-800 mb-6\">\n          <div className=\"text-center\">\n            <h2 className=\"text-3xl font-bold\">{userPoints}</h2>\n            <p className=\"text-lg opacity-90\">Available Points</p>\n          </div>\n        </div>\n\n        {/* Available Rewards */}\n        <section>\n          <h3 className=\"text-white text-lg font-semibold mb-4\">Available Rewards</h3>\n          \n          {rewards.length === 0 ? (\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardContent className=\"p-6 text-center\">\n                <Gift className=\"w-12 h-12 text-slate-400 mx-auto mb-3\" />\n                <p className=\"text-slate-300\">No rewards available at the moment</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-3\">\n              {rewards.map((reward: any) => {\n                const canAfford = userPoints >= reward.pointsCost;\n                const isRedeeming = redeemMutation.isPending;\n                \n                return (\n                  <Card key={reward.id} className={`bg-slate-700 border-slate-600 ${!canAfford ? 'opacity-50' : ''}`}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className={`w-12 h-12 ${getRewardColor(reward.category)} rounded-full flex items-center justify-center`}>\n                            {getRewardIcon(reward.category)}\n                          </div>\n                          <div>\n                            <p className=\"font-semibold text-white\">{reward.name}</p>\n                            <p className=\"text-sm text-slate-400\">{reward.pointsCost} points required</p>\n                            {reward.description && (\n                              <p className=\"text-xs text-slate-500 mt-1\">{reward.description}</p>\n                            )}\n                          </div>\n                        </div>\n                        <Button\n                          onClick={() => redeemMutation.mutate(reward.id)}\n                          disabled={!canAfford || isRedeeming}\n                          className={`${\n                            canAfford \n                              ? \"bg-orange-500 hover:bg-orange-600 text-slate-800\" \n                              : \"bg-slate-600 text-slate-400 cursor-not-allowed\"\n                          } font-semibold px-4 py-2`}\n                        >\n                          {isRedeeming ? \"Redeeming...\" : canAfford ? \"Redeem\" : \"Insufficient\"}\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </section>\n\n        {/* Redemption Tips */}\n        <section className=\"mt-8\">\n          <Card className=\"bg-slate-700 border-slate-600\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-white font-semibold mb-3\">How to earn more points:</h3>\n              <ul className=\"text-slate-300 space-y-2\">\n                <li className=\"flex items-center space-x-2\">\n                  <span className=\"w-2 h-2 bg-orange-500 rounded-full\"></span>\n                  <span>Scan QR codes at vending machines (+10 points)</span>\n                </li>\n                <li className=\"flex items-center space-x-2\">\n                  <span className=\"w-2 h-2 bg-yellow-400 rounded-full\"></span>\n                  <span>Complete your punch card (+100 points)</span>\n                </li>\n                <li className=\"flex items-center space-x-2\">\n                  <span className=\"w-2 h-2 bg-green-500 rounded-full\"></span>\n                  <span>Achieve higher loyalty tiers for bonuses</span>\n                </li>\n              </ul>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Referral Section */}\n        <section className=\"mt-8\">\n          <h3 className=\"text-white text-lg font-semibold mb-4 flex items-center\">\n            <Gift className=\"w-5 h-5 mr-2\" />\n            Earn More Points\n          </h3>\n          \n          {/* Referral Rewards */}\n          <Card className=\"bg-slate-700 border-slate-600 mb-4\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-center\">\n                <h4 className=\"text-white font-semibold mb-2\">Invite Your Workmates!</h4>\n                <p className=\"text-slate-300 text-sm mb-4\">\n                  Share Hi-Vis Vending with friends and earn bonus points when they sign up.\n                </p>\n                <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                  <div className=\"bg-slate-800 rounded-lg p-3\">\n                    <p className=\"text-orange-400 font-bold text-lg\">+25</p>\n                    <p className=\"text-slate-400 text-xs\">Points for you</p>\n                  </div>\n                  <div className=\"bg-slate-800 rounded-lg p-3\">\n                    <p className=\"text-green-400 font-bold text-lg\">+25</p>\n                    <p className=\"text-slate-400 text-xs\">Points for them</p>\n                  </div>\n                </div>\n                <Button \n                  onClick={() => window.location.href = '/referral'}\n                  className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n                >\n                  <Gift className=\"w-4 h-4 mr-2\" />\n                  View My Referral Code\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n      </main>\n\n      <Navigation />\n\n      {/* Redemption Modal */}\n      <Dialog open={showRedemptionModal} onOpenChange={setShowRedemptionModal}>\n        <DialogContent className=\"bg-slate-700 border-slate-600\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white flex items-center\">\n              <Gift className=\"w-5 h-5 mr-2 text-orange-500\" />\n              Reward Redeemed Successfully!\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"text-center\">\n              <p className=\"text-slate-300 mb-4\">\n                Show this code at any Hi-Vis vending machine to claim your reward:\n              </p>\n              <div className=\"bg-slate-800 p-4 rounded-lg border-2 border-orange-500\">\n                <div className=\"text-2xl font-mono text-orange-400 font-bold tracking-wider\">\n                  {redemptionCode}\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex space-x-2\">\n              <Button\n                onClick={copyToClipboard}\n                className=\"flex-1 bg-orange-600 hover:bg-orange-700 text-white\"\n              >\n                {copiedCode ? (\n                  <>\n                    <Check className=\"w-4 h-4 mr-2\" />\n                    Copied!\n                  </>\n                ) : (\n                  <>\n                    <Copy className=\"w-4 h-4 mr-2\" />\n                    Copy Code\n                  </>\n                )}\n              </Button>\n              <Button\n                onClick={() => setShowRedemptionModal(false)}\n                variant=\"outline\"\n                className=\"border-slate-600 text-white hover:bg-slate-600\"\n              >\n                Close\n              </Button>\n            </div>\n\n            <div className=\"text-xs text-slate-400 text-center\">\n              💡 Pro Tip: Screenshot this code or copy it to use at the vending machine\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":11231},"client/src/pages/scan-old.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { HardHat, QrCode, CheckCircle, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Scan() {\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanResult, setScanResult] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const scanMutation = useMutation({\n    mutationFn: async (qrData: string) => {\n      const response = await apiRequest(\"POST\", \"/api/qr/scan\", { qrData });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setScanResult(data);\n      setIsScanning(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/transactions\"] });\n      toast({\n        title: \"Success!\",\n        description: `Earned ${data.pointsEarned} points from your purchase!`,\n      });\n    },\n    onError: (error) => {\n      setIsScanning(false);\n      toast({\n        title: \"Scan Failed\",\n        description: error.message || \"Invalid QR code\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleScan = (data: string) => {\n    if (data) {\n      scanMutation.mutate(data);\n    }\n  };\n\n  const handleStartScan = () => {\n    setIsScanning(true);\n    setScanResult(null);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 p-4\">\n      {/* Header */}\n      <div className=\"max-w-lg mx-auto\">\n        <div className=\"flex items-center gap-4 mb-6 pt-4\">\n          <Link href=\"/\">\n            <Button variant=\"outline\" size=\"icon\" className=\"border-orange-200\">\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">QR Scanner</h1>\n            <p className=\"text-gray-600\">Scan machine codes to earn points</p>\n          </div>\n        </div>\n\n        {/* Info Card */}\n        <Card className=\"mb-6 border-orange-200\">\n          <CardContent className=\"p-6 text-center\">\n            <QrCode className=\"w-12 h-12 mx-auto mb-4 text-orange-600\" />\n            <h2 className=\"text-xl font-semibold mb-2\">Looking for your personal QR code?</h2>\n            <p className=\"text-gray-600 mb-4\">\n              Each customer now has their own unique QR code for instant promotions at vending machines.\n            </p>\n            <Link href=\"/my-code\">\n              <Button className=\"bg-orange-600 hover:bg-orange-700 text-white\">\n                Go to My Code\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n\n        {/* Legacy Scanner */}\n        <Card className=\"border-orange-200\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\">Manual Points Entry</h3>\n            <p className=\"text-gray-600 mb-4\">\n              Use this to manually add points for purchases (fallback method).\n            </p>\n            \n            {!isScanning && !scanResult && (\n              <Button \n                onClick={handleStartScan}\n                className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n              >\n                Start Manual Scanner\n              </Button>\n            )}\n            \n            {scanResult && (\n              <div className=\"text-center\">\n                <CheckCircle className=\"w-12 h-12 mx-auto mb-4 text-green-600\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Points Added!</h3>\n                <p className=\"text-gray-600\">\n                  You earned {scanResult.pointsEarned} points from your purchase.\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n            <div className=\"w-12 h-12 bg-orange-500 rounded-lg flex items-center justify-center\">\n              <HardHat className=\"text-slate-800 w-6 h-6\" />\n            </div>\n            <div>\n              <h1 className=\"text-white font-bold text-lg\">Scan QR Code</h1>\n              <p className=\"text-yellow-400 text-xs font-medium\">Earn points with every purchase</p>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"p-6 pb-20\">\n        {!isScanning && !scanResult && (\n          <div className=\"text-center space-y-6\">\n            <div className=\"gradient-orange rounded-2xl p-8 text-slate-800\">\n              <QrCode className=\"w-16 h-16 mx-auto mb-4\" />\n              <h2 className=\"text-2xl font-bold mb-2\">Ready to Scan</h2>\n              <p className=\"text-lg opacity-90\">Point your camera at the vending machine QR code</p>\n            </div>\n\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-white font-semibold mb-3\">How it works:</h3>\n                <ol className=\"text-slate-300 space-y-2 text-left\">\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"bg-orange-500 text-slate-800 rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold\">1</span>\n                    <span>Tap \"Start Scanning\" below</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"bg-orange-500 text-slate-800 rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold\">2</span>\n                    <span>Point camera at machine QR code</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <span className=\"bg-orange-500 text-slate-800 rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold\">3</span>\n                    <span>Earn 10 points automatically</span>\n                  </li>\n                </ol>\n              </CardContent>\n            </Card>\n\n            <Button \n              onClick={handleStartScan}\n              className=\"w-full bg-orange-500 hover:bg-orange-600 text-slate-800 font-bold py-4 text-lg\"\n            >\n              Start Scanning\n            </Button>\n          </div>\n        )}\n\n        {isScanning && (\n          <QRScanner \n            onScan={handleScan}\n            onClose={() => setIsScanning(false)}\n            isLoading={scanMutation.isPending}\n          />\n        )}\n\n        {scanResult && (\n          <div className=\"text-center space-y-6\">\n            <div className=\"bg-green-600 rounded-2xl p-8 text-white\">\n              <CheckCircle className=\"w-16 h-16 mx-auto mb-4\" />\n              <h2 className=\"text-2xl font-bold mb-2\">Scan Successful!</h2>\n              <p className=\"text-lg opacity-90\">You earned {scanResult.pointsEarned} points</p>\n            </div>\n\n            <Card className=\"bg-slate-700 border-slate-600\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-white font-semibold mb-3\">Transaction Details:</h3>\n                <div className=\"text-slate-300 space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Points Earned:</span>\n                    <span className=\"text-green-400 font-semibold\">+{scanResult.pointsEarned}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Time:</span>\n                    <span>{new Date().toLocaleTimeString()}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Button \n              onClick={() => setScanResult(null)}\n              className=\"w-full bg-orange-500 hover:bg-orange-600 text-slate-800 font-bold py-3\"\n            >\n              Scan Another Code\n            </Button>\n          </div>\n        )}\n      </main>\n\n      <Navigation />\n    </div>\n  );\n}\n","size_bytes":8085},"client/src/pages/scan.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { QrCode, CheckCircle, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useAnimation } from \"@/contexts/AnimationContext\";\n\nexport default function Scan() {\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanResult, setScanResult] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { showPointsGained, showTierUpgrade } = useAnimation();\n\n  const scanMutation = useMutation({\n    mutationFn: async (qrData: string) => {\n      const response = await apiRequest(\"POST\", \"/api/qr/scan\", { qrData });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setScanResult(data);\n      setIsScanning(false);\n      \n      // Show points gained animation\n      if (data.pointsEarned) {\n        showPointsGained(data.pointsEarned);\n      }\n      \n      // Check if user upgraded tier and show animation\n      if (data.tierUpgrade) {\n        setTimeout(() => {\n          showTierUpgrade(data.tierUpgrade);\n        }, 1500); // Delay tier animation after points animation\n      }\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/transactions\"] });\n      toast({\n        title: \"Success!\",\n        description: `Earned ${data.pointsEarned} points from your purchase!`,\n      });\n    },\n    onError: (error) => {\n      setIsScanning(false);\n      toast({\n        title: \"Scan Failed\",\n        description: error.message || \"Invalid QR code\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleScan = (data: string) => {\n    if (data) {\n      scanMutation.mutate(data);\n    }\n  };\n\n  const handleStartScan = () => {\n    setIsScanning(true);\n    setScanResult(null);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 p-4\">\n      {/* Header */}\n      <div className=\"max-w-lg mx-auto\">\n        <div className=\"flex items-center gap-4 mb-6 pt-4\">\n          <Link href=\"/\">\n            <Button variant=\"outline\" size=\"icon\" className=\"border-orange-200\">\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">QR Scanner</h1>\n            <p className=\"text-gray-600\">Scan machine codes to earn points</p>\n          </div>\n        </div>\n\n        {/* Redirect to My Code */}\n        <Card className=\"border-orange-200\">\n          <CardContent className=\"p-6 text-center\">\n            <QrCode className=\"w-16 h-16 mx-auto mb-4 text-orange-600\" />\n            <h2 className=\"text-xl font-semibold mb-2\">QR Scanner Moved</h2>\n            <p className=\"text-gray-600 mb-4\">\n              The scanner feature has been replaced with personalized QR codes. Each customer now has their own unique code.\n            </p>\n            <Link href=\"/my-code\">\n              <Button className=\"bg-orange-600 hover:bg-orange-700 text-white\">\n                Go to My Code\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n\n        {/* Animation Demo Section */}\n        <Card className=\"border-orange-200 mt-4\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4 text-orange-800\">Animation Demo</h3>\n            <div className=\"space-y-3\">\n              <Button \n                onClick={() => showPointsGained(25)}\n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n              >\n                Demo: +25 Points Animation\n              </Button>\n              <Button \n                onClick={() => showTierUpgrade(\"tradie\")}\n                className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n              >\n                Demo: Tier Upgrade (Tradie)\n              </Button>\n              <Button \n                onClick={() => showTierUpgrade(\"foreman\")}\n                className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white\"\n              >\n                Demo: Tier Upgrade (Foreman)\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":4481},"client/src/pages/signup.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { HardHat, Mail, Phone, Lock, User, MapPin } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\n\nexport default function Signup() {\n  const [formData, setFormData] = useState({\n    fullName: \"\",\n    email: \"\",\n    mobile: \"\",\n    suburb: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  // Suburb mapping function\n  const mapSuburbToGroup = (selectedSuburb: string): string => {\n    switch (selectedSuburb.toLowerCase()) {\n      case 'seven hills':\n        return 'Girraween';\n      case 'parramatta':\n        return 'Harris Park';\n      case 'wahroonga':\n      case 'girraween':\n      case 'harris park':\n        return selectedSuburb;\n      default:\n        return selectedSuburb;\n    }\n  };\n\n  const suburbOptions = [\n    { value: 'Wahroonga', label: 'Wahroonga' },\n    { value: 'Girraween', label: 'Girraween' },\n    { value: 'Seven Hills', label: 'Seven Hills (counted as Girraween)' },\n    { value: 'Harris Park', label: 'Harris Park' },\n    { value: 'Parramatta', label: 'Parramatta (counted as Harris Park)' },\n  ];\n\n  const signupMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/signup\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Welcome to Hi-Vis Vending!\",\n        description: \"Your account has been created successfully.\",\n      });\n      // Redirect to home page after successful signup\n      setLocation(\"/\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Signup Failed\",\n        description: error.message || \"Please check your details and try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validation\n    if (!formData.fullName.trim() || !formData.email.trim() || !formData.mobile.trim() || \n        !formData.suburb.trim() || !formData.password.trim()) {\n      toast({\n        title: \"Required Fields\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Password Mismatch\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      toast({\n        title: \"Password Too Short\",\n        description: \"Password must be at least 6 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const mappedSuburb = mapSuburbToGroup(formData.suburb);\n    signupMutation.mutate({\n      ...formData,\n      suburb: mappedSuburb\n    });\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 flex items-center justify-center p-4\">\n      <div className=\"max-w-md w-full\">\n        <Card className=\"border-orange-200 shadow-lg\">\n          <CardHeader className=\"text-center\">\n            <div className=\"w-16 h-16 bg-orange-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <HardHat className=\"w-8 h-8 text-white\" />\n            </div>\n            <CardTitle className=\"text-2xl text-gray-900\">Join Hi-Vis Vending</CardTitle>\n            <p className=\"text-gray-600\">\n              Create your account to start earning loyalty points\n            </p>\n          </CardHeader>\n          \n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"fullName\" className=\"text-gray-700 font-medium\">\n                  Full Name *\n                </Label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <Input\n                    id=\"fullName\"\n                    type=\"text\"\n                    value={formData.fullName}\n                    onChange={(e) => handleInputChange(\"fullName\", e.target.value)}\n                    placeholder=\"e.g. John Smith\"\n                    className=\"pl-10 border-orange-200 focus:border-orange-500\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-gray-700 font-medium\">\n                  Email Address *\n                </Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                    placeholder=\"john@example.com\"\n                    className=\"pl-10 border-orange-200 focus:border-orange-500\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"mobile\" className=\"text-gray-700 font-medium\">\n                  Mobile Number *\n                </Label>\n                <div className=\"relative\">\n                  <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <Input\n                    id=\"mobile\"\n                    type=\"tel\"\n                    value={formData.mobile}\n                    onChange={(e) => handleInputChange(\"mobile\", e.target.value)}\n                    placeholder=\"0412 345 678\"\n                    className=\"pl-10 border-orange-200 focus:border-orange-500\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"suburb\" className=\"text-gray-700 font-medium\">\n                  Work Location *\n                </Label>\n                <Select value={formData.suburb} onValueChange={(value) => handleInputChange(\"suburb\", value)}>\n                  <SelectTrigger className=\"border-orange-200 focus:border-orange-500\">\n                    <div className=\"flex items-center\">\n                      <MapPin className=\"w-4 h-4 text-gray-400 mr-2\" />\n                      <SelectValue placeholder=\"Select your work location\" />\n                    </div>\n                  </SelectTrigger>\n                  <SelectContent>\n                    {suburbOptions.map((option) => (\n                      <SelectItem key={option.value} value={option.value}>\n                        {option.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <p className=\"text-sm text-gray-500\">\n                  We use this to group you with other workers in your area for local leaderboards and promotions.\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-gray-700 font-medium\">\n                  Password *\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    value={formData.password}\n                    onChange={(e) => handleInputChange(\"password\", e.target.value)}\n                    placeholder=\"At least 6 characters\"\n                    className=\"pl-10 border-orange-200 focus:border-orange-500\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\" className=\"text-gray-700 font-medium\">\n                  Confirm Password *\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <Input\n                    id=\"confirmPassword\"\n                    type=\"password\"\n                    value={formData.confirmPassword}\n                    onChange={(e) => handleInputChange(\"confirmPassword\", e.target.value)}\n                    placeholder=\"Confirm your password\"\n                    className=\"pl-10 border-orange-200 focus:border-orange-500\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={signupMutation.isPending}\n                className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n              >\n                {signupMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n              </Button>\n\n              <div className=\"text-center pt-4\">\n                <p className=\"text-gray-600\">\n                  Already have an account?{\" \"}\n                  <Link href=\"/login\" className=\"text-orange-600 hover:text-orange-700 font-medium\">\n                    Log In\n                  </Link>\n                </p>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10210},"client/src/pages/transaction-history.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ArrowLeft, DollarSign, Gift, Zap } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { format } from \"date-fns\";\n\ninterface Transaction {\n  id: string;\n  type: \"purchase\" | \"redemption\" | \"bonus\";\n  points: number;\n  description: string;\n  createdAt: string;\n  externalTransactionId?: string;\n}\n\nexport default function TransactionHistory() {\n  const { data: transactions = [], isLoading } = useQuery<Transaction[]>({\n    queryKey: [\"/api/user/transactions\"],\n  });\n\n  const getTransactionIcon = (type: string) => {\n    switch (type) {\n      case \"purchase\":\n        return <DollarSign className=\"h-4 w-4 text-green-600\" />;\n      case \"redemption\":\n        return <Gift className=\"h-4 w-4 text-red-600\" />;\n      case \"bonus\":\n        return <Zap className=\"h-4 w-4 text-yellow-600\" />;\n      default:\n        return <DollarSign className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n  const getTransactionColor = (type: string) => {\n    switch (type) {\n      case \"purchase\":\n        return \"bg-green-100 text-green-800 border-green-200\";\n      case \"redemption\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      case \"bonus\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 p-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Link href=\"/profile\">\n              <ArrowLeft className=\"h-6 w-6 text-orange-600 hover:text-orange-700 cursor-pointer\" />\n            </Link>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Transaction History</h1>\n          </div>\n          <div className=\"flex justify-center items-center py-12\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-yellow-50 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4 mb-6\">\n          <Link href=\"/profile\">\n            <ArrowLeft className=\"h-6 w-6 text-orange-600 hover:text-orange-700 cursor-pointer\" />\n          </Link>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Transaction History</h1>\n        </div>\n\n        {/* Transaction List */}\n        <Card className=\"border-orange-200 shadow-lg\">\n          <CardHeader className=\"bg-gradient-to-r from-orange-500 to-yellow-500 text-white\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <DollarSign className=\"h-5 w-5\" />\n              All Transactions\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            {transactions.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <div className=\"text-gray-400 mb-2\">\n                  <DollarSign className=\"h-12 w-12 mx-auto\" />\n                </div>\n                <p className=\"text-gray-600 text-lg\">No transactions yet</p>\n                <p className=\"text-gray-500 text-sm mt-1\">\n                  Start earning points by scanning QR codes at vending machines!\n                </p>\n              </div>\n            ) : (\n              <div className=\"divide-y divide-gray-200\">\n                {transactions.map((transaction, index) => (\n                  <div key={transaction.id} className=\"p-4 hover:bg-gray-50 transition-colors\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        {getTransactionIcon(transaction.type)}\n                        <div>\n                          <p className=\"font-medium text-gray-900\">\n                            {transaction.description}\n                          </p>\n                          <p className=\"text-sm text-gray-500\">\n                            {format(new Date(transaction.createdAt), \"MMM d, yyyy 'at' h:mm a\")}\n                          </p>\n                          {transaction.externalTransactionId && (\n                            <p className=\"text-xs text-gray-400 mt-1\">\n                              ID: {transaction.externalTransactionId}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-3\">\n                        <Badge \n                          variant=\"outline\" \n                          className={`capitalize ${getTransactionColor(transaction.type)}`}\n                        >\n                          {transaction.type}\n                        </Badge>\n                        <div className=\"text-right\">\n                          <p className={`font-bold text-lg ${\n                            transaction.points > 0 ? 'text-green-600' : 'text-red-600'\n                          }`}>\n                            {transaction.points > 0 ? '+' : ''}{transaction.points}\n                          </p>\n                          <p className=\"text-xs text-gray-500\">points</p>\n                        </div>\n                      </div>\n                    </div>\n                    {index < transactions.length - 1 && <Separator className=\"mt-4\" />}\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Summary Stats */}\n        {transactions.length > 0 && (\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6\">\n            <Card className=\"border-green-200\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-2\">\n                  <DollarSign className=\"h-5 w-5 text-green-600\" />\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Points Earned</p>\n                    <p className=\"text-xl font-bold text-green-600\">\n                      +{transactions.filter(t => t.points > 0).reduce((sum, t) => sum + t.points, 0)}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-red-200\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-2\">\n                  <Gift className=\"h-5 w-5 text-red-600\" />\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Points Spent</p>\n                    <p className=\"text-xl font-bold text-red-600\">\n                      {Math.abs(transactions.filter(t => t.points < 0).reduce((sum, t) => sum + t.points, 0))}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-blue-200\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-2\">\n                  <Zap className=\"h-5 w-5 text-blue-600\" />\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Total Transactions</p>\n                    <p className=\"text-xl font-bold text-blue-600\">\n                      {transactions.length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":7764},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }","size_bytes":1833},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }","size_bytes":822},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }","size_bytes":708},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }","size_bytes":755},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1881},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":770},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/AnimatedLoyaltyProgress.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useEffect, useState } from \"react\";\n\ninterface AnimatedLoyaltyProgressProps {\n  tier: string;\n  points: number;\n  previousPoints?: number;\n}\n\nexport default function AnimatedLoyaltyProgress({ \n  tier, \n  points, \n  previousPoints = 0 \n}: AnimatedLoyaltyProgressProps) {\n  const [animatedPoints, setAnimatedPoints] = useState(previousPoints);\n\n  const getTierInfo = (currentTier: string, currentPoints: number) => {\n    switch (currentTier) {\n      case \"apprentice\":\n        return {\n          current: \"Apprentice\",\n          next: \"Tradie\",\n          pointsNeeded: 500 - currentPoints,\n          progress: (currentPoints / 500) * 100,\n          maxed: false\n        };\n      case \"tradie\":\n        return {\n          current: \"Tradie\",\n          next: \"Foreman\",\n          pointsNeeded: 1000 - currentPoints,\n          progress: ((currentPoints - 500) / 500) * 100,\n          maxed: false\n        };\n      case \"foreman\":\n        return {\n          current: \"Foreman\",\n          next: \"Max Level\",\n          pointsNeeded: 0,\n          progress: 100,\n          maxed: true\n        };\n      default:\n        return {\n          current: \"Apprentice\",\n          next: \"Tradie\",\n          pointsNeeded: 500 - currentPoints,\n          progress: (currentPoints / 500) * 100,\n          maxed: false\n        };\n    }\n  };\n\n  const tierInfo = getTierInfo(tier, animatedPoints);\n  const targetTierInfo = getTierInfo(tier, points);\n\n  // Animate points counting up\n  useEffect(() => {\n    if (points !== animatedPoints) {\n      const duration = Math.min(Math.abs(points - animatedPoints) * 50, 2000); // Max 2 seconds\n      const increment = (points - animatedPoints) / (duration / 50);\n      \n      const interval = setInterval(() => {\n        setAnimatedPoints(prev => {\n          const next = prev + increment;\n          if ((increment > 0 && next >= points) || (increment < 0 && next <= points)) {\n            clearInterval(interval);\n            return points;\n          }\n          return next;\n        });\n      }, 50);\n\n      return () => clearInterval(interval);\n    }\n  }, [points, animatedPoints]);\n\n  return (\n    <div className=\"bg-white/20 rounded-xl p-4\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <motion.span \n          className=\"font-semibold\"\n          animate={{ scale: points !== previousPoints ? [1, 1.1, 1] : 1 }}\n          transition={{ duration: 0.3 }}\n        >\n          {tierInfo.current} Level\n        </motion.span>\n        {!tierInfo.maxed && (\n          <motion.span \n            className=\"text-sm\"\n            animate={{ \n              color: tierInfo.pointsNeeded <= 50 ? [\"#ffffff\", \"#ffd500\", \"#ffffff\"] : \"#ffffff\"\n            }}\n            transition={{ \n              duration: 0.5,\n              repeat: tierInfo.pointsNeeded <= 50 ? Infinity : 0\n            }}\n          >\n            {Math.round(tierInfo.pointsNeeded)} points to {tierInfo.next}\n          </motion.span>\n        )}\n      </div>\n      \n      <div className=\"w-full bg-white/30 rounded-full h-3 mb-2 overflow-hidden\">\n        <motion.div \n          className=\"bg-gradient-to-r from-hivis-yellow to-hivis-orange h-3 rounded-full\"\n          initial={{ width: `${Math.min(getTierInfo(tier, previousPoints).progress, 100)}%` }}\n          animate={{ \n            width: `${Math.min(targetTierInfo.progress, 100)}%`,\n            boxShadow: tierInfo.progress > 90 ? [\n              \"0 0 0px rgba(255, 213, 0, 0.5)\",\n              \"0 0 20px rgba(255, 213, 0, 0.8)\",\n              \"0 0 0px rgba(255, 213, 0, 0.5)\"\n            ] : \"0 0 0px rgba(255, 213, 0, 0.5)\"\n          }}\n          transition={{ \n            duration: 1.5,\n            ease: \"easeOut\",\n            boxShadow: {\n              duration: 1,\n              repeat: Infinity,\n              repeatType: \"reverse\"\n            }\n          }}\n        />\n      </div>\n      \n      <div className=\"flex justify-between text-xs\">\n        <motion.span\n          animate={{ \n            color: tier === \"apprentice\" ? \"#ffd500\" : \"#ffffff\",\n            fontWeight: tier === \"apprentice\" ? \"bold\" : \"normal\"\n          }}\n        >\n          Apprentice\n        </motion.span>\n        <motion.span \n          animate={{ \n            color: tier === \"tradie\" ? \"#ffd500\" : \"#ffffff\",\n            fontWeight: tier === \"tradie\" ? \"bold\" : \"normal\"\n          }}\n        >\n          Tradie\n        </motion.span>\n        <motion.span \n          animate={{ \n            color: tier === \"foreman\" ? \"#ffd500\" : \"#ffffff\",\n            fontWeight: tier === \"foreman\" ? \"bold\" : \"normal\"\n          }}\n        >\n          Foreman\n        </motion.span>\n      </div>\n    </div>\n  );\n}","size_bytes":4694},"client/src/components/PointsGainedAnimation.tsx":{"content":"import { motion, AnimatePresence } from \"framer-motion\";\nimport { useEffect, useState } from \"react\";\nimport { Coins } from \"lucide-react\";\n\ninterface PointsGainedAnimationProps {\n  points: number;\n  isVisible: boolean;\n  onComplete?: () => void;\n}\n\nexport default function PointsGainedAnimation({ \n  points, \n  isVisible, \n  onComplete \n}: PointsGainedAnimationProps) {\n  const [showAnimation, setShowAnimation] = useState(isVisible);\n\n  useEffect(() => {\n    setShowAnimation(isVisible);\n  }, [isVisible]);\n\n  return (\n    <AnimatePresence onExitComplete={onComplete}>\n      {showAnimation && (\n        <motion.div\n          initial={{ \n            opacity: 0, \n            y: 0, \n            scale: 0.5 \n          }}\n          animate={{ \n            opacity: 1, \n            y: -80, \n            scale: 1.2,\n            transition: {\n              duration: 0.6,\n              ease: \"easeOut\"\n            }\n          }}\n          exit={{ \n            opacity: 0, \n            y: -120, \n            scale: 0.8,\n            transition: {\n              duration: 0.4,\n              ease: \"easeIn\"\n            }\n          }}\n          className=\"fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50 pointer-events-none\"\n          onAnimationComplete={() => {\n            setTimeout(() => setShowAnimation(false), 1000);\n          }}\n        >\n          <motion.div \n            className=\"flex items-center gap-2 bg-hivis-orange text-white px-6 py-3 rounded-full shadow-lg\"\n            animate={{ \n              scale: [1, 1.1, 1],\n              rotate: [0, 5, -5, 0]\n            }}\n            transition={{ \n              duration: 0.5,\n              delay: 0.2,\n              repeat: 2\n            }}\n          >\n            <motion.div\n              animate={{ rotate: [0, 360] }}\n              transition={{ duration: 0.8, delay: 0.1 }}\n            >\n              <Coins className=\"w-6 h-6\" />\n            </motion.div>\n            <span className=\"text-xl font-bold\">+{points} Points!</span>\n          </motion.div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}","size_bytes":2102},"client/src/components/TierUpgradeAnimation.tsx":{"content":"import { motion, AnimatePresence } from \"framer-motion\";\nimport { useEffect, useState } from \"react\";\nimport { Trophy, Star, HardHat, Sparkles } from \"lucide-react\";\n\ninterface TierUpgradeAnimationProps {\n  newTier: string;\n  isVisible: boolean;\n  onComplete?: () => void;\n}\n\nexport default function TierUpgradeAnimation({ \n  newTier, \n  isVisible, \n  onComplete \n}: TierUpgradeAnimationProps) {\n  const [showAnimation, setShowAnimation] = useState(isVisible);\n\n  useEffect(() => {\n    setShowAnimation(isVisible);\n  }, [isVisible]);\n\n  const getTierIcon = (tier: string) => {\n    switch (tier) {\n      case \"tradie\": return <Star className=\"w-12 h-12\" />;\n      case \"foreman\": return <Trophy className=\"w-12 h-12\" />;\n      default: return <HardHat className=\"w-12 h-12\" />;\n    }\n  };\n\n  const getTierName = (tier: string) => {\n    switch (tier) {\n      case \"tradie\": return \"Tradie\";\n      case \"foreman\": return \"Foreman\";\n      default: return \"Apprentice\";\n    }\n  };\n\n  const getTierColor = (tier: string) => {\n    switch (tier) {\n      case \"tradie\": return \"from-hivis-orange to-yellow-500\";\n      case \"foreman\": return \"from-hivis-yellow to-yellow-300\";\n      default: return \"from-slate-500 to-slate-400\";\n    }\n  };\n\n  return (\n    <AnimatePresence onExitComplete={onComplete}>\n      {showAnimation && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm\"\n          onClick={() => setShowAnimation(false)}\n        >\n          {/* Confetti Background */}\n          <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n            {Array.from({ length: 50 }, (_, i) => (\n              <motion.div\n                key={i}\n                className=\"absolute w-2 h-2 rounded-full\"\n                style={{\n                  background: `hsl(${Math.random() * 60 + 30}, 100%, 50%)`,\n                  left: `${Math.random() * 100}%`,\n                  top: `-10px`,\n                }}\n                animate={{\n                  y: window.innerHeight + 50,\n                  rotate: 360,\n                  opacity: [1, 1, 0],\n                }}\n                transition={{\n                  duration: Math.random() * 2 + 2,\n                  delay: Math.random() * 2,\n                  ease: \"easeOut\",\n                }}\n              />\n            ))}\n          </div>\n\n          {/* Main celebration card */}\n          <motion.div\n            initial={{ scale: 0, rotate: -180 }}\n            animate={{ \n              scale: 1, \n              rotate: 0,\n              transition: {\n                type: \"spring\",\n                stiffness: 200,\n                damping: 10\n              }\n            }}\n            exit={{ scale: 0, rotate: 180 }}\n            className={`bg-gradient-to-br ${getTierColor(newTier)} p-8 rounded-2xl text-center shadow-2xl max-w-sm mx-4`}\n          >\n            {/* Sparkles around the icon */}\n            <div className=\"relative mb-6\">\n              <motion.div\n                animate={{ \n                  scale: [1, 1.2, 1],\n                  rotate: [0, 360] \n                }}\n                transition={{ \n                  duration: 2,\n                  repeat: Infinity,\n                  ease: \"easeInOut\"\n                }}\n                className=\"text-white\"\n              >\n                {getTierIcon(newTier)}\n              </motion.div>\n              \n              {/* Sparkle effects */}\n              {Array.from({ length: 8 }, (_, i) => (\n                <motion.div\n                  key={i}\n                  className=\"absolute\"\n                  style={{\n                    left: `${50 + 40 * Math.cos(i * Math.PI / 4)}%`,\n                    top: `${50 + 40 * Math.sin(i * Math.PI / 4)}%`,\n                  }}\n                  animate={{\n                    scale: [0, 1, 0],\n                    rotate: [0, 180],\n                    opacity: [0, 1, 0],\n                  }}\n                  transition={{\n                    duration: 1.5,\n                    delay: i * 0.1,\n                    repeat: Infinity,\n                    repeatDelay: 2,\n                  }}\n                >\n                  <Sparkles className=\"w-4 h-4 text-white transform -translate-x-1/2 -translate-y-1/2\" />\n                </motion.div>\n              ))}\n            </div>\n\n            <motion.h2\n              initial={{ y: 20, opacity: 0 }}\n              animate={{ y: 0, opacity: 1 }}\n              transition={{ delay: 0.3 }}\n              className=\"text-3xl font-bold text-white mb-2\"\n            >\n              LEVEL UP!\n            </motion.h2>\n            \n            <motion.p\n              initial={{ y: 20, opacity: 0 }}\n              animate={{ y: 0, opacity: 1 }}\n              transition={{ delay: 0.5 }}\n              className=\"text-xl text-white/90 mb-4\"\n            >\n              You're now a {getTierName(newTier)}!\n            </motion.p>\n\n            <motion.div\n              initial={{ y: 20, opacity: 0 }}\n              animate={{ y: 0, opacity: 1 }}\n              transition={{ delay: 0.7 }}\n              className=\"text-white/80\"\n            >\n              <p>Keep earning points to unlock more rewards!</p>\n            </motion.div>\n\n            <motion.button\n              initial={{ y: 20, opacity: 0 }}\n              animate={{ y: 0, opacity: 1 }}\n              transition={{ delay: 0.9 }}\n              onClick={() => setShowAnimation(false)}\n              className=\"mt-6 px-6 py-2 bg-white/20 backdrop-blur-sm text-white rounded-full font-semibold hover:bg-white/30 transition-colors\"\n            >\n              Continue\n            </motion.button>\n          </motion.div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}","size_bytes":5845},"client/src/contexts/AnimationContext.tsx":{"content":"import { createContext, useContext, useState, ReactNode } from \"react\";\n\ninterface AnimationState {\n  pointsGained: {\n    points: number;\n    isVisible: boolean;\n  };\n  tierUpgrade: {\n    newTier: string;\n    isVisible: boolean;\n  };\n}\n\ninterface AnimationContextType {\n  animationState: AnimationState;\n  showPointsGained: (points: number) => void;\n  showTierUpgrade: (newTier: string) => void;\n  hidePointsGained: () => void;\n  hideTierUpgrade: () => void;\n}\n\nconst AnimationContext = createContext<AnimationContextType | undefined>(undefined);\n\nexport function AnimationProvider({ children }: { children: ReactNode }) {\n  const [animationState, setAnimationState] = useState<AnimationState>({\n    pointsGained: {\n      points: 0,\n      isVisible: false,\n    },\n    tierUpgrade: {\n      newTier: \"\",\n      isVisible: false,\n    },\n  });\n\n  const showPointsGained = (points: number) => {\n    setAnimationState(prev => ({\n      ...prev,\n      pointsGained: {\n        points,\n        isVisible: true,\n      },\n    }));\n  };\n\n  const showTierUpgrade = (newTier: string) => {\n    setAnimationState(prev => ({\n      ...prev,\n      tierUpgrade: {\n        newTier,\n        isVisible: true,\n      },\n    }));\n  };\n\n  const hidePointsGained = () => {\n    setAnimationState(prev => ({\n      ...prev,\n      pointsGained: {\n        ...prev.pointsGained,\n        isVisible: false,\n      },\n    }));\n  };\n\n  const hideTierUpgrade = () => {\n    setAnimationState(prev => ({\n      ...prev,\n      tierUpgrade: {\n        ...prev.tierUpgrade,\n        isVisible: false,\n      },\n    }));\n  };\n\n  return (\n    <AnimationContext.Provider\n      value={{\n        animationState,\n        showPointsGained,\n        showTierUpgrade,\n        hidePointsGained,\n        hideTierUpgrade,\n      }}\n    >\n      {children}\n    </AnimationContext.Provider>\n  );\n}\n\nexport function useAnimation() {\n  const context = useContext(AnimationContext);\n  if (!context) {\n    throw new Error(\"useAnimation must be used within an AnimationProvider\");\n  }\n  return context;\n}","size_bytes":2031}},"version":1}