import { sql } from 'drizzle-orm';
import { relations } from 'drizzle-orm';
import {
  index,
  jsonb,
  pgTable,
  timestamp,
  varchar,
  integer,
  boolean,
  text,
} from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

// Session storage table.
export const sessions = pgTable(
  "sessions",
  {
    sid: varchar("sid").primaryKey(),
    sess: jsonb("sess").notNull(),
    expire: timestamp("expire").notNull(),
  },
  (table) => [index("IDX_session_expire").on(table.expire)],
);

// User storage table.
export const users = pgTable("users", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  email: varchar("email").unique().notNull(),
  firstName: varchar("first_name").notNull(),
  lastName: varchar("last_name"),
  password: varchar("password").notNull(),
  mobile: varchar("mobile").notNull(),
  profileImageUrl: varchar("profile_image_url"),
  loyaltyTier: varchar("loyalty_tier").default("apprentice"), // apprentice, tradie, foreman
  totalPoints: integer("total_points").default(0),
  punchCardProgress: integer("punch_card_progress").default(0),
  isAdmin: boolean("is_admin").default(false),
  isDeveloper: boolean("is_developer").default(false),
  referralCode: varchar("referral_code").unique(),
  referredBy: varchar("referred_by"),
  referralCount: integer("referral_count").default(0),
  // Push notification settings
  pushToken: varchar("push_token"), // FCM/APNS token for notifications
  notificationsEnabled: boolean("notifications_enabled").default(true),
  // External integration
  cardNumber: varchar("card_number").unique(), // For matching vending machine transactions
  phoneNumber: varchar("phone_number"), // Alternative matching method
  permanentQrCode: varchar("permanent_qr_code").unique(), // Static QR code for vending machine scanning
  // Location information
  suburb: varchar("suburb").notNull(), // Mandatory field for grouping customers by construction sites
  // Daily streak tracking
  currentStreak: integer("current_streak").default(0),
  lastPurchaseDate: timestamp("last_purchase_date"),
  streakRewardEarned: boolean("streak_reward_earned").default(false), // Has earned 7-day reward
  // Password reset functionality
  resetToken: varchar("reset_token"),
  resetTokenExpiry: timestamp("reset_token_expiry"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Transactions table for tracking purchases and redemptions
export const transactions = pgTable("transactions", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").references(() => users.id).notNull(),
  type: varchar("type").notNull(), // purchase, redemption, bonus
  points: integer("points").notNull(), // positive for earned, negative for spent
  description: text("description").notNull(),
  machineId: varchar("machine_id"),
  // External transaction matching
  externalTransactionId: varchar("external_transaction_id").unique(), // From Moma app
  amount: integer("amount"), // Purchase amount in cents
  cardNumber: varchar("card_number"), // Card used for purchase
  isAutoGenerated: boolean("is_auto_generated").default(false), // Auto-created from external system
  // Reward redemption fields
  redemptionCode: varchar("redemption_code").unique(), // Generated code for reward redemption
  isRedeemed: boolean("is_redeemed").default(false), // Has the reward been claimed at vending machine
  redeemedAt: timestamp("redeemed_at"), // When the reward was actually claimed
  createdAt: timestamp("created_at").defaultNow(),
});

// Push notifications table
export const notifications = pgTable("notifications", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").references(() => users.id),
  title: varchar("title").notNull(),
  message: text("message").notNull(),
  type: varchar("type").notNull(), // promotion, reminder, achievement
  isRead: boolean("is_read").default(false),
  scheduledFor: timestamp("scheduled_for"),
  sentAt: timestamp("sent_at"),
  createdAt: timestamp("created_at").defaultNow(),
});

// External transactions for matching
export const externalTransactions = pgTable("external_transactions", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  externalId: varchar("external_id").unique().notNull(), // From Moma app
  machineId: varchar("machine_id").notNull(),
  cardNumber: varchar("card_number"),
  qrCode: varchar("qr_code"), // For permanent QR code matching
  amount: integer("amount").notNull(), // In cents
  productName: varchar("product_name"),
  timestamp: timestamp("timestamp").notNull(),
  isProcessed: boolean("is_processed").default(false),
  matchedUserId: varchar("matched_user_id").references(() => users.id),
  createdAt: timestamp("created_at").defaultNow(),
});

// Rewards table for available rewards
export const rewards = pgTable("rewards", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: varchar("name").notNull(),
  description: text("description"),
  pointsCost: integer("points_cost").notNull(),
  category: varchar("category").notNull(), // drink, snack, bonus
  isActive: boolean("is_active").default(true),
  createdAt: timestamp("created_at").defaultNow(),
});

// Photo reel for home page
export const photoReelItems = pgTable("photo_reel_items", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  title: varchar("title").notNull(),
  description: text("description"),
  imageUrl: varchar("image_url").notNull(),
  linkUrl: varchar("link_url"), // Optional link for CTA
  isActive: boolean("is_active").default(true),
  displayOrder: integer("display_order").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// App exclusive rewards section
export const appExclusiveRewards = pgTable("app_exclusive_rewards", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  title: varchar("title").notNull(),
  description: text("description").notNull(),
  pointsCost: integer("points_cost").notNull(),
  originalPrice: varchar("original_price"), // e.g., "$4.50"
  savingsText: varchar("savings_text"), // e.g., "Save $2.50"
  imageUrl: varchar("image_url"),
  isActive: boolean("is_active").default(true),
  isLimitedTime: boolean("is_limited_time").default(false),
  expiresAt: timestamp("expires_at"),
  displayOrder: integer("display_order").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Vending machines table
export const machines = pgTable("machines", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: varchar("name").notNull(),
  location: text("location").notNull(),
  isOnline: boolean("is_online").default(true),
  lastPing: timestamp("last_ping").defaultNow(),
  nayaxDeviceId: varchar("nayax_device_id").unique(), // Nayax DOT device identifier
  supportedPromotions: varchar("supported_promotions").array(), // Array of promotion types
  createdAt: timestamp("created_at").defaultNow(),
});

// Monthly seasons table for leaderboards
export const seasons = pgTable("seasons", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  year: integer("year").notNull(),
  month: integer("month").notNull(), // 1-12
  name: varchar("name").notNull(), // e.g., "January 2025", "February 2025"
  isActive: boolean("is_active").default(false),
  startDate: timestamp("start_date").notNull(),
  endDate: timestamp("end_date").notNull(),
  createdAt: timestamp("created_at").defaultNow(),
});

// Monthly leaderboard points tracking
export const monthlyPoints = pgTable("monthly_points", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").references(() => users.id).notNull(),
  seasonId: varchar("season_id").references(() => seasons.id).notNull(),
  points: integer("points").default(0),
  rank: integer("rank"),
  suburb: varchar("suburb").notNull(),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// QR code scans for tracking vending machine interactions
export const qrScans = pgTable("qr_scans", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").references(() => users.id).notNull(),
  machineId: varchar("machine_id").references(() => machines.id),
  qrData: text("qr_data").notNull(), // Original QR code data
  scanTimestamp: timestamp("scan_timestamp").defaultNow(),
  promotionApplied: varchar("promotion_applied"), // Which promotion was triggered
  pointsAwarded: integer("points_awarded").default(0),
  discountApplied: integer("discount_applied").default(0), // Percentage discount
  nayaxTransactionId: varchar("nayax_transaction_id"), // From Nayax API
  status: varchar("status").default("pending"), // pending, completed, failed
  createdAt: timestamp("created_at").defaultNow(),
});

// Nayax promotions configuration
export const promotions = pgTable("promotions", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: varchar("name").notNull(),
  description: text("description").notNull(),
  type: varchar("type").notNull(), // discount, bonus_points, free_item
  tierRequired: varchar("tier_required").notNull(), // Apprentice, Tradie, Foreman
  discountPercentage: integer("discount_percentage").default(0),
  bonusPoints: integer("bonus_points").default(0),
  freeItemCode: varchar("free_item_code"), // Nayax product code for free items
  isActive: boolean("is_active").default(true),
  validFrom: timestamp("valid_from").defaultNow(),
  validUntil: timestamp("valid_until"),
  maxUsesPerUser: integer("max_uses_per_user").default(1),
  createdAt: timestamp("created_at").defaultNow(),
});

// Relations
export const usersRelations = relations(users, ({ many }) => ({
  transactions: many(transactions),
  notifications: many(notifications),
  monthlyPoints: many(monthlyPoints),
  qrScans: many(qrScans),
}));

export const transactionsRelations = relations(transactions, ({ one }) => ({
  user: one(users, {
    fields: [transactions.userId],
    references: [users.id],
  }),
}));

export const notificationsRelations = relations(notifications, ({ one }) => ({
  user: one(users, {
    fields: [notifications.userId],
    references: [users.id],
  }),
}));

export const externalTransactionsRelations = relations(externalTransactions, ({ one }) => ({
  matchedUser: one(users, {
    fields: [externalTransactions.matchedUserId],
    references: [users.id],
  }),
}));

export const qrScansRelations = relations(qrScans, ({ one }) => ({
  user: one(users, {
    fields: [qrScans.userId],
    references: [users.id],
  }),
  machine: one(machines, {
    fields: [qrScans.machineId],
    references: [machines.id],
  }),
}));

export const seasonsRelations = relations(seasons, ({ many }) => ({
  monthlyPoints: many(monthlyPoints),
}));

export const monthlyPointsRelations = relations(monthlyPoints, ({ one }) => ({
  user: one(users, {
    fields: [monthlyPoints.userId],
    references: [users.id],
  }),
  season: one(seasons, {
    fields: [monthlyPoints.seasonId],
    references: [seasons.id],
  }),
}));

export const promotionsRelations = relations(promotions, ({ many }) => ({
  // Relations can be added as needed
}));

// Schema types
export type UpsertUser = typeof users.$inferInsert;
export type User = typeof users.$inferSelect;
export type Transaction = typeof transactions.$inferSelect;
export type InsertTransaction = typeof transactions.$inferInsert;
export type Notification = typeof notifications.$inferSelect;
export type InsertNotification = typeof notifications.$inferInsert;
export type ExternalTransaction = typeof externalTransactions.$inferSelect;
export type InsertExternalTransaction = typeof externalTransactions.$inferInsert;
export type Reward = typeof rewards.$inferSelect;
export type InsertReward = typeof rewards.$inferInsert;
export type Machine = typeof machines.$inferSelect;
export type InsertMachine = typeof machines.$inferInsert;
export type Season = typeof seasons.$inferSelect;
export type InsertSeason = typeof seasons.$inferInsert;
export type MonthlyPoints = typeof monthlyPoints.$inferSelect;
export type InsertMonthlyPoints = typeof monthlyPoints.$inferInsert;
export type QRScan = typeof qrScans.$inferSelect;
export type InsertQRScan = typeof qrScans.$inferInsert;
export type Promotion = typeof promotions.$inferSelect;
export type InsertPromotion = typeof promotions.$inferInsert;
export type PhotoReelItem = typeof photoReelItems.$inferSelect;
export type InsertPhotoReelItem = typeof photoReelItems.$inferInsert;
export type AppExclusiveReward = typeof appExclusiveRewards.$inferSelect;
export type InsertAppExclusiveReward = typeof appExclusiveRewards.$inferInsert;

export const insertTransactionSchema = createInsertSchema(transactions).pick({
  userId: true,
  type: true,
  points: true,
  description: true,
  machineId: true,
});

export const insertRewardSchema = createInsertSchema(rewards).pick({
  name: true,
  description: true,
  pointsCost: true,
  category: true,
});

export const insertMachineSchema = createInsertSchema(machines).pick({
  name: true,
  location: true,
});

export const insertNotificationSchema = createInsertSchema(notifications).pick({
  userId: true,
  title: true,
  message: true,
  type: true,
  scheduledFor: true,
});

export const insertExternalTransactionSchema = createInsertSchema(externalTransactions).pick({
  externalId: true,
  machineId: true,
  cardNumber: true,
  amount: true,
  productName: true,
  timestamp: true,
});

export const insertQRScanSchema = createInsertSchema(qrScans).pick({
  userId: true,
  machineId: true,
  qrData: true,
  promotionApplied: true,
  pointsAwarded: true,
  discountApplied: true,
  nayaxTransactionId: true,
});

export const insertPhotoReelItemSchema = createInsertSchema(photoReelItems).pick({
  title: true,
  description: true,
  imageUrl: true,
  linkUrl: true,
  displayOrder: true,
});

export const insertAppExclusiveRewardSchema = createInsertSchema(appExclusiveRewards).pick({
  title: true,
  description: true,
  pointsCost: true,
  originalPrice: true,
  savingsText: true,
  imageUrl: true,
  isLimitedTime: true,
  expiresAt: true,
  displayOrder: true,
});

export const insertPromotionSchema = createInsertSchema(promotions).pick({
  name: true,
  description: true,
  type: true,
  tierRequired: true,
  discountPercentage: true,
  bonusPoints: true,
  freeItemCode: true,
});

export type InsertTransaction = z.infer<typeof insertTransactionSchema>;
export type Transaction = typeof transactions.$inferSelect;
export type Reward = typeof rewards.$inferSelect;
export type Machine = typeof machines.$inferSelect;
export type QRScan = typeof qrScans.$inferSelect;
export type Promotion = typeof promotions.$inferSelect;
export type InsertQRScan = z.infer<typeof insertQRScanSchema>;
export type InsertPromotion = z.infer<typeof insertPromotionSchema>;
export type Notification = typeof notifications.$inferSelect;
export type InsertNotification = z.infer<typeof insertNotificationSchema>;
export type ExternalTransaction = typeof externalTransactions.$inferSelect;
export type InsertExternalTransaction = z.infer<typeof insertExternalTransactionSchema>;
