"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.insertPromotionSchema = exports.insertAppExclusiveRewardSchema = exports.insertPhotoReelItemSchema = exports.insertQRScanSchema = exports.insertExternalTransactionSchema = exports.insertNotificationSchema = exports.insertMachineSchema = exports.insertRewardSchema = exports.insertTransactionSchema = exports.promotionsRelations = exports.monthlyPointsRelations = exports.seasonsRelations = exports.qrScansRelations = exports.externalTransactionsRelations = exports.notificationsRelations = exports.transactionsRelations = exports.usersRelations = exports.promotions = exports.qrScans = exports.monthlyPoints = exports.seasons = exports.machines = exports.appExclusiveRewards = exports.photoReelItems = exports.rewards = exports.externalTransactions = exports.notifications = exports.transactions = exports.users = exports.sessions = void 0;
const drizzle_orm_1 = require("drizzle-orm");
const drizzle_orm_2 = require("drizzle-orm");
const pg_core_1 = require("drizzle-orm/pg-core");
const drizzle_zod_1 = require("drizzle-zod");
// Session storage table.
exports.sessions = (0, pg_core_1.pgTable)("sessions", {
    sid: (0, pg_core_1.varchar)("sid").primaryKey(),
    sess: (0, pg_core_1.jsonb)("sess").notNull(),
    expire: (0, pg_core_1.timestamp)("expire").notNull(),
}, (table) => [(0, pg_core_1.index)("IDX_session_expire").on(table.expire)]);
// User storage table.
exports.users = (0, pg_core_1.pgTable)("users", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    email: (0, pg_core_1.varchar)("email").unique().notNull(),
    firstName: (0, pg_core_1.varchar)("first_name").notNull(),
    lastName: (0, pg_core_1.varchar)("last_name"),
    password: (0, pg_core_1.varchar)("password").notNull(),
    mobile: (0, pg_core_1.varchar)("mobile").notNull(),
    profileImageUrl: (0, pg_core_1.varchar)("profile_image_url"),
    loyaltyTier: (0, pg_core_1.varchar)("loyalty_tier").default("apprentice"), // apprentice, tradie, foreman
    totalPoints: (0, pg_core_1.integer)("total_points").default(0),
    punchCardProgress: (0, pg_core_1.integer)("punch_card_progress").default(0),
    isAdmin: (0, pg_core_1.boolean)("is_admin").default(false),
    isDeveloper: (0, pg_core_1.boolean)("is_developer").default(false),
    referralCode: (0, pg_core_1.varchar)("referral_code").unique(),
    referredBy: (0, pg_core_1.varchar)("referred_by"),
    referralCount: (0, pg_core_1.integer)("referral_count").default(0),
    // Push notification settings
    pushToken: (0, pg_core_1.varchar)("push_token"), // FCM/APNS token for notifications
    notificationsEnabled: (0, pg_core_1.boolean)("notifications_enabled").default(true),
    // External integration
    cardNumber: (0, pg_core_1.varchar)("card_number").unique(), // For matching vending machine transactions
    phoneNumber: (0, pg_core_1.varchar)("phone_number"), // Alternative matching method
    permanentQrCode: (0, pg_core_1.varchar)("permanent_qr_code").unique(), // Static QR code for vending machine scanning
    // Location information
    suburb: (0, pg_core_1.varchar)("suburb").notNull(), // Mandatory field for grouping customers by construction sites
    // Daily streak tracking
    currentStreak: (0, pg_core_1.integer)("current_streak").default(0),
    lastPurchaseDate: (0, pg_core_1.timestamp)("last_purchase_date"),
    streakRewardEarned: (0, pg_core_1.boolean)("streak_reward_earned").default(false), // Has earned 7-day reward
    // Password reset functionality
    resetToken: (0, pg_core_1.varchar)("reset_token"),
    resetTokenExpiry: (0, pg_core_1.timestamp)("reset_token_expiry"),
    createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)("updated_at").defaultNow(),
});
// Transactions table for tracking purchases and redemptions
exports.transactions = (0, pg_core_1.pgTable)("transactions", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)("user_id").references(() => exports.users.id).notNull(),
    type: (0, pg_core_1.varchar)("type").notNull(), // purchase, redemption, bonus
    points: (0, pg_core_1.integer)("points").notNull(), // positive for earned, negative for spent
    description: (0, pg_core_1.text)("description").notNull(),
    machineId: (0, pg_core_1.varchar)("machine_id"),
    // External transaction matching
    externalTransactionId: (0, pg_core_1.varchar)("external_transaction_id").unique(), // From Moma app
    amount: (0, pg_core_1.integer)("amount"), // Purchase amount in cents
    cardNumber: (0, pg_core_1.varchar)("card_number"), // Card used for purchase
    isAutoGenerated: (0, pg_core_1.boolean)("is_auto_generated").default(false), // Auto-created from external system
    // Reward redemption fields
    redemptionCode: (0, pg_core_1.varchar)("redemption_code").unique(), // Generated code for reward redemption
    isRedeemed: (0, pg_core_1.boolean)("is_redeemed").default(false), // Has the reward been claimed at vending machine
    redeemedAt: (0, pg_core_1.timestamp)("redeemed_at"), // When the reward was actually claimed
    createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
});
// Push notifications table
exports.notifications = (0, pg_core_1.pgTable)("notifications", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)("user_id").references(() => exports.users.id),
    title: (0, pg_core_1.varchar)("title").notNull(),
    message: (0, pg_core_1.text)("message").notNull(),
    type: (0, pg_core_1.varchar)("type").notNull(), // promotion, reminder, achievement
    isRead: (0, pg_core_1.boolean)("is_read").default(false),
    scheduledFor: (0, pg_core_1.timestamp)("scheduled_for"),
    sentAt: (0, pg_core_1.timestamp)("sent_at"),
    createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
});
// External transactions for matching
exports.externalTransactions = (0, pg_core_1.pgTable)("external_transactions", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    externalId: (0, pg_core_1.varchar)("external_id").unique().notNull(), // From Moma app
    machineId: (0, pg_core_1.varchar)("machine_id").notNull(),
    cardNumber: (0, pg_core_1.varchar)("card_number"),
    qrCode: (0, pg_core_1.varchar)("qr_code"), // For permanent QR code matching
    amount: (0, pg_core_1.integer)("amount").notNull(), // In cents
    productName: (0, pg_core_1.varchar)("product_name"),
    timestamp: (0, pg_core_1.timestamp)("timestamp").notNull(),
    isProcessed: (0, pg_core_1.boolean)("is_processed").default(false),
    matchedUserId: (0, pg_core_1.varchar)("matched_user_id").references(() => exports.users.id),
    createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
});
// Rewards table for available rewards
exports.rewards = (0, pg_core_1.pgTable)("rewards", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    name: (0, pg_core_1.varchar)("name").notNull(),
    description: (0, pg_core_1.text)("description"),
    pointsCost: (0, pg_core_1.integer)("points_cost").notNull(),
    category: (0, pg_core_1.varchar)("category").notNull(), // drink, snack, bonus
    isActive: (0, pg_core_1.boolean)("is_active").default(true),
    createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
});
// Photo reel for home page
exports.photoReelItems = (0, pg_core_1.pgTable)("photo_reel_items", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    title: (0, pg_core_1.varchar)("title").notNull(),
    description: (0, pg_core_1.text)("description"),
    imageUrl: (0, pg_core_1.varchar)("image_url").notNull(),
    linkUrl: (0, pg_core_1.varchar)("link_url"), // Optional link for CTA
    isActive: (0, pg_core_1.boolean)("is_active").default(true),
    displayOrder: (0, pg_core_1.integer)("display_order").default(0),
    createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)("updated_at").defaultNow(),
});
// App exclusive rewards section
exports.appExclusiveRewards = (0, pg_core_1.pgTable)("app_exclusive_rewards", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    title: (0, pg_core_1.varchar)("title").notNull(),
    description: (0, pg_core_1.text)("description").notNull(),
    pointsCost: (0, pg_core_1.integer)("points_cost").notNull(),
    originalPrice: (0, pg_core_1.varchar)("original_price"), // e.g., "$4.50"
    savingsText: (0, pg_core_1.varchar)("savings_text"), // e.g., "Save $2.50"
    imageUrl: (0, pg_core_1.varchar)("image_url"),
    isActive: (0, pg_core_1.boolean)("is_active").default(true),
    isLimitedTime: (0, pg_core_1.boolean)("is_limited_time").default(false),
    expiresAt: (0, pg_core_1.timestamp)("expires_at"),
    displayOrder: (0, pg_core_1.integer)("display_order").default(0),
    createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)("updated_at").defaultNow(),
});
// Vending machines table
exports.machines = (0, pg_core_1.pgTable)("machines", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    name: (0, pg_core_1.varchar)("name").notNull(),
    location: (0, pg_core_1.text)("location").notNull(),
    isOnline: (0, pg_core_1.boolean)("is_online").default(true),
    lastPing: (0, pg_core_1.timestamp)("last_ping").defaultNow(),
    nayaxDeviceId: (0, pg_core_1.varchar)("nayax_device_id").unique(), // Nayax DOT device identifier
    supportedPromotions: (0, pg_core_1.varchar)("supported_promotions").array(), // Array of promotion types
    createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
});
// Monthly seasons table for leaderboards
exports.seasons = (0, pg_core_1.pgTable)("seasons", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    year: (0, pg_core_1.integer)("year").notNull(),
    month: (0, pg_core_1.integer)("month").notNull(), // 1-12
    name: (0, pg_core_1.varchar)("name").notNull(), // e.g., "January 2025", "February 2025"
    isActive: (0, pg_core_1.boolean)("is_active").default(false),
    startDate: (0, pg_core_1.timestamp)("start_date").notNull(),
    endDate: (0, pg_core_1.timestamp)("end_date").notNull(),
    createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
});
// Monthly leaderboard points tracking
exports.monthlyPoints = (0, pg_core_1.pgTable)("monthly_points", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)("user_id").references(() => exports.users.id).notNull(),
    seasonId: (0, pg_core_1.varchar)("season_id").references(() => exports.seasons.id).notNull(),
    points: (0, pg_core_1.integer)("points").default(0),
    rank: (0, pg_core_1.integer)("rank"),
    suburb: (0, pg_core_1.varchar)("suburb").notNull(),
    createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)("updated_at").defaultNow(),
});
// QR code scans for tracking vending machine interactions
exports.qrScans = (0, pg_core_1.pgTable)("qr_scans", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)("user_id").references(() => exports.users.id).notNull(),
    machineId: (0, pg_core_1.varchar)("machine_id").references(() => exports.machines.id),
    qrData: (0, pg_core_1.text)("qr_data").notNull(), // Original QR code data
    scanTimestamp: (0, pg_core_1.timestamp)("scan_timestamp").defaultNow(),
    promotionApplied: (0, pg_core_1.varchar)("promotion_applied"), // Which promotion was triggered
    pointsAwarded: (0, pg_core_1.integer)("points_awarded").default(0),
    discountApplied: (0, pg_core_1.integer)("discount_applied").default(0), // Percentage discount
    nayaxTransactionId: (0, pg_core_1.varchar)("nayax_transaction_id"), // From Nayax API
    status: (0, pg_core_1.varchar)("status").default("pending"), // pending, completed, failed
    createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
});
// Nayax promotions configuration
exports.promotions = (0, pg_core_1.pgTable)("promotions", {
    id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    name: (0, pg_core_1.varchar)("name").notNull(),
    description: (0, pg_core_1.text)("description").notNull(),
    type: (0, pg_core_1.varchar)("type").notNull(), // discount, bonus_points, free_item
    tierRequired: (0, pg_core_1.varchar)("tier_required").notNull(), // Apprentice, Tradie, Foreman
    discountPercentage: (0, pg_core_1.integer)("discount_percentage").default(0),
    bonusPoints: (0, pg_core_1.integer)("bonus_points").default(0),
    freeItemCode: (0, pg_core_1.varchar)("free_item_code"), // Nayax product code for free items
    isActive: (0, pg_core_1.boolean)("is_active").default(true),
    validFrom: (0, pg_core_1.timestamp)("valid_from").defaultNow(),
    validUntil: (0, pg_core_1.timestamp)("valid_until"),
    maxUsesPerUser: (0, pg_core_1.integer)("max_uses_per_user").default(1),
    createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
});
// Relations
exports.usersRelations = (0, drizzle_orm_2.relations)(exports.users, ({ many }) => ({
    transactions: many(exports.transactions),
    notifications: many(exports.notifications),
    monthlyPoints: many(exports.monthlyPoints),
    qrScans: many(exports.qrScans),
}));
exports.transactionsRelations = (0, drizzle_orm_2.relations)(exports.transactions, ({ one }) => ({
    user: one(exports.users, {
        fields: [exports.transactions.userId],
        references: [exports.users.id],
    }),
}));
exports.notificationsRelations = (0, drizzle_orm_2.relations)(exports.notifications, ({ one }) => ({
    user: one(exports.users, {
        fields: [exports.notifications.userId],
        references: [exports.users.id],
    }),
}));
exports.externalTransactionsRelations = (0, drizzle_orm_2.relations)(exports.externalTransactions, ({ one }) => ({
    matchedUser: one(exports.users, {
        fields: [exports.externalTransactions.matchedUserId],
        references: [exports.users.id],
    }),
}));
exports.qrScansRelations = (0, drizzle_orm_2.relations)(exports.qrScans, ({ one }) => ({
    user: one(exports.users, {
        fields: [exports.qrScans.userId],
        references: [exports.users.id],
    }),
    machine: one(exports.machines, {
        fields: [exports.qrScans.machineId],
        references: [exports.machines.id],
    }),
}));
exports.seasonsRelations = (0, drizzle_orm_2.relations)(exports.seasons, ({ many }) => ({
    monthlyPoints: many(exports.monthlyPoints),
}));
exports.monthlyPointsRelations = (0, drizzle_orm_2.relations)(exports.monthlyPoints, ({ one }) => ({
    user: one(exports.users, {
        fields: [exports.monthlyPoints.userId],
        references: [exports.users.id],
    }),
    season: one(exports.seasons, {
        fields: [exports.monthlyPoints.seasonId],
        references: [exports.seasons.id],
    }),
}));
exports.promotionsRelations = (0, drizzle_orm_2.relations)(exports.promotions, ({ many }) => ({
// Relations can be added as needed
}));
exports.insertTransactionSchema = (0, drizzle_zod_1.createInsertSchema)(exports.transactions).pick({
    userId: true,
    type: true,
    points: true,
    description: true,
    machineId: true,
});
exports.insertRewardSchema = (0, drizzle_zod_1.createInsertSchema)(exports.rewards).pick({
    name: true,
    description: true,
    pointsCost: true,
    category: true,
});
exports.insertMachineSchema = (0, drizzle_zod_1.createInsertSchema)(exports.machines).pick({
    name: true,
    location: true,
});
exports.insertNotificationSchema = (0, drizzle_zod_1.createInsertSchema)(exports.notifications).pick({
    userId: true,
    title: true,
    message: true,
    type: true,
    scheduledFor: true,
});
exports.insertExternalTransactionSchema = (0, drizzle_zod_1.createInsertSchema)(exports.externalTransactions).pick({
    externalId: true,
    machineId: true,
    cardNumber: true,
    amount: true,
    productName: true,
    timestamp: true,
});
exports.insertQRScanSchema = (0, drizzle_zod_1.createInsertSchema)(exports.qrScans).pick({
    userId: true,
    machineId: true,
    qrData: true,
    promotionApplied: true,
    pointsAwarded: true,
    discountApplied: true,
    nayaxTransactionId: true,
});
exports.insertPhotoReelItemSchema = (0, drizzle_zod_1.createInsertSchema)(exports.photoReelItems).pick({
    title: true,
    description: true,
    imageUrl: true,
    linkUrl: true,
    displayOrder: true,
});
exports.insertAppExclusiveRewardSchema = (0, drizzle_zod_1.createInsertSchema)(exports.appExclusiveRewards).pick({
    title: true,
    description: true,
    pointsCost: true,
    originalPrice: true,
    savingsText: true,
    imageUrl: true,
    isLimitedTime: true,
    expiresAt: true,
    displayOrder: true,
});
exports.insertPromotionSchema = (0, drizzle_zod_1.createInsertSchema)(exports.promotions).pick({
    name: true,
    description: true,
    type: true,
    tierRequired: true,
    discountPercentage: true,
    bonusPoints: true,
    freeItemCode: true,
});
